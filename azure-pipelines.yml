# Node.js with Angular
# Build a Node.js project that uses Angular.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript
name: $(SourceBranchName).$(Build.BuildId)

trigger:
- main
- qa
- release.*
- task*
- strory*
- pipeline*

pool:
  # vmImage: ubuntu-latest
  name: prduse2
  demands:
    - agent.name -equals LinuxAgentforBuildE2

resources: 
- repo: self

variables:
  YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn
  buildId: '$(Build.BuildId)'
  buildConfiguration: 'Release'
  majorVersion: '1'
  minorVersion: '0'
  patchVersion: $[counter(format('{0}.{1}', variables['majorVersion'], variables['minorVersion']), 0)]
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/release.') }}: 
   packageVersionIdentifier: ''
   imageVersionIdentifier: ''
  ${{ elseif startsWith(variables['Build.SourceBranch'], 'refs/heads/qa') }}:
    packageVersionIdentifier: '-beta'
    imageVersionIdentifier: '-qa'
  ${{ else }}: 
   packageVersionIdentifier: '-beta'
   imageVersionIdentifier: '-dev'

steps:
# - task: Cache@2
#   inputs:
#     key: '"yarn" | "$(Agent.OS)" | yarn.lock'
#     restoreKeys: |
#        yarn | "$(Agent.OS)"
#        yarn
#     path: $(YARN_CACHE_FOLDER)
#   displayName: Cache Yarn packages
- task: NodeTool@0
  inputs:
    versionSpec: '16.x'
  displayName: 'Install Node.js'
- task: PowerShell@2
  displayName: Install yarn package
  inputs:
    targetType: 'inline'
    script: 'npm install --global yarn'
- task: PowerShell@2
  displayName: Install packages
  inputs:
    targetType: 'inline'
    script: 'yarn install --frozen-lockfile'

- task: PowerShell@2
  displayName: Build angular
  inputs:
    targetType: 'inline'
    script: 'yarn run build'

- task: Docker@2
  displayName: Build an image
  inputs:
    containerRegistry: 'shruse2e2acr'
    repository: 'einsteinui'
    command: 'buildAndPush'
    dockerfile: '**/Dockerfile'
    buildContext: $(Build.SourcesDirectory)
    tags: |
      $(buildId)$(imageVersionIdentifier)
      latest$(imageVersionIdentifier)
      
- task: HelmInstaller@0
  inputs:
    helmVersion: '2.14.1'
    installKubectl: false

- task: PowerShell@2
  displayName: Pack helm package
  inputs:
    targetType: 'inline'
    script: 'helm package $(Build.SourcesDirectory)/helm --app-version=$(buildId)$(imageVersionIdentifier) -d $(Build.ArtifactStagingDirectory)/helm'

- task: PublishBuildArtifacts@1
  displayName: publish helm package
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/helm'
    ArtifactName: 'helm'
    publishLocation: 'Container'
- task: PostBuildCleanup@3
  displayName: Cleanup
  inputs:
    disableCertCheck: true