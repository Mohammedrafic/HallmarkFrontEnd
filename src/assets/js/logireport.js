(function(n) {
    self.__j$vmpkg = self.__j$vmpkg || {};
    self.__j$vmpkg[n] = 1;
})("jreportapi");

(function(n) {
    self.__j$vmpkg = self.__j$vmpkg || {};
    self.__j$vmpkg[n] = 1;
})("jsre-core");

(function(self) {
    function j$vmF(F) {
        "use strict";
        function Pair(x, y) {
            var CLASS = Pair, thi$ = CLASS.prototype;
            if (intern(CLASS)) {
                this.init.apply(this, arguments);
                return;
            }
            intern(CLASS, "Pair");
            thi$.init = function(x, y) {
                this[0] = x;
                this[1] = y;
                this.src = undefined;
                return this;
            };
            this.init.apply(this, arguments);
        }
        function Signal(executor) {
            var CLASS = Signal, thi$ = CLASS.prototype;
            if (intern(CLASS)) {
                this.init.apply(this, arguments);
                return;
            }
            intern(CLASS, "Signal");
            thi$.get = function() {
                return this.value;
            };
            thi$.set = function(value) {
                return this.value === value ? this : (this.value = value, settled.call(this));
            };
            function settled() {
                return this.procs.forEach(run.bind(this, this.value)), this;
            }
            function run(val, fn) {
                try {
                    fn(val);
                } catch (ex) {
                    console.error(ex);
                }
            }
            thi$.attach = function(handler) {
                return lambdap(handler) ? (this.procs.push(handler), this.value !== undefined ? settled.call(this) : this) : this;
            };
            thi$.detach = function(handler) {
                var i = indexOf(this.procs, handler);
                return i !== -1 ? (this.procs.splice(i, 1), this) : this;
            };
            thi$.reduce = function(fn, acc) {
                return new Signal(function(trigger) {
                    this.attach(function(value) {
                        return eofp(value) ? trigger(acc) : acc = fn(acc, value);
                    });
                });
            };
            thi$.map = function(fn) {
                return new Signal(function(trigger) {
                    this.attach(function(value) {
                        trigger(value === EOF ? EOF : fn(value));
                    });
                });
            };
            thi$.filter = function(fn) {
                return new Signal(function(trigger) {
                    this.attach(function(value) {
                        eofp(value) ? trigger(EOF) : fn(value) ? trigger(value) : noop();
                    });
                });
            };
            thi$.when = function(fn) {
                return new Signal(function(trigger) {
                    this.attach(function() {
                        fn(trigger);
                    });
                });
            };
            thi$.until = function(signal) {
                signal.attach(function() {
                    this.procs = [];
                });
                return this;
            };
            thi$.cancel = function() {
                var src = this.src;
                src ? (detachEvent(src.obj, src.type, src.fn), this.src = undefined) : noop();
                this.value = undefined;
                this.procs = [];
            };
            thi$.init = function(executor) {
                return !lambdap(executor) ? throwE(TypeError("Signal executor " + executor + " is not a function")) : (this.value = undefined, 
                this.procs = [], this.src = undefined, noop !== executor ? executor(this.set.bind(this)) : noop());
            };
            this.init.apply(this, arguments);
        }
        function Promise(executor) {
            var CLASS = Promise, thi$ = CLASS.prototype;
            if (intern(CLASS)) {
                this.init.apply(this, arguments);
                return;
            }
            intern(CLASS, "Promise");
            var funs = [ null, resolve, reject ], E1 = TypeError("A promise cannot be resolved with itself."), PENDING = 0, FULFILLED = 1, REJECTED = 2, pending = F.eq(0), fulfilled = F.eq(1), rejected = F.eq(2);
            function resolve(v) {
                var then;
                try {
                    return (then = thenable(v)) ? then.call(v, resolve.bind(this), reject.bind(this)) : pending(this.state) ? (this.state = FULFILLED, 
                    this.value = v, settled.call(this), v) : v;
                } catch (ex) {
                    return reject.call(this, ex);
                }
            }
            function reject(v) {
                return pending(this.state) ? (this.state = REJECTED, this.value = v, settled.call(this), 
                v) : v;
            }
            function settled() {
                var Q = this.thens, state = this.state, value, settle;
                Q.scheduled = false;
                and(rejected(state), emptyp(Q), errorp(value)) ? delay(throwE.bind(null, value)) : !pending(state) ? (value = this.value, 
                settle = funs[state], forEach(function(v) {
                    var promise = v[0], fn = v[state];
                    try {
                        lambdap(fn) ? (value = fn(value), and(!!promise, eq(promise, value)) ? throwE(E1) : (fn = thenable(value)) ? fn.call(value, resolve.bind(promise), reject.bind(promise)) : settle.call(promise, value)) : settle.call(promise, value);
                    } catch (ex) {
                        reject.call(promise, ex);
                    }
                }, Q), this.thens = []) : noop();
            }
            thi$.then = function(onFulfilled, onRejected) {
                var next = new Promise(noop), Q = this.thens;
                Q.push({
                    0: next,
                    1: onFulfilled,
                    2: onRejected
                });
                this.state && !Q.scheduled ? (Q.scheduled = true, delay(settled.bind(this))) : noop();
                return next;
            };
            thi$["catch"] = function(onRejected) {
                return this.then(null, onRejected);
            };
            thi$["finally"] = function(onFinally) {
                function _finally() {
                    delay(onFinally || noop, 1);
                }
                return this.then(_finally, _finally);
            };
            thi$.cancel = function() {
                this.timer = clearTimeout(this.timer);
                reject.call(this, EOF);
            };
            thi$.init = function(executor) {
                !lambdap(executor) ? throwE(TypeError("Promise resolver ", executor, " is not a function.")) : (this.state = PENDING, 
                this.value = undefined, this.timer = undefined, this.thens = [], this.thens.scheduled = false, 
                noop !== executor ? exec.call(this, executor) : noop());
            };
            function exec(executor) {
                try {
                    executor(resolve.bind(this), reject.bind(this));
                } catch (ex) {
                    reject.call(this, ex);
                }
            }
            this.init.apply(this, arguments);
        }
        function EventTarget() {
            var CLASS = EventTarget, thi$ = CLASS.prototype;
            if (intern(CLASS)) {
                this.init.apply(this, arguments);
                return;
            }
            intern(CLASS, "EventTarget");
            thi$.addEventListener = function(type, callback) {
                (this.listeners[type] = type in this.listeners ? this.listeners[type] : []).push(callback);
            };
            thi$.removeEventListener = function(type, callback) {
                var i, Q = type in this.listeners ? this.listeners[type] : null;
                Q && (i = Q.indexOf(callback)) !== -1 ? Q.splice(i, 1) : noop();
            };
            thi$.dispatchEvent = function(event, source) {
                var Q = event.type in this.listeners ? this.listeners[event.type] : null;
                Q ? (event.source = source, event.target = this, forEach(callback.bind(this, event), Q)) : noop();
                event.bubble ? noop() : noop();
                return !event.defaultPrevented;
            };
            function callback(e, fn) {
                try {
                    fn.call(e.target, e);
                } catch (ex) {
                    console.error(ex);
                }
            }
            thi$.postMessage = function(data, source) {
                return delay(this.dispatchEvent.bind(this, {
                    type: MESSAGE,
                    data: data
                }, source)) !== undefined;
            };
            thi$.init = function() {
                this.listeners = {};
                return this;
            };
            this.init.apply(this, arguments);
        }
        function Range(start, end, step) {
            var CLASS = Range, thi$ = CLASS.prototype;
            if (intern(CLASS)) {
                this.init.apply(this, arguments);
                return;
            }
            intern(CLASS, "Range");
            thi$["@get"] = function(obj, i) {
                return obj.get(i);
            };
            thi$.get = function get(i) {
                return i >= 0 && i < this.length ? this["@start"] + i * this["@step"] : undefined;
            };
            thi$.init = function(start, end, step) {
                start = start || 0;
                end = end || 0;
                step = step || 1;
                start < end ? (step = Math.abs(step), this.length = (end - start) / step) : (step = 0 - Math.abs(step), 
                this.length = Math.abs((start - end) / step), start += step);
                this["@start"] = start;
                this["@step"] = step;
            };
            this.init.apply(this, arguments);
        }
        var Fp = Function.prototype;
        var __ = Object.freeze(Object.create(null, {
            "@@jsvm-intern": {
                value: "placeholder"
            }
        }));
        define("__", __);
        define("startup", new Date().getTime());
        define("elapse", elapse);
        function elapse() {
            return new Date().getTime() - F.startup;
        }
        define("defprop", _curry(3, [], defprop));
        function defprop(obj, prop, value, desc) {
            return value !== undefined ? (desc = desc || {}, desc.value = value, Object.defineProperty(obj, prop, desc)) : obj[prop];
        }
        function define(prop, value, desc) {
            return defprop(F, prop, value, desc || {
                enumerable: true
            });
        }
        define("Ext", Object.create(null), {});
        define("defineExt", _curry(3, [ F.Ext ], defprop));
        var intern = _curry(2, [ __, "@@jsvm-intern" ], defprop);
        define("intern", intern);
        define("slice", slice);
        function slice(array, start, end) {
            var i = -1, len = array.length, ret = [];
            start = start || 0;
            end = end || len;
            start = start > len ? len : start;
            end = end < 0 ? len + end - 1 : Math.min(len, end);
            len = end - start;
            while (++i < len) {
                ret[i] = array[start + i];
            }
            return stringp(array) ? ret.join("") : ret;
        }
        define("concat", concat);
        function concat(a, b) {
            var len = a.length, ret = [], v, i = 0, j = 0, k = 0;
            while (i < len) {
                v = a[i++];
                ret[j++] = v !== __ ? v : b[k++] || v;
            }
            if (k < b.length) {
                j = ret.length, len = b.length;
                while (k < len) {
                    ret[j++] = b[k++];
                }
            }
            return stringp(a) ? ret.join("") : ret;
        }
        var console = self.console = self.console || function() {
            var con = Object.create(null);
            [ "assert", "clear", "count", "debug", "dir", "dirxml", "error", "exception", "group", "groupCollapsed", "groupEnd", "info", "log", "memoryProfile", "memoryProfileEnd", "profile", "profileEnd", "table", "time", "timeEnd", "timeStamp", "trace", "warn" ].forEach(function(v) {
                defprop(con, v, noop);
            });
            return con;
        }();
        define("identity", curry(identity));
        function identity(x) {
            return x;
        }
        define("noop", noop);
        function noop() {}
        define("throwE", curry(throwE));
        function throwE(x) {
            throw x;
        }
        define("EOF", EOF);
        function EOF(x) {
            EOF.data = x;
            return EOF;
        }
        define("get", curry(get));
        function get(obj, k) {
            return obj[k];
        }
        define("set", curry(set));
        function set(obj, k, v) {
            return obj[k] = v, obj;
        }
        define("force", force);
        function force(v) {
            return lambdap(v) ? v() : v;
        }
        define("curry", curry);
        function curry(fn) {
            return _curry(fn.length, slice(arguments, 1), fn);
        }
        define("_curry", _curry);
        function _curry(n, args, fn, thi$) {
            return function curried(xs) {
                thi$ = thi$ || this;
                xs = _concat(args, slice(arguments));
                return xs.indexOf(__) === -1 && xs.length >= n ? fn.apply(thi$, xs) : _curry(n - xs.length, xs, fn, thi$);
            };
        }
        function _concat(a, b) {
            return emptyp(a) ? b : emptyp(b) ? a : concat(a, b);
        }
        define("lazy", lazy);
        function lazy(fn) {
            return _curry(0, slice(arguments, 1), fn);
        }
        define("memo", memo);
        function memo(fn) {
            var args = slice(arguments, 1), run = false, value;
            return function() {
                return !run ? (run = true, value = fn.apply(this, args)) : value;
            };
        }
        define("unary", unary);
        function unary(fn, n) {
            n = n || 0;
            return function() {
                return fn.call(this, arguments[n]);
            };
        }
        var reduceL = Fp.call.bind([].reduce), reduceR = Fp.call.bind([].reduceRight);
        define("compose", compose);
        function compose(funs) {
            funs = slice(arguments);
            return function() {
                return _exec.call(this, reduceR, funs, slice(arguments));
            };
        }
        define("pipe", pipe);
        function pipe(funs) {
            funs = slice(arguments);
            return function() {
                return _exec.call(this, reduceL, funs, slice(arguments));
            };
        }
        function _exec(arrayReduce, funs, args) {
            var thi$ = this;
            return arrayReduce(funs, function(acc, fn) {
                return [ fn.apply(thi$, acc) ];
            }, args)[0];
        }
        define("trace", curry(trace));
        function trace(tag, x) {
            debugger;
            return x;
        }
        define("tco", tco);
        function tco(fn) {
            var Q = [], active = false, value;
            return function tcorun() {
                Q.push(slice(arguments));
                if (active) {
                    return value;
                }
                active = true;
                while (Q.length) {
                    try {
                        value = fn.apply(this, Q.shift());
                    } catch (ex) {
                        if (eofp(ex)) {
                            value = ex.data;
                            break;
                        } else {
                            console.error(ex.stack);
                            throw ex;
                        }
                    }
                }
                active = false;
                return value;
            };
        }
        var otoa = Fp.call.bind({}.toString), ntoa = Fp.call.bind(0..toString);
        define("nto10", ntoa);
        define("nto16", _curry(2, [ __, 16 ], ntoa));
        define("nto36", _curry(2, [ __, 36 ], ntoa));
        define("typeOf", typeOf);
        function typeOf(x) {
            return "".slice.call(otoa(x), 8, -1);
        }
        var nil = new Pair();
        setcar(nil, nil);
        setcdr(nil, nil);
        nil = Object.freeze(intern(nil, "nil"));
        define("nil", nil);
        define("eq", curry(eq));
        function eq(x, y) {
            return x === y;
        }
        define("numberp", numberp);
        function numberp(x) {
            return typeof x === "number" && isFinite(x);
        }
        define("stringp", stringp);
        function stringp(x) {
            return typeof x === "string";
        }
        define("lambdap", lambdap);
        function lambdap(x) {
            return typeof x === "function";
        }
        define("objectp", objectp);
        function objectp(x) {
            return typeOf(x) === "Object" && x.self !== x;
        }
        define("arrayp", arrayp);
        function arrayp(x) {
            return x instanceof Array;
        }
        define("errorp", errorp);
        function errorp(x) {
            return x instanceof Error;
        }
        define("nilp", nilp);
        function nilp(x) {
            return x === nil;
        }
        define("eofp", eofp);
        function eofp(x) {
            return x === EOF;
        }
        define("signalp", signalp);
        function signalp(x) {
            return x instanceof Signal;
        }
        define("listp", listp);
        function listp(x) {
            return x instanceof Pair;
        }
        define("sequencp", sequencp);
        function sequencp(x) {
            return stringp(x) || arrayp(x) || objectp(x) && numberp(x.length) && lambdap(x["@get"]);
        }
        define("emptyp", emptyp);
        function emptyp(x) {
            return sequencp(x) && x.length === 0;
        }
        define("cons", cons);
        function cons(x, y, seq) {
            return !seq ? new Pair(x, y) : (setcar(seq, x), setcdr(seq, y));
        }
        define("car", car);
        function car(seq) {
            return seq[0];
        }
        define("setcar", setcar);
        function setcar(seq, x) {
            return seq[0] = x, seq;
        }
        define("cdr", cdr);
        function cdr(seq) {
            return force(seq[1]);
        }
        define("setcdr", setcdr);
        function setcdr(seq, x) {
            return seq[1] = x, seq;
        }
        define("map", curry(map));
        function map(fn, seq) {
            return sequencp(seq) ? _xmap(fn, [], seq) : listp(seq) ? _map(fn, seq) : signalp(seq) ? seq.map(fn) : objectp(seq) ? _xmap(fn, {}, seq) : throwE(TypeError("map on " + typeOf(seq) + " is unsupported."));
        }
        function _map(fn, seq) {
            var k, v;
            return nilp(seq) ? nil : (v = car(seq), k = v[0], v = v[1], cons([ k, fn(v, k, seq.src) ], lazy(_map, fn, cdr(seq), seq)));
        }
        function _xmap(fn, init, seq) {
            var ret = reduce(function(acc, v, k, seq) {
                return set(acc, k, fn(v, k, seq));
            }, init, seq);
            return stringp(seq) ? ret.join("") : ret;
        }
        define("filter", curry(filter));
        function filter(fn, seq) {
            return sequencp(seq) ? _xfilter(fn, [], seq) : listp(seq) ? _filter(fn, seq) : signalp(seq) ? seq.filter(fn) : objectp(seq) ? _xfilter(fn, {}, seq) : throwE(TypeError("filter on " + typeOf(seq) + " is unsupported."));
        }
        function _filter(fn, seq) {
            var k, v, filter0 = tco(function(fn, seq) {
                return nilp(seq) ? nil : (v = car(seq), k = v[0], v = v[1], fn(v, k, seq.src) ? cons([ k, v ], lazy(_filter, fn, cdr(seq)), seq) : filter0(fn, cdr(seq)));
            });
            return filter0(fn, seq);
        }
        function _xfilter(fn, init, seq) {
            var sp = sequencp(seq), ret = reduce(function(acc, v, k, seq) {
                return fn(v, k, seq) ? set(acc, sp ? acc.length : k, v) : acc;
            }, init, seq);
            return stringp(seq) ? ret.join("") : ret;
        }
        define("reduce", curry(reduce));
        function reduce(fn, acc, seq) {
            return sequencp(seq) ? _seqreduce(fn, acc, seq) : listp(seq) ? _reduce(fn, acc, seq) : signalp(seq) ? seq.reduce(fn, acc) : objectp(seq) ? _objreduce(fn, acc, seq) : throwE(TypeError("reduce on " + typeOf(seq) + " is unsupported."));
        }
        function _reduce(fn, acc, seq) {
            var v, reduce0 = tco(function(fn, acc, seq) {
                return nilp(seq) ? acc : (v = car(seq), reduce0(fn, fn(acc, v[1], v[0], seq.src), cdr(seq)));
            });
            return reduce0(fn, acc, seq);
        }
        function _seqreduce(fn, acc, seq) {
            var i = -1, _get = seq["@get"] || get;
            while (++i < seq.length) {
                try {
                    acc = fn(acc, _get(seq, i), i, seq);
                } catch (ex) {
                    if (eofp(ex)) {
                        acc = ex.data;
                        break;
                    } else {
                        console.error(ex.stack);
                        throw ex;
                    }
                }
            }
            return acc;
        }
        function _objreduce(fn, acc, obj) {
            return _seqreduce(function(x, k) {
                return acc = fn(acc, get(obj, k), k, obj);
            }, acc, keysOf(obj));
        }
        define("forEach", forEach);
        function forEach(fn, seq) {
            reduce(function(a, v, k) {
                fn(v, k);
            }, null, seq);
        }
        define("some", some);
        function some(fn, seq) {
            return reduce(function(acc, v, i) {
                acc = acc || fn(v, i);
                return acc ? throwE(EOF(acc)) : acc;
            }, false, seq);
        }
        define("every", every);
        function every(fn, seq) {
            return reduce(function(acc, v, i) {
                acc = acc && fn(v, i);
                return !acc ? throwE(EOF(acc)) : acc;
            }, true, seq);
        }
        define("group", curry(group));
        function group(pred, seq) {
            return signalp(seq) ? seq.group(pred) : listp(seq) ? _group(pred, seq) : throwE(TypeError("group on " + typeOf(seq) + " is unsupported."));
        }
        function _group(pred, seq) {
            var pair = new Pair(), val = [ null, null ], i = 0;
            return function group0(seq) {
                return nilp(seq) ? nil : (val[0] = i++, val[1] = tco(function next(buf) {
                    var v = car(seq)[1];
                    return nilp(seq) || !pred(buf, v) ? throwE(EOF(buf)) : (buf.push(v), seq = cdr(seq), 
                    next(buf));
                })([]), cons(val, lazy(group0, seq), pair));
            }(seq);
        }
        define("buffer", curry(buffer));
        function buffer(num, seq) {
            num = numberp(num) ? num || 1 : 1;
            return group(function(a, v) {
                return a.length < num;
            }, seq);
        }
        define("flat", curry(flat));
        function flat(fn, seq) {
            return signalp(seq) ? seq.flat(fn) : listp(seq) ? _flat(fn, seq) : sequencp(seq) ? _flat(fn, asList(seq)) : throwE(TypeError("flat on " + typeOf(seq) + " is unsupported."));
        }
        function _flat(fn, seq) {
            var pair = new Pair(), val = [ null, null ], i = 0, v;
            fn = fn || identity;
            return function flat0(fn, seq) {
                return nilp(seq) ? nil : (v = car(seq)[1], arrayp(v) ? function next(seq1) {
                    v = car(seq1);
                    return v.length === 0 ? nilp(cdr(seq1)) ? flat0(fn, cdr(seq)) : next(cdr(seq1)) : (v = v.shift(), 
                    arrayp(v) ? next(cons(v, seq1)) : (val[0] = i++, val[1] = fn(v), cons(val, lazy(next, seq1), pair)));
                }(cons(v, nil)) : (val[0] = i++, val[1] = fn(v), cons(val, lazy(flat0, fn, cdr(seq)), pair)));
            }(fn, seq);
        }
        define("indexOf", _curry(2, [], indexOf));
        function indexOf(seq, e, comp) {
            return stringp(seq) ? seq.indexOf(e) : arrayp(seq) ? !comp ? seq.indexOf(e) : reduce(function(acc, v, i) {
                return comp(v, e) ? throwE(EOF(i)) : acc;
            }, -1, seq) : throwE(TypeError("indexOf on " + typeOf(seq) + " is unsupported."));
        }
        define("toArray", toArray);
        function toArray(seq) {
            return !arrayp(seq) ? reduce(function(acc, v, k) {
                return set(acc, acc.length, v);
            }, [], seq) : seq;
        }
        define("toObject", toObject);
        function toObject(seq) {
            return reduce(function(acc, v, k) {
                return set(acc, k, v);
            }, {}, seq);
        }
        define("asList", asList);
        function asList(x) {
            var seq = set(new Pair(), "src", x);
            return sequencp(x) || objectp(x) ? function next(itr) {
                var p = itr.next();
                return p.done ? nil : cons(p.value, lazy(next, itr), seq);
            }(iterator(x)) : throwE(TypeError(typeOf(x) + " can not convert to list."));
        }
        define("range", _curry(2, [], range));
        function range(start, end, step) {
            return new Range(start, end, step);
        }
        var range1 = curry(range, 0, __, 1);
        define("range1", range1);
        function keysOf(x) {
            return objectp(x) ? Object.getOwnPropertyNames(x).filter({}.propertyIsEnumerable.bind(x)) : [];
        }
        define("iterator", iterator);
        function iterator(obj) {
            return lambdap(obj.entries) ? obj.entries() : iterable(obj);
        }
        function iterable(x) {
            var val = [ -1, undefined ], i = 0, vget = get, kget, keys;
            numberp(x.length) ? (keys = x, kget = identity) : (keys = keysOf(x), kget = F.get(keys));
            val.value = val;
            val.done = true;
            return {
                next: function() {
                    val[0] = kget(i++);
                    val[1] = vget(x, val[0]);
                    val.done = !(i <= keys.length);
                    return val;
                }
            };
        }
        define("not", not);
        function not(e) {
            return !force(e);
        }
        define("and", and);
        function and() {
            return reduce(function(acc, e) {
                var tmp = acc && !!force(e);
                return tmp ? tmp : throwE(EOF(tmp));
            }, true, slice(arguments));
        }
        define("or", or);
        function or() {
            return reduce(function(acc, e) {
                var tmp = acc || !!force(e);
                return tmp ? throwE(EOF(tmp)) : tmp;
            }, false, slice(arguments));
        }
        define("decorate", decorate, {});
        function decorate(clazz, obj) {
            identity(!intern(clazz) ? new clazz() : noop);
            return reduce(function(acc, v, k) {
                return set(acc, k, v);
            }, obj, clazz.prototype);
        }
        define("extend", extend, {});
        function extend(superC, clazz) {
            clazz.prototype = new superC();
            clazz.prototype.constructor = superC;
            return clazz;
        }
        define("override", override, {});
        function override(superF, fn) {
            return function overrided() {
                return fn.apply(this, slice(arguments).concat(superF));
            };
        }
        define("superF", function(args) {
            return args[args.length - 1];
        });
        define("asEventTarget", asEventTarget);
        function asEventTarget(obj) {
            return decorate(EventTarget, obj).init();
        }
        define("EventTarget", EventTarget, {});
        define("delay", _curry(1, [], delay));
        function delay(fn, timeout) {
            return setTimeout(fn, timeout || 1);
        }
        define("delayEx", _curry(1, [], delayEx));
        function delayEx(fn, timeout) {
            var prm, timer;
            prm = promise(function(resolve, reject) {
                timer = delay(function() {
                    try {
                        resolve(fn());
                    } catch (ex) {
                        reject(ex);
                    }
                }, timeout);
            });
            prm.timer = timer;
            return prm;
        }
        define("signal", signal);
        function signal(executor) {
            return new Signal(executor || noop);
        }
        define("timer", timer);
        function timer(interval, name) {
            return new Signal(function(trigger) {
                delay(function _timer() {
                    trigger({
                        type: name || "timer",
                        timeStamp: elapse()
                    });
                    delay(_timer, interval);
                }, interval);
            });
        }
        define("promise", promise);
        function promise(executor) {
            return new Promise(executor || noop);
        }
        define("resolve", resolve);
        function resolve(value) {
            var then;
            return value instanceof Promise ? value : (then = thenable(value)) ? then.call(value) : promise(function(resolve) {
                resolve(value);
            });
        }
        define("reject", reject);
        function reject(ex) {
            return promise(function(resolve, reject) {
                reject(ex);
            });
        }
        define("all", all);
        function all(promises) {
            promises = arrayp(promises) ? promises : slice(arguments);
            return promise(function(resolve, reject) {
                var remaining = promises.length, then;
                remaining === 0 ? resolve(promises) : forEach(function test(prm, i) {
                    (then = thenable(prm)) ? then.call(prm, curry(test, __, i), reject) : (promises[i] = prm, 
                    --remaining === 0 ? resolve(promises) : noop());
                }, promises);
            });
        }
        define("race", race);
        function race(promises) {
            promises = arrayp(promises) ? promises : slice(arguments);
            return promise(function(resolve, reject) {
                var remaining = promises.length, then;
                remaining === 0 ? resolve() : forEach(function test(prm, i) {
                    (then = thenable(prm)) ? then.call(prm, curry(test, __, i), reject) : resolve(prm);
                }, promises);
            });
        }
        define("thenable", thenable);
        function thenable(obj) {
            var fn = obj ? get(obj, "then") : null;
            return lambdap(fn) ? fn : undefined;
        }
        define("attachEvent", curry(attachEvent));
        function attachEvent(type, obj, fn) {
            obj.addEventListener(type, fn);
            return fn;
        }
        define("detachEvent", curry(detachEvent));
        function detachEvent(type, obj, fn) {
            obj.removeEventListener(type, fn);
        }
        function _convert(e) {
            return e;
        }
        var listeners = {};
        define("listeners", listeners, {});
        define("subscribe", curry(subscribe));
        function subscribe(type, listener, handler) {
            var Q = listeners[type] = listeners[type] || [], idx = indexOf(Q, listener, _comp), sig = idx !== -1 ? Q[idx][1] : (sig = signal(), 
            Q.push([ listener, sig ]), set(sig, "src", {
                obj: listener,
                type: type,
                fn: attachEvent(type, listener, function(e) {
                    sig.set(_convert(e));
                })
            }));
            return sig.attach(handler);
        }
        define("unsubscribe", curry(unsubscribe));
        function unsubscribe(type, listener, handler) {
            var Q = type in listeners ? listeners[type] : [], idx = indexOf(Q, listener, _comp), sig = idx !== -1 ? Q[idx][1] : null;
            return sig ? (sig.detach(handler), sig.procs.length === 0 ? (sig.cancel(), Q.splice(idx, 1), 
            true) : true) : false;
        }
        function _comp(v, e) {
            return eq(v[0], e);
        }
        define("message", curry(message));
        function message(msg, targets) {
            forEach(function(target) {
                objectp(target) ? target.postMessage(msg, this) : crossmsg(msg, target);
            }.bind(this), slice(arguments, 1));
        }
        function crossmsg(msg, dev) {
            msg = stringp(msg) ? msg : JSON.stringify(msg);
            typeOf(dev).indexOf("Worker") !== -1 ? dev.postMessage(msg) : dev.postMessage(msg, "*");
        }
        define("post", curry(post));
        function post(event, targets) {
            targets = getTargets(event.type, slice(arguments, 1));
            delay(fire.bind(this, event, targets));
        }
        define("fire", curry(fire));
        function fire(event, targets) {
            targets = getTargets(event.type, slice(arguments, 1));
            forEach(function(target) {
                target.dispatchEvent(event, this);
            }.bind(this), targets);
        }
        function getTargets(type, targets) {
            return targets.length > 0 ? arrayp(targets[0]) ? targets[0] : targets : type in listeners ? map(car, listeners[type]) : [];
        }
        function Request(url, options) {
            options = options || {
                body: {}
            };
            if (options.body) {
                options.body["@@jsvm-requested-with"] = "XMLHttpRequest";
            }
            var method = toUpperCase(options.method || "GET"), query = reduce(_concatKV, [], options.body || {}).join("&");
            this.method = method;
            this.timeout = options.timeout || 0;
            this.credentials = options.credentials || "include";
            this.headers = options.headers || {};
            method === "GET" ? (this.body = null, this.url = [ url, url.indexOf("?") === -1 ? "?" : "&", query ].join("")) : method === "POST" ? (this.headers["Content-Type"] = "application/x-www-form-urlencoded", 
            this.body = query, this.url = url) : noop();
        }
        function _concatKV(acc, v, k) {
            acc.push([ k, "=", stringp(v) ? v : JSON.stringify(v) ].join(""));
            return acc;
        }
        function Response(body, options) {
            this.status = options.status || 200;
            this.statusText = options.statusText;
            this.headers = parseHeaders(options.headers || "");
            this.url = options.url || this.headers["X-Request-URL"];
            this.body = body;
        }
        var HTTPERROR = TypeError("Network request failed"), HTTPTIMEOUT = TypeError("Network request timeout");
        define("fetch", fetch);
        function fetch(url, options) {
            options = options || {};
            var xhr = new XMLHttpRequest(), request = new Request(url, options);
            return options.async === false ? _response(_request(xhr, request, false)) : promise(function(resolve, reject) {
                xhr.onload = function() {
                    resolve(_response(xhr));
                };
                xhr.onerror = function() {
                    reject(HTTPERROR);
                };
                xhr.ontimeout = function() {
                    reject(HTTPTIMEOUT);
                };
                _request(xhr, request, true);
            });
        }
        function _request(xhr, request, async) {
            xhr.open(request.method, request.url, async);
            async ? (xhr.timeout = request.timeout, xhr.withCredentials = request.credentials === "include" ? true : request.credentials === "omit" ? false : undefined) : noop();
            forEach(function(v, k) {
                xhr.setRequestHeader(k, v);
            }, request.headers);
            xhr.send(request.body);
            return xhr;
        }
        function _response(xhr) {
            var options = {
                status: xhr.status,
                statusText: xhr.statusText,
                headers: xhr.getAllResponseHeaders(),
                url: xhr.responseURL || ""
            }, body = "response" in xhr ? xhr.response : xhr.responseText;
            return new Response(body, options);
        }
        function parseHeaders(raw) {
            var tmp = raw.replace(/\r?\n[\t ]+/g, " ");
            return reduce(function(acc, line) {
                var parts = line.split(":"), key = parts.shift().trim();
                return key ? set(acc, key, parts.join(":").trim()) : acc;
            }, {}, tmp.split(/\r?\n/));
        }
        var codePattern = [ null, "return (function(){", null, "})();" ];
        function mkvar(name, obj) {
            return reduce(function(acc, v, k) {
                return set(acc, acc.length, [ k, "=", name, ".", k ].join(""));
            }, [], obj);
        }
        var vars = memo(function() {
            return concat(mkvar("F", F), mkvar("F.Ext", F.Ext)).join(",");
        });
        function enclose(pattern, text) {
            pattern[0] = [ "var ", vars(), ";\n" ].join("");
            pattern[2] = text;
            text = pattern.join("");
            pattern[0] = null;
            pattern[2] = null;
            return text;
        }
        define("eval", evalCode, {});
        function evalCode(text) {
            return Function("F", enclose(codePattern, text))(F);
        }
        define("apply", apply, {});
        function apply(fn, thi$, args) {
            fn = evalCode([ "return { lambda:", fn, "}" ].join("")).lambda;
            return fn.apply(thi$, slice(arguments, 2));
        }
        var workerData = [ "(function(self){\n", "var j$vmEnv = (", null, ");\n", null, ";\n", "j$vmF.call(this, Object.create(null));\n", "}).call(self, self)" ], MESSAGE = "message", ERROR = "error", FINISHED = "@@jsvm-finished", PENDING = "@@jsvm-pending", READY = "@@jsvm-ready", finished = {
            type: FINISHED,
            data: undefined
        }, RUNNABLE = "@@jsvm-execute";
        function realWorker() {
            if (!!self.document) {
                return;
            }
            function onmessage(e) {
                e = JSON.parse(e.data);
                e.type === RUNNABLE ? onexecute.call(self, e) : fire.call(self, e);
            }
            function onexecute(e) {
                var R = asEventTarget(evalCode(e.data)), task = e.task, result;
                R.task = task;
                R.finished = _curry(2, [ FINISHED ], wrapResult);
                R.pending = _curry(2, [ PENDING ], wrapResult);
                R.error = _curry(2, [ ERROR ], wrapResult);
                R.returnValue = returnValue.bind(self);
                try {
                    result = R.lambda.call(R) || finished;
                } catch (ex) {
                    result = wrapResult(ERROR, task, ex.stack);
                }
                returnValue.call(self, result);
            }
            subscribe(MESSAGE, self, onmessage);
            message({
                type: READY,
                timeStamp: elapse()
            }, self);
        }
        var FakeWorker = extend(EventTarget, function() {
            this.fake = true;
            function onmessage(e) {
                e.source === this ? noop() : (e = e.data, e.type === RUNNABLE ? onexecute.call(this, e) : fire.call(this, e));
            }
            function onexecute(e) {
                var R = asEventTarget(e.data), task = e.task, result;
                R.task = task;
                R.finished = _curry(2, [ FINISHED ], wrapResult);
                R.pending = _curry(2, [ PENDING ], wrapResult);
                R.error = _curry(2, [ ERROR ], wrapResult);
                R.returnValue = returnValue.bind(this);
                try {
                    result = R.lambda.call(R) || finished;
                } catch (ex) {
                    result = wrapResult(ERROR, task, ex);
                }
                returnValue.call(this, result);
            }
            var _onmessage = onmessage.bind(this);
            this.terminate = function() {
                unsubscribe(MESSAGE, this, _onmessage);
            };
            this.init();
            subscribe(MESSAGE, this, _onmessage);
        });
        function wrapResult(type, task, value) {
            return {
                type: type,
                task: task,
                data: value
            };
        }
        function returnValue(result) {
            message.call(this, result, this);
        }
        var _env_ = {};
        define("initEnv", initEnv);
        function initEnv(env) {
            return reduce(function(acc, v, k) {
                return set(acc, k, v);
            }, _env_, env || {});
        }
        define("getEnv", getEnv);
        function getEnv() {
            try {
                return j$vmEnv || _env_;
            } catch (x) {
                return _env_;
            }
        }
        function Thread(env) {
            var CLASS = Thread, thi$ = CLASS.prototype;
            if (intern(CLASS)) {
                this.init.apply(this, arguments);
                return;
            }
            intern(CLASS, "Thread");
            thi$.stop = function() {
                this.worker.terminate();
                this.tasks = {};
            };
            thi$.submit = function(task) {
                var taskid;
                return objectp(task) ? (taskid = uuid(), this.worker.ready ? emit.call(this, taskid, task) : wait.call(this, taskid, task), 
                this.tasks[taskid] = new Signal(noop)) : null;
            };
            function wait(taskid, task) {
                this.Q.push([ taskid, task ]);
            }
            function emit(taskid, task) {
                message.call(this, {
                    type: task.type,
                    task: taskid,
                    data: taskdata(task, this.worker)
                }, this.worker);
            }
            function taskdata(task, worker) {
                return worker.fake || task.type !== RUNNABLE ? task.data : runData(task.data);
            }
            thi$.run = function(runnable) {
                return this.submit(lambdap(runnable) ? {
                    type: RUNNABLE,
                    data: {
                        context: {},
                        lambda: runnable
                    }
                } : {
                    type: RUNNABLE,
                    data: runnable
                });
            };
            function runData(data) {
                return [ "return {", "context:", JSON.stringify(data.context), ",", "lambda:", data.lambda, "}" ].join("");
            }
            function onmessage(e, msg) {
                e.source !== this ? (msg = stringp(e.data) ? JSON.parse(e.data) : e.data, msg.type === READY ? onready.call(this, msg) : msg.task ? onresult.call(this, msg) : console.info(msg)) : noop();
            }
            function onready(e) {
                var item, Q = this.Q;
                this.worker.ready = true;
                while (item = Q.shift()) {
                    emit.call(this, item[0], item[1]);
                }
            }
            function onresult(res) {
                var tasks = this.tasks, sig = tasks[res.task];
                sig ? (res.type === ERROR ? onerror(res) : noop(), sig.set(res.data), res.type === FINISHED ? delete tasks[res.task] : noop()) : noop();
            }
            function onerror(e) {
                console.error(e.data);
            }
            var getWorkerURL = memo(function() {
                workerData[2] = JSON.stringify(_env_);
                workerData[4] = j$vmF;
                var tmp = workerData.join("");
                workerData[2] = null;
                workerData[4] = null;
                return URL.createObjectURL(new Blob([ tmp ], {
                    type: "text/javascript"
                }));
            });
            thi$.init = function(env) {
                initEnv(env || {});
                this.tasks = Object.create(null);
                try {
                    this.worker = new self.Worker(getWorkerURL());
                    this.worker.ready = false;
                    this.Q = [];
                } catch (ex) {
                    console.warn(ex.message);
                    this.worker = new FakeWorker();
                    this.worker.ready = true;
                }
                subscribe(MESSAGE, this.worker, onmessage.bind(this));
                subscribe(ERROR, this.worker, onerror.bind(this));
                return this;
            };
            this.init.apply(this, arguments);
        }
        define("thread", thread);
        function thread(env) {
            return new Thread(env);
        }
        define("deepClone", curry(copy, __, null, true, false));
        define("copy", _curry(2, [], copy));
        function copy(src, des, deep, merge) {
            var cp = _copy.bind(null, deep, merge);
            return arrayp(src) ? reduce(cp, merge ? des || [] : [], src) : objectp(src) ? reduce(cp, merge ? des || {} : {}, src) : src;
        }
        function _copy(deep, merge, acc, v, k) {
            return set(acc, k, !deep ? v : copy(v, merge ? acc[k] : null, true, merge));
        }
        var random = Math.random = override(Math.random, function(n) {
            return numberp(n) ? Math.floor(F.superF(arguments)() * n) : F.superF(arguments)();
        });
        var MAX_SAFE_INTEGER = 9007199254740991, Nd = 1;
        define("rand32", rand32);
        function rand32() {
            return (Math.random() * MAX_SAFE_INTEGER ^ new Date().getTime() + Nd++ ^ -1 | 1 << 24) >>> 0;
        }
        define("hash", hash);
        function hash(string) {
            return (reduce(function(acc, c) {
                acc = 31 * acc + charCodeAt(c);
                return acc & acc;
            }, 0, String(string || "")) ^ -1 | 1 << 24) >>> 0;
        }
        var T = toArray(map(function(v, i) {
            return reduce(function(c, x) {
                return c = (c & 1 ? 3988292384 : 0) ^ c >>> 1;
            }, v, range1(8));
        }, range1(256)));
        var _crc = curry(function(c, crc) {
            return crc >>> 8 ^ T[(crc ^ c) & 255];
        });
        define("crc32", crc32);
        function crc32(str) {
            return (reduce(function(crc, c) {
                c = charCodeAt(c);
                return c <= 127 ? _crc(c, crc) : c >= 128 && c <= 32767 ? pipe(_crc(c >> 6 & 31 | 192), _crc(c & 63 | 128))(crc) : pipe(_crc(c >> 12 | 224), _crc(c >> 6 & 63 | 128), _crc(c & 63 | 128))(crc);
            }, 0 ^ -1, String(str || "")) ^ -1 | 1 << 24) >>> 0;
        }
        define("uuid", uuid);
        function uuid(s) {
            return numberp(s) ? _uuid(s) : stringp(s) ? _uuid(crc32(s)) : _uuid(rand32());
        }
        function _uuid(num) {
            return "_" + [ "00000", F.nto36(num) ].join("").slice(-6);
        }
        define("atoi", _curry(1, [], atoi));
        function atoi(str, radix) {
            str = String(str);
            var n = str.charAt(0);
            return n === "_" ? parseInt(str.slice(1), 36) : n === "s" ? parseInt(str.slice(1), 16) : (n = parseInt(str, radix), 
            isNaN(n) ? crc32(str) : n);
        }
        var toUpperCase = Fp.call.bind("".toUpperCase);
        define("toUpperCase", toUpperCase);
        var toLowerCase = Fp.call.bind("".toLowerCase);
        define("toLowerCase", toLowerCase);
        var charCodeAt = Fp.call.bind("".charCodeAt);
        define("charCodeAt", charCodeAt);
        var charAt = Fp.call.bind("".charAt);
        define("charAt", charAt);
        var fromCharCode = String.fromCharCode;
        define("fromCharCode", fromCharCode);
        function _mkCharAt(acc, v, i) {
            return set(acc, i, v);
        }
        function _mkIndex(acc, v, i) {
            return set(acc, charCodeAt(v), i);
        }
        var _safeB64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef" + "ghijklmnopqrstuvwxyz0123456789@*-";
        var SAFEB64 = {
            charAt: reduce(_mkCharAt, [], _safeB64),
            indexOf: reduce(_mkIndex, [], _safeB64)
        };
        define("SAFEB64", SAFEB64);
        var _commB64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef" + "ghijklmnopqrstuvwxyz0123456789+/=";
        var COMMB64 = {
            charAt: reduce(_mkCharAt, [], _commB64),
            indexOf: reduce(_mkIndex, [], _commB64)
        };
        define("COMMB64", COMMB64);
        define("Base64Encode", _curry(1, [], Base64Encode));
        function Base64Encode(s, table) {
            table = table || SAFEB64;
            var i = 0, j = 0, tmp, utf8 = reduce(function(acc, c) {
                c = charCodeAt(c);
                c <= 127 ? acc[i++] = c : c >= 128 && c <= 2047 ? (acc[i++] = c >> 6 & 31 | 192, 
                acc[i++] = c & 63 | 128) : (acc[i++] = c >> 12 | 224, acc[i++] = c >> 6 & 63 | 128, 
                acc[i++] = c & 63 | 128);
                return acc;
            }, [], stringp(s) ? s : String(s));
            i = utf8.length % 3;
            if (i > 0) {
                i = 3 - i;
                while (i--) {
                    utf8.push(null);
                }
            }
            i = 0;
            j = 0;
            return reduce(function(acc, b) {
                j === 0 ? (acc[i++] = table.charAt[(b & 252) >> 2], tmp = (b & 3) << 4, j++) : j === 1 ? b !== null ? (tmp |= (b & 240) >> 4, 
                acc[i++] = table.charAt[tmp], tmp = (b & 15) << 2, j++) : (acc[i++] = table.charAt[tmp], 
                acc[i++] = table.charAt[64], acc[i++] = table.charAt[64], throwE(EOF(acc))) : j === 2 ? b !== null ? (tmp |= (b & 192) >> 6, 
                acc[i++] = table.charAt[tmp], acc[i++] = table.charAt[b & 63], j = 0) : (acc[i++] = table.charAt[tmp], 
                acc[i++] = table.charAt[64], throwE(EOF(acc))) : noop();
                return acc;
            }, [], utf8).join("");
        }
        define("Base64Decode", _curry(1, [], Base64Decode));
        function Base64Decode(s, table) {
            table = table || SAFEB64;
            var i = 0, j, b, tmp, len, utf8 = reduce(function(acc, c) {
                c = table.indexOf[charCodeAt(c)];
                i === 0 ? (tmp = c << 18, i++) : i === 1 ? (tmp |= c << 12, i++) : i === 2 ? (c < 64 ? tmp |= c << 6 : noop(), 
                i++) : i === 3 ? (c < 64 ? tmp |= c : noop(), _store(acc, tmp), i = 0) : noop();
                return acc;
            }, [], stringp(s) ? s : String(s));
            i = 0, j = 0, len = utf8.length;
            while (i < len) {
                b = utf8[i++];
                (b & 224) == 224 ? (tmp = (b & 15) << 12, b = utf8[i++], tmp |= (b & 63) << 6, b = utf8[i++], 
                tmp |= b & 63) : (b & 192) == 192 ? (tmp = (b & 31) << 6, b = utf8[i++], tmp |= b & 63) : tmp = b;
                utf8[j++] = fromCharCode(tmp);
            }
            utf8.splice(j);
            return utf8.join("");
        }
        function _store(array, b) {
            var len = array.length, v;
            v = b >> 16 & 255;
            array[len] = v;
            v = b >> 8 & 255;
            v !== 0 ? (array[len + 1] = v, v = b & 255, v !== 0 ? array[len + 2] = v : noop()) : noop();
        }
        defprop(this, "F", Object.freeze(intern(F, "F")), {});
        realWorker.call(this);
    }
    j$vmF.call(this, Object.create(null));
}).call(self || this, self || this);

J$VM = new function() {
    this.__product__ = "J$VM";
    this.__version__ = "0.9.";
    this.env = {
        j$vm_log: false,
        j$vm_timeslice: 20,
        j$vm_threshold: 15,
        j$vm_longpress: 90
    };
    var __init__ = [];
    var slice = Array.prototype.slice;
    js = {
        lang: {}
    };
    this.boot = function() {
        __init__.forEach(function(fn) {
            fn.call();
        });
    };
    (function() {
        var SANDBOX = {
            __sandbox__: true
        };
        this.$extend = function(superC) {
            var proto;
            if (typeof superC === "function") {
                proto = this.prototype = new superC();
                proto.constructor = superC;
            } else {
                if (typeof superC === "object") {
                    proto = this.prototype = superC;
                    proto.constructor = superC.constructor;
                } else {
                    throw new Error("Parameter 'superC' must be a function or object");
                }
            }
            return this;
        };
        this.$implements = function(superCs) {
            var proto = this.prototype, superC, imps = proto.__imps__ = [].concat(proto.__imps__ || []);
            for (var i = 0, len = arguments.length; i < len; i++) {
                superC = arguments[i];
                if (typeof superC == "function") {
                    imps.push(superC);
                    superC.$decorate(proto);
                }
            }
            return this;
        };
        this.$decorate = function(o, replaceMap) {
            if (o === undefined) {
                throw new Error("Parameter 'o' must be an object");
            }
            var p, proto = this.prototype;
            if (this.__defined__ == undefined) {
                new this();
            }
            replaceMap = replaceMap || {};
            for (p in proto) {
                if (proto.hasOwnProperty(p) && "__imps__" != p && (!o.hasOwnProperty(p) || replaceMap[p] == true)) {
                    o[p] = proto[p];
                }
            }
            return o;
        };
        this.$bind = function(thi$) {
            var fn = this, args = slice.call(arguments, 1);
            return function() {
                var $args = args.slice(0);
                $args = slice.call(arguments, 0).concat($args);
                return fn.apply(thi$, $args);
            };
        };
        this.$listen = function(thi$, eClass) {
            var fn = this, args = slice.call(arguments, 2);
            var agent = function(e) {
                var $args = args.slice(0);
                var _e = typeof eClass === "function" ? new eClass(e) : e;
                $args.unshift(_e);
                return fn.apply(thi$, $args);
            };
            agent.__host__ = fn;
            return agent;
        };
        this.$delay = function(thi$, timeout) {
            var fn = this, args = slice.call(arguments, 2);
            fn.__timer__ = fn.__timer__ || [];
            var _timer = setTimeout(function() {
                fn.$clearTimer(_timer);
                fn.apply(thi$, args);
            }, timeout);
            fn.__timer__.push(_timer);
            return _timer;
        };
        this.$clearTimer = function(timer) {
            var timers = this.__timer__, index = -1, ret = false;
            if (timers && timers.length > 0) {
                if (timer != undefined && timer != null) {
                    for (var i = 0, len = timers.length; i < len; i++) {
                        if (timers[i] === timer) {
                            index = i;
                            break;
                        }
                    }
                    if (index != -1) {
                        timers.splice(index, 1);
                        clearTimeout(timer);
                        ret = true;
                    }
                } else {
                    clearTimeout(timers.shift());
                    ret = true;
                }
            }
            return ret;
        };
        this.$override = function(func) {
            this.__super__ = func;
            return this;
        };
        $super = function(thisObj) {
            var caller = self.$super.caller, args;
            args = arguments.length > 1 ? slice.call(arguments, 1) : slice.call(caller.arguments);
            return caller.__super__.apply(thisObj, args);
        };
        this.$forEach = function(thi$, set) {
            var fn = this.bind.apply(this, F.concat([ thi$ ], F.slice(arguments, 2)));
            F.forEach(fn, set);
        };
        this.$map = function(thi$, set) {
            var fn = this.bind.apply(this, F.concat([ thi$ ], F.slice(arguments, 2)));
            return F.map(fn, set);
        };
        this.$filter = function(thi$, set) {
            var fn = this.bind.apply(this, F.concat([ thi$ ], F.slice(arguments, 2)));
            return F.filter(fn, set);
        };
        this.$some = function(thi$, set) {
            var fn = this.bind.apply(this, F.concat([ thi$ ], F.slice(arguments, 2)));
            return F.some(fn, set);
        };
        this.$delayLoop = function(thi$, timeout, iterator, context, callback) {
            var fn = this, loops, id;
            fn.__loops__ = fn.__loops__ || {};
            loops = fn.__loops__[thi$.uuid()];
            if (!loops) {
                loops = fn.__loops__[thi$.uuid()] = {};
            }
            (function(v, k) {
                if (v === iterator) {
                    id = k;
                    throw F.EOF;
                }
            }).$forEach(null, loops);
            if (!id) {
                id = js.lang.Math.uuid();
                loops[id] = iterator;
            }
            if (iterator.index == iterator.length) {
                if (callback) {
                    callback.call(thi$, context);
                }
            } else {
                (function() {
                    if (iterator.stop) {
                        return;
                    }
                    fn.call(thi$, iterator, context);
                    iterator.index += iterator.step;
                    fn.$delayLoop(thi$, timeout, iterator, context, callback);
                }).$delay(thi$, timeout);
            }
        };
        this.$boot = function() {
            __init__.push(this);
        };
    }).call(Function.prototype);
    self.$inject = function(target, fnName, inject, after) {
        var fn = target[fnName], ret;
        if (typeof fn !== "function" || typeof inject !== "function") {
            return;
        }
        target[fnName] = function() {
            if (!after) {
                inject(arguments);
                ret = self.$super(this);
            } else {
                ret = self.$super(this);
                inject(arguments);
            }
            return ret;
        }.$override(fn);
    };
    self.$debug = function(target, fnName) {
        self.$inject(target, fnName, function() {
            debugger;
        });
    };
    Boolean.prototype.boolValue = function() {
        return this.valueOf();
    };
    String.prototype.boolValue = function() {
        return this.valueOf() === "true";
    };
    Number.prototype.boolValue = function() {
        return this.valueOf() !== 0;
    };
}();

js.lang.Class = new function() {
    var _modules = {};
    this.packages = [];
    $package = this.definePackage = function(packageName) {
        if (_modules[packageName]) {
            return;
        }
        var names = packageName.split("."), parent = self, name, i, len;
        for (i = 0, len = names.length; i < len; i++) {
            name = names[i];
            if (parent[name] === undefined) {
                parent[name] = {};
            }
            parent = parent[name];
        }
        _modules[packageName] = parent;
    };
    $import = this.importClass = function(className) {
        var clazz = _checkClass(className), path, filePath;
        if (clazz != undefined) {
            return clazz;
        }
        try {
            path = _makeClassPath(className);
            filePath = [ J$VM.env.j$vm_home, path ].join("");
            if (J$VM.pkgversion && !J$VM.pkgversion[path]) {
                throw "No such file " + path;
            }
            _loadClass(filePath);
            clazz = _modules[className] = _checkClass(className);
        } catch (ex) {
            J$VM.System.err.println("Can't load " + className + " from " + filePath + "\n" + ex);
        }
        return clazz;
    };
    var _checkClass = function(className) {
        if (!className) {
            return undefined;
        }
        var clazz = _modules[className], names, name, i, len;
        if (clazz === undefined) {
            names = className.split(".");
            clazz = self;
            for (i = 0, len = names.length; i < len; i++) {
                name = names[i];
                if (clazz[name] === undefined) {
                    clazz = undefined;
                    break;
                }
                clazz = clazz[name];
            }
            _modules[className] = clazz;
        }
        return clazz;
    }.$bind(this);
    var _makeClassPath = this._makeClassPath = function(className) {
        var buf = [ "classes" ], names, i, len;
        names = className.split(".");
        for (i = 0, len = names.length; i < len; i++) {
            buf.push("/");
            buf.push(names[i]);
        }
        buf.push(".jz");
        return buf.join("");
    }.$bind(this);
    $load_package = this.loadClass = function(filePath, packName) {
        packName = packName || _getPackName(filePath);
        if (self.__j$vmpkg[packName]) {
            return;
        }
        try {
            _loadClass(filePath);
        } catch (ex) {
            J$VM.System.err.println("Can't load class from " + filePath + "/n" + ex);
        }
    };
    var _getPackName = function(filePath) {
        var path = filePath.split("/");
        path = path[path.length - 1];
        path = path.split(".");
        return path[0];
    };
    var _loadClass = function(filePath) {
        var storage = J$VM.storage.cache, text, cached, incache = false, key = filePath.substring(J$VM.env.j$vm_home.length);
        cached = storage.getItem(key);
        if (cached) {
            if (cached.build && cached.build === J$VM.pkgversion[key]) {
                text = cached.text;
                incache = true;
            }
        }
        text = this.loadScript(!text ? filePath : null, text);
        if (!incache) {
            try {
                storage.setItem(key, {
                    build: J$VM.pkgversion[key],
                    text: text
                });
            } catch (x) {
                J$VM.System.err.println(x);
            }
        }
    }.$bind(this);
    this.loadScript = function(filePath, text) {
        var b = !text;
        text = text || this.getResource(filePath, !this.isString(text));
        try {
            F.eval(text);
        } catch (x) {
            console.error(x);
            throw x;
        }
        if (b) {
            this.packages.push(filePath);
        }
        return text;
    };
    this.getResource = function(url, nocache, params) {
        var resp = F.fetch(url, {
            async: false,
            method: "GET",
            body: {
                __: J$VM.__version__
            }
        });
        return resp.status === 200 || resp.status === 304 ? resp.body : F.throwE(TypeError(resp.status + ":" + resp.statusText));
    };
    this.forName = function(className) {
        var clazz = _checkClass(className);
        if (clazz === undefined) {
            clazz = this.importClass(className);
        }
        return clazz;
    };
    this.loadImageFromUrl = function(image, url, callback) {
        var Q;
        Q = image.Q = [];
        Q.push([ this, image, callback ]);
        image.onload = _imageOnLoad.$bind(image);
        image.onreadystatechange = _imageOnStat.$bind(image);
        this._loadImage(image, url);
    };
    this.loadImage = function(url, callback, clone) {
        var cache = J$VM.storage.images, Q, image, dataUrl = true;
        if (url.indexOf("data:") != 0) {
            dataUrl = false;
            image = cache.getItem(url) || document.getElementById(url);
        }
        clone = clone || false;
        if (!this.isHtmlElement(image)) {
            image = J$VM.DOM.createElement("IMG");
            cache.setItem(url, image);
            this.loadImageFromUrl(image, url, callback);
            return;
        } else {
            if (image && image.onload != null) {
                if (clone) {
                    Q = image.Q;
                    Q.push([ this, image, callback ]);
                    return;
                } else {
                    image = J$VM.DOM.createElement("IMG");
                    this.loadImageFromUrl(image, url, callback);
                    return;
                }
            }
        }
        if (clone) {
            _onload.call(this, image, callback);
        } else {
            image = J$VM.DOM.createElement("IMG");
            this.loadImageFromUrl(image, url, callback);
        }
    };
    this._loadImage = function(image, url) {
        image.src = url;
    };
    var _imageOnLoad = function() {
        var Q = this.Q, req;
        while (Q.length > 0) {
            req = Q.shift();
            _onload.apply(req.shift(), req);
        }
        this.onload = null;
        this.onreadystatechange = null;
    };
    var _imageOnStat = function() {
        if (this.readyState == "loaded" || this.readyState == "complete") {
            _imageOnLoad.call(this);
        }
    };
    var _onload = function(image, callback) {
        if (typeof callback === "function") {
            callback(image);
        }
    };
    this.typeOf = function(o) {
        return o === null ? "null" : o === undefined ? "undefined" : this.isHtmlElement(o) ? "html" + o.tagName.toLowerCase() + "element" : this.isBigInt(o) ? "bigint" : _typeof(o);
    };
    var _typeof = function(o) {
        var s = Object.prototype.toString.call(o);
        return s.substring(8, s.length - 1).toLowerCase();
    };
    this.isDate = function(o) {
        return this.typeOf(o) === "date" && !isNaN(o);
    };
    this.isBigInt = function(o) {
        return js.text && js.text.BigIntTools && typeof o == "object" && o instanceof js.text.BigIntTools.BigInt;
    };
    this.isArray = function(o) {
        return this.typeOf(o) === "array";
    };
    this.isString = function(o) {
        return typeof o === "string";
    };
    this.isNumber = function(o) {
        return !isNaN(o) && typeof o === "number";
    };
    this.isObject = function(o) {
        return this.typeOf(o) === "object";
    };
    this.isPureObject = function(o) {
        return this.isObject(o) && o.constructor === Object;
    };
    this.isBoolean = function(o) {
        return typeof o === "boolean";
    };
    this.isNull = function(o) {
        return this.typeOf(o) === "null";
    };
    this.isUndefined = function(o) {
        return this.typeOf(o) === "undefined";
    };
    this.isFunction = function(o) {
        return typeof o === "function";
    };
    this.isValid = function(o) {
        return o != null && o != undefined;
    };
    this.isHtmlElement = function(o) {
        return o ? !!o.tagName : false;
    };
    this.isJSON = function(str) {
        if (!this.isString(str) || str.length == 0) {
            return false;
        }
        try {
            var obj = JSON.parse(str);
            return true;
        } catch (e) {
            return false;
        }
    };
    this.is = function(o, type) {
        var b = false;
        if (!this.isString(type) || type.length == 0) {
            return this.isValid(o);
        }
        type = type.toLowerCase();
        switch (type) {
          case "number":
            b = this.isNumber(o);
            break;

          case "date":
            b = this.isDate(o);
            break;

          default:
            b = this.typeOf(o) === type;
            break;
        }
        return b;
    };
    this.isIn = function(e, set) {
        var b = false;
        if (!this.isValid(e)) {
            return b;
        }
        switch (this.typeOf(set)) {
          case "object":
            b = set.hasOwnProperty("" + e);
            break;

          case "array":
            if (typeof set.contains !== "function") {
                js.util.LinkedList.$decorate(set);
            }
            b = set.contains(e);
            break;

          default:
            break;
        }
        return b;
    };
    this.sliceArgs = function(array, n) {
        n = n || 0;
        return Array.prototype.slice.call(array, n);
    };
}();

js.lang.Math = function() {
    this.uuid = F.uuid;
    this.hash = F.rand32;
    this.crc32 = F.compose(F.nto36, F.crc32);
    return this;
}.call(self.Math);

js.lang.Object = function(o) {
    var CLASS = js.lang.Object, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Math = js.lang.Math, objectStore = {};
    thi$.hashCode = function() {
        return this.__hash__ = this.__hash__ || Math.hash();
    };
    thi$.equals = function(o) {
        return o === this;
    };
    thi$.toString = function() {
        return typeof this + "@" + this.uuid();
    };
    thi$.uuid = function(id) {
        return F.stringp(id) ? this.__uuid__ = id : this.__uuid__ = this.__uuid__ || F.uuid(this.hashCode());
    };
    thi$.instanceOf = function(clazz) {
        var imps = this.__imps__;
        if (imps) {
            for (var i = 0, len = imps.length; i < len; i++) {
                if (clazz === imps[i]) {
                    return true;
                }
            }
        }
        return this instanceof clazz;
    };
    thi$.destroy = function() {
        var uuid = this.uuid(), obj, p;
        obj = objectStore[uuid];
        objectStore[uuid] = null;
        for (p in obj) {
            obj[p] = null;
        }
        J$VM.MQ.remove(uuid);
        for (p in this) {
            delete this[p];
        }
        this.destroied = true;
    };
    thi$.setContextID = function(ouuid) {
        var uuid = this.uuid(), obj = objectStore[uuid];
        if (!obj) {
            obj = objectStore[uuid] = {
                __self__: this
            };
        }
        if (Class.isString(ouuid) && ouuid.length > 0) {
            obj["__contextid__"] = ouuid;
        }
    };
    thi$.getContextID = function() {
        var obj = objectStore[this.uuid()] || {};
        return obj["__contextid__"];
    };
    thi$.getObject = function(uuid) {
        var obj = objectStore[uuid] || {};
        return obj["__self__"];
    };
    thi$.getContext = function(uuid) {
        return objectStore[uuid || this.uuid()];
    };
    thi$.putContextAttr = function(attr, v) {
        if (!Class.isString(attr) || attr.length === 0 || !Class.isValid(v)) {
            return;
        }
        var obj = this.getContext();
        obj[attr] = v;
    };
    var _getContextAttr = function(uuid, attr, upward) {
        var obj = objectStore[uuid], ouuid, v;
        if (!obj) {
            return null;
        }
        if (obj.hasOwnProperty(attr)) {
            return obj[attr];
        }
        ouuid = obj["__contextid__"];
        if (ouuid && ouuid !== uuid && upward !== false) {
            v = _getContextAttr.call(this, ouuid, attr, upward);
        }
        return v;
    };
    thi$.getContextAttr = function(attr, upward, uuid) {
        return _getContextAttr.call(this, uuid || this.uuid(), attr, upward);
    };
    thi$.rmContextAttr = function(attr) {
        var obj = this.getContext();
        if (!obj || !Class.isString(attr) || attr === "__self__" || attr === "__contextid__") {
            return;
        }
        obj[attr] = null;
    };
}.$extend(Object);

js.lang.String = function() {
    var REGX_HTML_ENCODE = /"|&|'|<|>|[\x00-\x20]|[\x7F-\xFF]|[\u0100-\u2700]/g;
    var REGX_HTML_DECODE = /&\w+;|&#(\d+);|<br\/>/g;
    var REGX_TRIM = /(^\s*)|(\s*$)/g;
    var REGX_REGEXP_METACHARS = /[\^\$\.\*\+\?\|\\\(\)\[\]\{\}]/g;
    var REGX_REGEXP_ESCAPEDMETACHARS = /\\([\^\$\.\*\+\?\|\\\(\)\[\]\{\}])/g;
    var HTML_DECODE = {
        "&lt;": "<",
        "&gt;": ">",
        "&amp;": "&",
        "&nbsp;": " ",
        "&quot;": '"',
        "&copy;": "©",
        "<br/>": String.fromCharCode(10)
    };
    var TAGTEST = {
        script: /<script\b[\s\S]*?>([\s\S]*?)<\/script/i,
        pre: /<pre\b[\s\S]*?>([\s\S]*?)<\/pre/i,
        TEXTAREA: /<TEXTAREA\b[\s\S]*?>([\s\S]*?)<\/TEXTAREA/i
    };
    var REGX_MEATACHARS_ESCAPE = {
        "^": "\\^",
        $: "\\$",
        "(": "\\(",
        ")": "\\)",
        "[": "\\[",
        "{": "\\{",
        ".": "\\.",
        "*": "\\*",
        "\\": "\\\\",
        "|": "\\|",
        "<": "\\<",
        ">": "\\>",
        "+": "\\+",
        "?": "\\?"
    };
    var REGX_MEATACHARS_UNESCAPE = {
        "\\^": "^",
        "\\$": "$",
        "\\(": "(",
        "\\)": ")",
        "\\[": "[",
        "\\{": "{",
        "\\.": ".",
        "\\*": "*",
        "\\\\": "\\",
        "\\|": "|",
        "\\<": "<",
        "\\>": ">",
        "\\+": "+",
        "\\?": "?"
    };
    this.encodeHtml = String.encodeHtml = function(s, nobreak, ignoreSpace) {
        s = s != undefined ? s : this.toString();
        var o;
        return typeof s != "string" ? s : s.replace(REGX_HTML_ENCODE, function($0) {
            var c = $0.charCodeAt(0), r = [ "&#" ];
            if (c == 13 && nobreak != true) {
                o = c;
                return "<br/>";
            }
            if (c == 10 && nobreak != true) {
                return o == 13 ? "" : "<br/>";
            }
            if (c == 32 || c == 160) {
                if (ignoreSpace !== true) {
                    c = c == 32 ? 160 : c;
                } else {
                    c = c == 160 ? 32 : c;
                    return String.fromCharCode(c);
                }
            }
            r.push(c);
            r.push(";");
            return r.join("");
        });
    };
    this.decodeHtml = String.decodeHtml = function(s, nobreak) {
        s = s != undefined ? s : this.toString();
        return typeof s != "string" ? s : s.replace(REGX_HTML_DECODE, function($0, $1) {
            var c = HTML_DECODE[$0];
            if (c == undefined) {
                if (!isNaN($1)) {
                    c = String.fromCharCode($1 == 160 ? 32 : $1);
                } else {
                    c = $0;
                }
            }
            return c;
        });
    };
    this.escapeRegExp = String.escapeRegExp = function(s) {
        s = s != undefined ? s : this.toString();
        return typeof s != "string" ? s : s.replace(REGX_REGEXP_METACHARS, function($0) {
            return "\\" + $0;
        });
    };
    this.unescapeRegExp = String.unescapeRegExp = function(s) {
        s = s != undefined ? s : this.toString();
        return typeof s != "string" ? s : s.replace(REGX_REGEXP_ESCAPEDMETACHARS, function($0, ch) {
            return ch;
        });
    };
    this.escapeRxMetaChars = String.escapeRxMetaChars = function(s, emap) {
        if (!s || typeof s != "string") {
            return s;
        }
        var buf = [], ch, ech;
        for (var i = 0; i < s.length; i++) {
            ch = s.charAt(i);
            ech = emap ? emap[ch] : null;
            if (typeof ech != "string") {
                ech = REGX_MEATACHARS_ESCAPE[ch];
            }
            if (ech) {
                buf.push(ech);
            } else {
                buf.push(ch);
            }
        }
        return buf.join("");
    };
    this.unescapeRxMetaChars = String.unescapeRxMetaChars = function(s) {
        if (!s || typeof s != "string" || s.indexOf("\\") == -1) {
            return s;
        }
        var buf = [], ch, prech;
        for (var i = 0; i < s.length; i++) {
            ch = s.charAt(i);
            if (ch !== "\\") {
                if (prech) {
                    ch = prech + ch;
                    ch = REGX_MEATACHARS_UNESCAPE[ch] || ch;
                    prech = null;
                }
                buf.push(ch);
            } else {
                prech = ch;
            }
        }
        return buf.join("");
    };
    this.trim = String.trim = this.trim || function() {
        var s = this.toString();
        return typeof s != "string" ? s : s.replace(REGX_TRIM, "");
    };
    this.endsWith = this.endsWith || function(suffix) {
        return this.indexOf(suffix, this.length - suffix.length) !== -1;
    };
    this.startsWith = this.startsWith || function(suffix) {
        return this.indexOf(suffix) === 0;
    };
    this.fetchJSON = String.prototype.fetchJSON = function(tag, s) {
        tag = tag || "pre";
        s = s != undefined ? s : this.toString();
        var tester = TAGTEST[tag], ret;
        if (tester.test(s)) {
            ret = tester.exec(s);
        }
        return ret ? ret[1].trim() : s;
    };
    this.hashCode = this.hashCode || function() {
        var hash = this._hash, _char;
        if (hash == undefined || hash == 0) {
            hash = 0;
            for (var i = 0, len = this.length; i < len; i++) {
                _char = this.charCodeAt(i);
                hash = 31 * hash + _char;
                hash = hash & hash;
            }
            hash = hash & 2147483647;
            this._hash = hash;
        }
        return this._hash;
    };
    return String;
}.call(String.prototype);

js.lang.StringBuffer = function(s) {
    var CLASS = js.lang.StringBuffer, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    thi$.append = function(s) {
        this._buf.push(s);
        return this;
    };
    thi$.clear = function() {
        this._buf.splice(0, this._buf.length);
        return this;
    };
    thi$.toString = function() {
        return this._buf.join("");
    };
    thi$._init = function(s) {
        this._buf = [];
        if (s) {
            this._buf.push(s);
        }
    };
    this._init.apply(this, arguments);
}.$extend(js.lang.Object);

$package("js.util");

js.util.Counter = function() {
    var CLASS = js.util.Counter, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class;
    thi$.setCount = function(count) {
        count = Class.isNumber(count) && count > 0 ? count : Number.MAX_VALUE;
        this._local.count = count;
        this.setPos(0);
    };
    thi$.getCount = function() {
        return this._local.count;
    };
    thi$.setPos = function(p) {
        var U = this._local, ret = false;
        if (p >= 0 && p <= U.count) {
            U.pos = p;
            ret = true;
        } else {
            if (p > U.count) {
                U.pos = p - U.count;
                ret = true;
            }
        }
        return ret;
    };
    thi$.getPos = function() {
        return this._local.pos;
    };
    thi$.increase = function(d) {
        return _add.call(this, d || 1);
    };
    thi$.decrease = function(d) {
        return _add.call(this, 0 - Math.abs(d || 1));
    };
    var _add = function(d) {
        var U = this._local, count = U.count, p = U.pos;
        p += d;
        p = p < 0 ? count - 1 : p % count;
        U.pos = p;
        return p;
    };
};

js.util.SimpleCounter = function(count, pos) {
    var CLASS = js.util.SimpleCounter, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    thi$._init = function(count, pos) {
        this._local = {};
        this.setCount(count);
        this.setPos(pos);
    };
    this._init.apply(this, arguments);
}.$extend(js.lang.Object).$implements(js.util.Counter);

$package("js.util");

js.util.LinkedList = function(array) {
    var CLASS = js.util.LinkedList, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init(array);
        return;
    }
    CLASS.__defined__ = true;
    thi$.getFirst = function() {
        if (this.length == 0) {
            throw new Error("NoSuchElementException");
        }
        return this[0];
    };
    thi$.getLast = function() {
        if (this.length == 0) {
            throw new Error("NoSuchElementException");
        }
        return this[this.length - 1];
    };
    thi$.addFirst = function(e) {
        this.add(0, e);
    };
    thi$.push = function(e) {
        $super(this);
        return this;
    }.$override(this.push);
    thi$.addLast = function(e) {
        this.push(e);
    };
    thi$.removeFirst = function() {
        return this.shift();
    };
    thi$.removeLast = function() {
        return this.pop();
    };
    thi$.add = function(index, e) {
        this.splice(index, 0, e);
    };
    thi$.set = function(index, e) {
        var oldVal = this[index];
        this[index] = e;
        return oldVal;
    };
    thi$.get = function(index) {
        return this[index];
    };
    thi$.remove0 = function(index) {
        var e = this.get(index);
        this.splice(index, 1);
        return e;
    };
    thi$.remove = function(e) {
        var idx = this.indexOf(e);
        return idx != -1 ? this.remove0(idx) : null;
    };
    thi$.indexOf = function(e) {
        for (var i = 0, len = this.length; i < len; i++) {
            var _e = this[i];
            if (e instanceof js.lang.Object && _e instanceof js.lang.Object) {
                if (_e.equals(e)) {
                    return i;
                }
            } else {
                if (_e === e) {
                    return i;
                }
            }
        }
        return -1;
    };
    thi$.replace = function(e, newE) {
        var idx = this.indexOf(e);
        if (idx != -1) {
            this.splice(idx, 1, newE);
        }
    };
    thi$.contains = function(e) {
        return this.indexOf(e) != -1;
    };
    thi$.clear = function() {
        this.splice(0, this.length);
        return this;
    };
    thi$._init = function(array) {
        if (array && js.lang.Class.isArray(array)) {
            this.addLast.$forEach(this, array);
        }
    };
    this._init(array);
}.$extend(Array);

(function() {
    var $ = js.util.LinkedList;
    $.newInstance = function(array) {
        var o = js.lang.Class.isArray(array) ? array : [];
        return $.$decorate(o);
    };
    Object.defineProperties(Array.prototype, {
        $getLinkedList: {
            value: function() {
                return $.$decorate(this);
            }
        },
        $indexOf: {
            value: function(e) {
                for (var i = 0, len = this.length; i < len; i++) {
                    if (this[i] === e) {
                        return i;
                    }
                }
                return -1;
            }
        },
        $contains: {
            value: function(e) {
                return this.$indexOf(e) !== -1;
            }
        }
    });
})();

$package("js.util");

js.util.HashMap = function(map) {
    var CLASS = js.util.HashMap, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class;
    thi$.put = function(key, value) {
        if (!Class.isString(key) && !Class.isNumber(key)) {
            throw "The key must be a string or number";
        }
        if (!this.contains(key)) {
            this._size++;
        }
        this._vals[key] = value;
    };
    thi$.size = function() {
        return this._size;
    };
    thi$.contains = function(key) {
        return this._vals.hasOwnProperty(key);
    };
    thi$.get = function(key) {
        return this.contains(key) ? this._vals[key] : undefined;
    };
    thi$.remove = function(key) {
        var e = undefined;
        if (this.contains(key)) {
            e = this._vals[key];
            delete this._vals[key];
            this._size--;
        }
        return e;
    };
    thi$.keys = function() {
        var ret = [], vals = this._vals;
        for (var k in vals) {
            if (vals.hasOwnProperty(k)) {
                ret.push(k);
            }
        }
        return ret;
    };
    thi$.values = function() {
        var ret = [], vals = this._vals;
        for (var k in vals) {
            if (vals.hasOwnProperty(k)) {
                ret.push(vals[k]);
            }
        }
        return ret;
    };
    thi$.addAll = function(map) {
        for (var p in map) {
            if (map.hasOwnProperty(p)) {
                this.put(p, map[p]);
            }
        }
    };
    thi$.clear = function() {
        this._vals = {};
        this._size = 0;
    };
    thi$.clone = function() {
        return new CLASS(this._vals);
    };
    thi$._init = function(map) {
        this._vals = map || {};
        var n = 0, vals = this._vals;
        for (var k in vals) {
            if (vals.hasOwnProperty(k)) {
                n++;
            }
        }
        this._size = n;
    };
    this._init.apply(this, arguments);
}.$extend(js.lang.Object);

$package("js.util");

js.util.Properties = function(map) {
    var CLASS = js.util.Properties, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    thi$.getProperty = function(key, defaultValue) {
        var tmp = this.get(key);
        return tmp == undefined ? defaultValue : tmp;
    };
    thi$.setProperty = function(key, value) {
        this.put(key, value);
    };
    this._init.apply(this, arguments);
}.$extend(js.util.HashMap);

$package("js.util");

js.util.Observable = function(def, Runtime) {
    var CLASS = js.util.Observable, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, List = js.util.LinkedList;
    thi$.addObserver = function(observer) {
        var svrs = this.__observers__;
        if (observer && observer.update && !svrs.contains(observer)) {
            svrs.addLast(observer);
        }
    };
    thi$.deleteObserver = function(observer) {
        this.__observers__.remove(observer);
    };
    thi$.deleteObservers = function() {
        this.__observers__.clear();
    };
    thi$.notifyObservers = function(data) {
        if (!this.hasChanged()) {
            return;
        }
        (function(observer) {
            observer.update(this, data);
        }).$forEach(this, this.__observers__);
    };
    thi$.hasChanged = function() {
        return this._local.changed;
    };
    thi$.setChanged = function() {
        this._local.changed = true;
    };
    thi$.clearChanged = function() {
        this._local.changed = false;
    };
    thi$.Runtime = function() {
        return this._local.Runtime;
    };
    thi$.destroy = function() {
        this.__observers__ = null;
        this._local = null;
        $super(this);
    }.$override(this.destroy);
    thi$._init = function(def, Runtime) {
        if (!Class.isObject(def)) {
            return;
        }
        this.def = def;
        this.uuid(def.uuid);
        this.__observers__ = List.$decorate([]);
        var U = this._local = this._local || {};
        U.Runtime = Runtime;
        U.changed = false;
        this.setContextID(def["__contextid__"]);
    };
    this._init.apply(this, arguments);
}.$extend(js.lang.Object);

$package("js.util");

js.util.Observer = function() {
    var CLASS = js.util.Observer, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        return;
    }
    CLASS.__defined__ = true;
    thi$.update = function(observable, data) {};
};

$package("js.util");

js.util.Event = function(eventType, eventData, eventTarget) {
    var CLASS = js.util.Event, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init(eventType, eventData, eventTarget);
        return;
    }
    CLASS.__defined__ = true;
    thi$.getType = function() {
        return this._type;
    };
    thi$.setType = function(type) {
        this._type = type;
    };
    thi$.getTimeStamp = function() {
        return this._time;
    };
    thi$.getData = function() {
        return this._data;
    };
    thi$.setData = function(data) {
        this._data = data;
    };
    thi$.getEventTarget = function() {
        return this._target;
    };
    thi$.setEventTarget = function(eventTarget) {
        this._target = eventTarget;
    };
    thi$.cancelBubble = function() {
        this._bubble = false;
    };
    thi$.cancelDefault = function() {
        this._default = false;
        return this._default;
    };
    thi$._init = function(eventType, eventData, eventTarget) {
        this.setType(eventType);
        this.setData(eventData);
        this.setEventTarget(eventTarget);
        this._time = new Date();
        this._bubble = true;
        this._default = true;
    };
    this._init(eventType, eventData, eventTarget);
}.$extend(js.lang.Object);

(function() {
    var $ = js.util.Event;
    $.FLAG = {
        EXCLUSIVE: 1 << 0,
        CAPTURED: 1 << 1,
        CUSTOMIZED: 1 << 2,
        check: function(f) {
            var o = {
                exclusive: false,
                captured: false,
                customized: false
            };
            if (typeof f === "number") {
                o.exclusive = (f & this.EXCLUSIVE) != 0;
                o.captured = (f & this.CAPTURED) != 0;
                o.customized = (f & this.CUSTOMIZED) != 0;
            } else {
                o.exclusive = f === true;
            }
            return o;
        }
    };
    var attach = function() {
        if (self.addEventListener) {
            return function(el, type, fn) {
                el.addEventListener(type, fn);
            };
        } else {
            if (self.attachEvent) {
                return function(el, type, fn) {
                    el.attachEvent([ "on", type ].join(""), fn);
                };
            }
        }
        return null;
    }();
    var detach = function() {
        if (self.removeEventListener) {
            return function(el, type, fn) {
                el.removeEventListener(type, fn);
            };
        } else {
            if (self.detachEvent) {
                return function(el, type, fn) {
                    el.detachEvent([ "on", type ].join(""), fn);
                };
            }
        }
        return null;
    }();
    $.attachEvent = function(dom, eventType, flag, listener, handler) {
        var fn, args = Array.prototype.slice.call(arguments, 5), check = $.FLAG.check(flag), eClass = check.customized ? null : js.awt.Event;
        dom.__handlers__ = dom.__handlers__ || {};
        var handlers = dom.__handlers__[eventType] = dom.__handlers__[eventType] || [], idx = F.indexOf([].concat(handlers), {
            __o: listener,
            __h: handler
        }, function(v, e) {
            return v.__o === e.__o && v.__h === e.__h;
        });
        if (idx !== -1) {
            return handlers[idx];
        }
        args.unshift(listener, eClass);
        fn = handler.$listen.apply(handler, args);
        fn.__o = listener;
        fn.__h = handler;
        fn.check = check;
        handlers.push(fn);
        if (check.exclusive) {
            dom["on" + eventType] = fn;
        } else {
            attach(dom, eventType, fn);
        }
        return fn;
    };
    $.detachEvent = function(dom, eventType, flag, listener, handler) {
        var fn, agents, check;
        dom.__handlers__ = dom.__handlers__ || {};
        dom.__handlers__[eventType] = dom.__handlers__[eventType] || [];
        agents = dom.__handlers__[eventType];
        for (var i = 0, len = agents.length; i < len; i++) {
            fn = agents[i];
            if (fn && (handler === fn.__host__ || handler === undefined)) {
                check = fn.check;
                if (check.exclusive) {
                    dom["on" + eventType] = null;
                } else {
                    detach(dom, eventType, fn);
                }
                delete fn.__host__;
                delete fn.check;
                agents.splice(i, 1);
            }
        }
        if (agents.length == 0) {
            delete dom.__handlers__[eventType];
        }
    };
    $.W3C_EVT_LOAD = "load";
    $.W3C_EVT_UNLOAD = "unload";
    $.W3C_EVT_RESIZE = "resize";
    $.W3C_EVT_SELECTSTART = "selectstart";
    $.W3C_EVT_CONTEXTMENU = "contextmenu";
    $.W3C_EVT_MESSAGE = "message";
    $.W3C_EVT_ERROR = "error";
    $.W3C_EVT_MOUSE_DOWN = "mousedown";
    $.W3C_EVT_MOUSE_UP = "mouseup";
    $.W3C_EVT_MOUSE_MOVE = "mousemove";
    $.W3C_EVT_MOUSE_OVER = "mouseover";
    $.W3C_EVT_MOUSE_OUT = "mouseout";
    $.W3C_EVT_MOUSE_CLICK = "click";
    $.W3C_EVT_MOUSE_DBCLICK = "dblclick";
    $.W3C_EVT_MOUSE_WHEEL = "mousewheel";
    $.W3C_EVT_TOUCH_START = "touchstart";
    $.W3C_EVT_TOUCH_MOVE = "touchmove";
    $.W3C_EVT_TOUCH_END = "touchend";
    $.W3C_EVT_TOUCH_CANCEL = "touchcancel";
    $.W3C_EVT_DRAGSTART = "dragstart";
    $.W3C_EVT_DRAGEND = "dragend";
    $.W3C_EVT_DRAGENTER = "dragenter";
    $.W3C_EVT_DRAGLEAVE = "dragleave";
    $.W3C_EVT_DRAGOVER = "dragover";
    $.W3C_EVT_DROP = "drop";
    $.W3C_EVT_KEY_DOWN = "keydown";
    $.W3C_EVT_KEY_UP = "keyup";
    $.SYS_EVT_STATECHANGED = "statechanged";
    $.SYS_EVT_SUCCESS = "success";
    $.SYS_EVT_HTTPERR = "httperr";
    $.SYS_EVT_TIMEOUT = "timeout";
    $.SYS_EVT_MOVING = "moving";
    $.SYS_EVT_MOVED = "moved";
    $.SYS_EVT_RESIZING = "resizing";
    $.SYS_EVT_RESIZED = "resized";
    $.SYS_EVT_ZINDEXCHANGED = "zindexchanged";
    $.SYS_EVT_GEOMCHANGED = "geomchanged";
    $.SYS_EVT_ELE_APPEND = "elementappend";
    $.SYS_EVT_ELE_REMOVED = "elementremoved";
    $.SYS_EVT_ELE_POSITION = "positionchanged";
    $.SYS_EVT_ELE_SIZE = "sizechanged";
    $.SYS_EVT_ELE_ZINDEX = "zindexchanged";
    $.SYS_EVT_ELE_ATTRS = "attrschanged";
    $.SYS_EVT_ELE_STYLE = "stylechanged";
    $.SYS_MSG_CONSOLEINF = "console_inf";
    $.SYS_MSG_CONSOLEERR = "console_err";
    $.SYS_MSG_CONSOLELOG = "console_log";
})();

$package("js.util");

js.util.EventListener = function(listener, handler) {
    var CLASS = js.util.EventListener, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init(listener, handler);
        return;
    }
    CLASS.__defined__ = true;
    thi$.handleEvent = function() {
        if (typeof this.handler === "function" && this.listener && this.listener.destroied != true) {
            this.handler.apply(this.listener, arguments);
        }
    };
    thi$.equals = function(o) {
        return o ? o.listener === this.listener && o.handler === this.handler : false;
    };
    thi$._init = function(l, h) {
        if (typeof l == "object") {
            this.listener = l;
            this.handler = h;
            if (typeof l.uuid != "function") {
                var o = this.listener;
                o.hashCode = function() {
                    if (!this._hash) {
                        this._hash = Math.random();
                    }
                    return this._hash;
                };
                o.uuid = function(id) {
                    if (arguments.length > 0) {
                        this._uuid = id;
                    } else {
                        if (!this._uuid) {
                            this._uuid = Math.uuid(this.hashCode());
                        }
                    }
                    return this._uuid;
                };
            }
            this.uuid(l.uuid());
        }
    };
    this._init(listener, handler);
}.$extend(js.lang.Object);

$package("js.util");

$import("js.util.Observable");

js.util.EventTarget = function(def, Runtime) {
    var CLASS = js.util.EventTarget, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, List = js.util.LinkedList, PreclusiveMouseKeyEvents = {
        mouseover: true,
        mousedown: true,
        mouseup: true,
        mouseout: true,
        mousemove: true,
        mousewheel: true,
        dommousescroll: true,
        click: true,
        dblclick: true,
        keydown: true,
        keyup: true
    };
    var _getListeners = function(eventType) {
        var hName = "on" + eventType, listeners = this[hName];
        if (!Class.isArray(listeners)) {
            listeners = this[hName] = [];
        }
        return listeners;
    };
    thi$.addEventListener = function(eventType, fn, captured) {
        _getListeners.call(this, eventType).push(fn);
    };
    thi$.removeEventListener = function(eventType, fn, captured) {
        var list = _getListeners.call(this, eventType), idx = F.indexOf(list, fn);
        if (idx != -1) {
            list.splice(idx, 1);
        }
    };
    var _prepareArgs = function(eventType, flag, listener, handler) {
        var check = Event.FLAG.check(flag), args = Array.prototype.slice.call(arguments, 0);
        if (check.customized) {
            args.unshift(this);
        } else {
            if (this.view != undefined) {
                args.unshift(this.view);
            } else {
                args.unshift(this);
            }
        }
        return args;
    };
    thi$.attachEvent = function(eventType, flag, listener, handler) {
        Event.attachEvent.apply(this, _prepareArgs.apply(this, arguments));
    };
    thi$.detachEvent = function(eventType, flag, listener, handler) {
        Event.detachEvent.apply(this, _prepareArgs.apply(this, arguments));
    };
    thi$.declareEvent = function(eventType) {
        this["on" + eventType] = null;
    };
    thi$.isPreclusiveEvent = function(e) {
        var type = e.getType();
        return PreclusiveMouseKeyEvents[type.toLowerCase()];
    };
    thi$.fireEvent = function(evt, bubble) {
        var eType, handlers;
        if (!(evt instanceof Event)) {
            throw "The evt must be an js.awt.Event object.";
        }
        eType = evt.getType();
        if (!Class.isFunction(this.isCovered) || !this.isCovered() || !this.isPreclusiveEvent(evt)) {
            handlers = this["on" + eType];
            switch (Class.typeOf(handlers)) {
              case "function":
                handlers.call(this, evt);
                break;

              case "array":
                for (var i = 0, len = handlers.length; i < len; i++) {
                    handlers[i].call(this, evt);
                }
                break;

              default:
                break;
            }
        }
        if (bubble === true && evt._bubble === true) {
            var src = this.view || evt.srcElement, target;
            do {
                src = src ? src.parentNode : null;
                target = src ? J$VM.DOM.getComponent(src) : null;
            } while (target && target === this);
            if (target && target.fireEvent) {
                target.fireEvent(evt, bubble);
            }
        }
    };
    thi$.canCapture = function() {
        var cap = this.def ? this.def.capture : false, parent;
        cap = cap || false;
        if (cap) {
            parent = this.getContainer ? this.getContainer() : null;
            cap = cap && (parent && parent.canCapture ? parent.canCapture() : false);
        }
        return cap;
    };
    thi$.destroy = function() {
        var eType, handlers = this.__handlers__;
        if (handlers) {
            for (eType in handlers) {
                this.detachEvent(eType, 4);
            }
            delete this.__handlers__;
        }
        handlers = this.view ? this.view.__handlers__ : undefined;
        if (handlers) {
            for (eType in handlers) {
                this.detachEvent(eType, 0);
                this.detachEvent(eType, 1);
            }
            this.view.__handlers__ = null;
        }
        $super(this);
    }.$override(this.destroy);
    thi$._init = function(def, Runtime) {
        if (!Class.isObject(def)) {
            return;
        }
        $super(this, def, Runtime);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.util.Observable);

$package("js.util");

js.util.Messenger = function() {
    var noop = F.noop, forEach = F.forEach, reduce = F.reduce, delay = F.delay, set = F.set, objectp = F.objectp, stringp = F.stringp, lambdap = F.lambdap, slice = F.slice, indexOf = F.indexOf;
    this.register = function(msgId, receiver, handler) {
        receiver = checkId(receiver);
        var recvs = this.table[msgId] = this.table[msgId] || [], idx = indexOf(recvs, [ receiver, handler ], equals);
        idx === -1 ? recvs.push([ receiver, handler ]) : noop();
    };
    this.cancel = function(msgId, receiver, handler) {
        receiver = checkId(receiver);
        var recvs = this.table[msgId] = this.table[msgId] || [], idx = indexOf(recvs, [ receiver, handler ], equals);
        idx !== -1 ? recvs.splice(idx, 1) : noop();
    };
    this.remove = function(receiverId) {
        forEach(function(recvs) {
            var idx = -1;
            while ((idx = indexOf(recvs, [ receiverId ], equals)) !== -1) {
                recvs.splice(idx, 1);
            }
        }, this.table);
    };
    this.post = function(msgId, msgData, recvs, device) {
        var msg = slice(arguments);
        this.Q.push(msg);
        return !this.scheduled ? (this.scheduled = true, delay(schedule.bind(this))) : noop();
    };
    this.send = function(msgId, msgData, recvs, device) {
        var msg = slice(arguments);
        dispatch.call(this, this.table[msg[0]], msg);
    };
    function checkId(obj) {
        return !lambdap(obj.uuid) ? (set(obj, "uuid", function(id) {
            return stringp(id) ? this.__uuid__ = id : this.__uuid__ = this.__uuid__ || F.uuid();
        }), set(obj, "hashCode", function() {
            return this.__hash__ || (this.__hash__ = F.rand32());
        })) : obj;
    }
    function equals(v, e) {
        return stringp(e[0]) ? v[0].uuid() === e[0] : v[0] === e[0] && v[1] === e[1];
    }
    function schedule(msg) {
        while (msg = this.Q.shift()) {
            delay(dispatch.bind(this, this.table[msg[0]], msg));
        }
        this.scheduled = false;
    }
    function dispatch(recvs, msg) {
        var dev, isTarget = getTargets(msg[2]);
        if (!(dev = msg[3])) {
            recvs = recvs || [];
            for (var i = 0, recv; i < recvs.length; i++) {
                recv = recvs[i];
                if (isTarget(recv[0])) {
                    run(recv[0], recv[1], msg[1]);
                }
            }
        } else {
            msg[3] = null;
            F.message(msg, dev);
        }
    }
    function getTargets(recvs) {
        var map = reduce(function(acc, recv) {
            acc["@has"] = true;
            return set(acc, objectp(recv) ? recv.uuid ? recv.uuid() : recv : recv, true);
        }, {
            "@has": false
        }, recvs || []);
        return function(recv) {
            return map["@has"] ? map[recv.__uuid__ || (recv.uuid ? recv.uuid() : recv)] || false : true;
        };
    }
    function run(obj, fn, data) {
        obj.destroied !== true ? fn.call(obj, data) : noop();
    }
    (function() {
        this.table = {};
        this.Q = [];
        this.scheduled = false;
    }).call(this);
}.$extend(js.lang.Object);

$package("js.util");

js.util.Message = function(def) {
    var CLASS = js.util.Message, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = "js.util.Message";
    var Class = js.lang.Class, System = J$VM.System;
    thi$._init = function(def) {
        if (!Class.isObject(def)) {
            return;
        }
        this.type = def.type || CLASS.__defined__;
        this.hash = def.hash || Math.uuid();
        this.action = def.action;
        this.params = def.params;
        this.result = def.result;
        this.feedback = def.feedback;
    };
    this._init.apply(this, arguments);
};

js.util.MessageBox = function() {
    var CLASS = js.util.MessageBox, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        return;
    }
    CLASS.__defined__ = "js.util.MessageBox";
    var Class = js.lang.Class, System = J$VM.System, MQ = J$VM.MQ, Event = js.util.Event, Message = js.util.Message;
    thi$.getMsgBox = function() {
        var U = this._local;
        return U.msgbox = U.msgbox || {
            peers: []
        };
    };
    thi$.setMsgDevice = function(dev) {
        var box = this.getMsgBox(), id = dev.uuid = dev.uuid || Math.uuid();
        dev.setAttribute("jsvm_msgpeer", id);
        box.peers.push(id);
        box[id] = {};
    };
    thi$.getMsgDevice = function(peer) {
        var iframe;
        if (peer) {
            (function(v) {
                if (v.getAttribute("jsvm_msgpeer") === peer) {
                    iframe = v;
                    throw F.EOF;
                }
            }).$forEach(this, J$VM.DOM.getElementsByTagName("iframe"));
        }
        return iframe ? iframe.contentWindow : self.parent && self.parent !== self ? self.parent : null;
    };
    thi$.setMsgType = function(type) {
        var box = this.getMsgBox();
        if (box.type) {
            MQ.cancel(box.type, this, _recvMessage);
        }
        if (type) {
            box.type = type;
            MQ.register(box.type, this, _recvMessage);
        }
    };
    thi$.getMsgType = function() {
        var box = this.getMsgBox();
        return box.type || "js.util.Message";
    };
    thi$.getMsgPeer = function(peer) {
        return this.getMsgBox()[peer];
    };
    var _recvMessage = function(e) {
        var box = this.getMsgBox(), peer = e.msgpeer;
        if (peer && !box[peer]) {
            box.peers.push(peer);
            box[peer] = {};
        }
        e.cancelDefault();
        this.fireEvent(e);
    };
    thi$.rpcMessage = function(msg, peer) {
        var dev = this.getMsgDevice(peer);
        msg.type = this.getMsgType();
        if (dev) {
            MQ.post("-j$vm-rpc", msg, null, dev);
        }
    };
};

$package("js.util");

js.util.StyleSheet = function(nativeSheet) {
    var CLASS = js.util.StyleSheet, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, J$VMCSS = "/***__j$vm-css__***/";
    thi$.applyCSS = function(css) {
        var styleEle = DOM.getStyleSheetElement(this.nativeSheet);
        if (styleEle.styleSheet) {
            try {
                styleEle.styleSheet.cssText = comboCSSCode(styleEle.styleSheet.cssText, css);
            } catch (x) {}
        } else {
            styleEle.textContent = comboCSSCode(styleEle.textContent, css);
        }
        this._syncUpdate();
    };
    var comboCSSCode = function(ori, css) {
        var codes = ori.split(J$VMCSS), ret = [];
        for (var i = 0, len = codes.length; i < len; i++) {
            if (i == 0) {
                ret.push(codes[0]);
                ret.push(J$VMCSS);
                ret.push(css);
                ret.push(J$VMCSS);
            } else {
                if (i == 1) {
                    continue;
                } else {
                    ret.push(codes[i]);
                }
            }
        }
        return ret.join("\r\n");
    };
    thi$.getRule = function(selector) {
        return this.rules[selector];
    };
    thi$.addRule = function(selector, style) {
        style = style || {};
        var rule = this.getRule(selector), sheet, rules, cssText;
        if (Class.isObject(rule)) {
            cssText = DOM.toCssText(style);
            rule.style.cssText = cssText;
        } else {
            sheet = this.nativeSheet;
            rules = sheet.cssRules || sheet.rules;
            cssText = DOM.toCssText(style);
            if (sheet.insertRule) {
                sheet.insertRule([ selector, "{", cssText, "}" ].join(""), rules.length);
            } else {
                if (sheet.addRule) {
                    sheet.addRule(selector, cssText, rules.length);
                }
            }
            rule = this.rules[selector] = {
                selector: selector,
                style: rules[rules.length - 1].style
            };
        }
        return rule;
    };
    var _parseSheet = function(sheet, rules) {
        var cssrules = sheet.cssRules || sheet.rules, rule, i, len, selector;
        for (i = 0, len = cssrules.length; i < len; i++) {
            rule = cssrules[i];
            selector = rule.selectorText;
            rules[selector] = {
                selector: selector,
                style: rule.style
            };
        }
    };
    thi$.destroy = function() {
        this.nativeSheet = null;
        this.id = null;
        this.href = null;
        this.rules = null;
    };
    thi$._syncUpdate = function() {
        var nativeSheet = DOM._findNativeStyleSheet(this.id, this.href);
        if (nativeSheet !== this.nativeSheet) {
            this._init(nativeSheet);
        }
        return this;
    };
    thi$._init = function(nativeSheet) {
        this.nativeSheet = nativeSheet;
        this.id = DOM.getStyleSheetElement(nativeSheet).id;
        this.href = nativeSheet.href;
        this.rules = {};
        _parseSheet.call(this, nativeSheet, this.rules);
    };
    this._init.apply(this, arguments);
}.$extend(js.lang.Object);

$package("js.util");

js.util.Document = function() {
    var CLASS = js.util.Document, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, cache = {}, ATTRIBUTESCT = {
        acceptcharset: "acceptCharset",
        accesskey: "accessKey",
        allowtransparency: "allowTransparency",
        bgcolor: "bgColor",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        "class": "className",
        colspan: "colSpan",
        checked: "defaultChecked",
        selected: "defaultSelected",
        "for": "htmlFor",
        frameborder: "frameBorder",
        hspace: "hSpace",
        longdesc: "longDesc",
        maxlength: "maxLength",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        noresize: "noResize",
        noshade: "noShade",
        readonly: "readOnly",
        rowspan: "rowSpan",
        tabindex: "tabIndex",
        valign: "vAlign",
        vspace: "vSpace"
    }, BOOLATTRREGEXP = /^(checked|compact|declare|defer|disabled|ismap|multiple|nohref|noshade|nowrap|readonly|selected)$/, DOCTYPECT = {
        "html-4.01": {
            bodysize: false
        },
        "html-4.01-transitional": {
            bodysize: true
        }
    }, REGX_CAMEL = /[A-Z]/g, REGX_HYPHEN = /-([a-z])/gi, textSps = [ "font-family", "font-size", "font-style", "font-weight", "text-decoration", "text-align", "font-weight", "line-height" ], BOXSIZING = "", camelMap = {}, hyphenMap = {};
    thi$.checkBrowser = function() {
        var supports = J$VM.supports = {
            reliableMarginRight: true,
            supportCssFloat: true
        }, doc = self.document, view = doc.defaultView, div, cdiv, ccdiv, fdiv, ipt, obj;
        div = doc.createElement("DIV");
        div.style.cssText = BOXSIZING + "position:absolute;width:100px;height:100px;" + "border:5px solid black;padding:5px;" + "visibility:visible;";
        doc.body.appendChild(div);
        cdiv = doc.createElement("DIV");
        cdiv.style.cssText = BOXSIZING + "position:absolute;width:50px;height:30px;" + "left:0px;background-color:blue;";
        div.appendChild(cdiv);
        ccdiv = doc.createElement("DIV");
        ccdiv.style.cssText = "width:20px;height:20px;";
        cdiv.appendChild(ccdiv);
        fdiv = doc.createElement("DIV");
        fdiv.style.cssText = "float:left;";
        div.appendChild(fdiv);
        if (view && view.getComputedStyle && view.getComputedStyle(ccdiv, null).marginRight != "0px") {
            supports.reliableMarginRight = false;
        }
        supports.supportCssFloat = !!fdiv.style.cssFloat;
        if (supports.supportCssFloat) {
            camelMap["float"] = "cssFloat";
        } else {
            camelMap["float"] = "styleFloat";
        }
        supports.borderBox = !(div.offsetWidth > 100);
        supports.borderEdg = !(cdiv.offsetLeft === 0);
        ipt = doc.createElement("INPUT");
        ipt.type = "text";
        ipt.style.cssText = BOXSIZING + "position:absolute;width:100px;height:100px;" + "border:2px solid;visibility:hidden;";
        doc.body.appendChild(ipt);
        supports.iptBorderBox = !(ipt.offsetWidth > 100);
        supports.placeholder = "placeholder" in ipt;
        div.innerHTML = "";
        div.style.cssText = "position:absolute;left:-550px;top:-550px;" + "width:550px;height:550px;overflow:scroll;" + "visibility:hidden;";
        obj = this.hasScrollbar(div);
        supports.hscrollbar = obj.hbw;
        supports.vscrollbar = obj.vbw;
        supports.preHScrollEleH = supports.hscrollbar + (J$VM.ie ? 1 : 0);
        supports.preVScrollEleW = supports.vscrollbar + (J$VM.ie ? 1 : 0);
        supports.touchEnabled = window.TouchEvent != undefined;
        supports.pointerEnabled = window.PointerEvent != undefined;
        supports.mouseEnabled = window.MouseEvent != undefined;
        if (!window.screen.logicalXDPI) {
            div.innerHTML = "";
            div.style.cssText = "position:absolution;left:0px;top:0px;" + "width:2.54cm;height:2.54cm;visibility:hidden;";
            var styles = doc.defaultView.getComputedStyle(div, null);
            supports.logicalXDPI = Math.round(parseFloat(styles["width"]));
            supports.logicalYDPI = Math.round(parseFloat(styles["height"]));
        } else {
            supports.logicalXDPI = window.screen.logicalXDPI;
            supports.logicalYDPI = window.screen.logicalYDPI;
        }
        obj = doc.createElement("CANVAS");
        supports.canvas = typeof obj.getContext === "function";
        supports.svg = doc.SVGAngle || doc.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1");
        div.innerHTML = "<v:shape id='vml_flag1' adj='1' />";
        obj = div.firstChild;
        obj.style.behavior = "url(#default#VML)";
        supports.vml = obj ? typeof obj.adj === "object" : false;
        if (typeof self.Uint8Array != "function") {
            var script = doc.createElement("script"), head = document.getElementsByTagName("head")[0];
            script.type = "text/vbscript";
            script.text = "Function IEBinaryToString(B)\r\n" + "Dim I, S\r\n" + "For I = 1 To LenB(B)\r\n" + 'If I <> 1 Then S = S & ","\r\n' + "S = S & CStr(AscB(MidB(B, I, 1)))\r\n" + "Next\r\n" + "IEBinaryToString = S\r\n" + "End Function\r\n";
            head.appendChild(script);
            head.removeChild(script);
        }
        if (J$VM.firefox) {
            Event.W3C_EVT_MOUSE_WHEEL = "DOMMouseScroll";
        }
        obj = null;
        doc.body.removeChild(div);
        doc.body.removeChild(ipt);
    };
    thi$.checkDoctype = function() {
        var reg = /(\"[^\"]+\")/gi, publicIDReg = /\s+(X?HTML)\s+([\d\.]+)\s*([^\/]+)*\//gi, DOCTYPEFEATURS = [ "xhtml", "version", "importance" ], doctype = J$VM.doctype = {
            declared: false
        }, dtype, publicId, systemId;
        if (document.doctype != null) {
            doctype.declared = true;
            dtype = document.doctype;
            doctype.name = dtype.name;
            publicId = dtype.publicId || "";
            systemId = dtype.systemId || "";
        } else {
            if (typeof document.namespaces != "undefined") {
                var dt = document.all[0];
                var value = dt.nodeType == 8 ? dt.nodeValue : "";
                if (value && value.toLowerCase().indexOf("doctype") != -1) {
                    doctype.declared = true;
                    doctype.name = dt.scopeName;
                    dtype = [];
                    value.replace(reg, function($0) {
                        if ($0) {
                            $0 = $0.replace(/"|'/g, "");
                            dtype.push($0);
                        }
                    });
                    publicId = dtype[0] || "";
                    systemId = dtype[1] || "";
                }
            }
        }
        if (doctype.declared) {
            doctype.publicId = publicId = publicId.toLowerCase();
            doctype.systemId = systemId.toLowerCase();
            try {
                if (publicId.length > 0 && publicIDReg.test(publicId) && RegExp.$1) {
                    doctype["xhtml"] = RegExp.$1;
                    doctype["version"] = RegExp.$2;
                    doctype["importance"] = RegExp.$3;
                }
            } catch (e) {}
            doctype.getEigenStr = function() {
                var fValues = [], v;
                if (this.declared) {
                    for (var i = 0, len = DOCTYPEFEATURS.length; i < len; i++) {
                        v = this[DOCTYPEFEATURS[i]];
                        if (v) {
                            fValues.push(v);
                        }
                    }
                    v = fValues.length > 0 ? fValues.join("-") : "";
                }
                return v;
            };
        }
    };
    thi$.createElement = function(type) {
        var el = document.createElement(type);
        return el;
    };
    thi$.cloneElement = function(ele, deep) {
        var view;
        switch (Class.typeOf(ele)) {
          case "htmlbodyelement":
          case "htmliframeelement":
            view = this.createElement("DIV");
            break;

          default:
            if (ele) {
                view = ele.cloneNode(deep);
                view.cloned = true;
            }
            break;
        }
        return view;
    };
    thi$.getElementsByTagName = function(name) {
        var eles = document.getElementsByTagName(name), ret = [];
        for (var i = 0, len = eles.length; i < len; i++) {
            ret.push(eles[i]);
        }
        return ret;
    };
    thi$.camelName = function(s) {
        var _s = camelMap[s];
        if (_s != undefined) {
            return _s;
        }
        _s = s.replace(REGX_HYPHEN, function(a, l) {
            return l.toUpperCase();
        });
        camelMap[s] = _s;
        if (_s !== s) {
            hyphenMap[_s] = s;
        }
        return _s;
    };
    thi$.hyphenName = function(s) {
        var _s = hyphenMap[s];
        if (_s !== undefined) {
            return _s;
        }
        _s = s.replace(REGX_CAMEL, function(u) {
            return "-" + u.toLowerCase();
        });
        hyphenMap[s] = _s;
        if (_s !== s) {
            camelMap[_s] = s;
        }
        return _s;
    };
    thi$.currentStyles = function(el) {
        var V = document.defaultView || self;
        return V.getComputedStyle ? V.getComputedStyle(el, null) : el.currentStyle;
    };
    var OPACITYREGX = /alpha\(opacity=(.*)\)/i;
    thi$.getStyle = function(el, sp, currentStyle) {
        if (!el || el === self.document) {
            return null;
        }
        var out;
        sp = this.camelName(sp);
        currentStyle = currentStyle || this.currentStyles(el);
        out = currentStyle[sp];
        if (sp === "marginRight" && out !== "0px" && !J$VM.supports.reliableMarginRight) {
            sp = el.style.display;
            el.style.display = "inline-block";
            out = this.currentStyles(el).marginRight;
            el.style.display = sp;
        } else {
            if (sp === "opacity") {
                if (el.style.filter.match) {
                    out = 1;
                    sp = el.style.filter.match(OPACITYREGX);
                    if (sp) {
                        sp = parseFloat(sp[1]);
                        if (!isNaN(sp)) {
                            out = sp / 100;
                        }
                    }
                }
            }
        }
        return out;
    };
    thi$.getStyles = function(el, sps) {
        var currentStyle = this.currentStyles(el), styles = {};
        (function(sp) {
            styles[this.camelName(sp)] = this.getStyle(el, sp, currentStyle);
        }).$forEach(this, sps || []);
        return styles;
    };
    thi$.getAttribute = function(el, attr) {
        if (!el || el.nodeType !== 1 || !attr) {
            return "";
        }
        var tmp = attr.toLowerCase(), prop = tmp, v;
        if (J$VM.ie && parseInt(J$VM.ie) < 8) {
            prop = ATTRIBUTESCT[attr] || ATTRIBUTESCT[tmp] || attr;
        } else {
            prop = tmp;
        }
        if (J$VM.ie) {
            v = el[prop];
        }
        if (!v) {
            v = el.getAttribute(attr);
        }
        if (BOOLATTRREGEXP.test(tmp)) {
            if (el[prop] === true && v === "") {
                return tmp;
            }
            return v ? tmp : "";
        }
        return v ? "" + v : "";
    };
    thi$.hasAttribute = function(el, attr) {
        return el.hasAttribute ? el.hasAttribute(attr) : Class.isValid(el.getAttribute(attr));
    };
    thi$.setAttribute = function(el, attr, value) {
        if (!el || el.nodeType !== 1 || !attr || J$VM.mobile && attr === "title") {
            return;
        }
        var prop = attr.toLowerCase(), v;
        if (J$VM.ie && parseInt(J$VM.ie) < 8) {
            attr = ATTRIBUTESCT[attr] || ATTRIBUTESCT[prop] || attr;
        } else {
            attr = prop;
        }
        if (BOOLATTRREGEXP.test(prop)) {
            if (Class.isString(value)) {
                v = value.toLowerCase() === "true";
            } else {
                v = value === true;
            }
            if (v) {
                el.setAttribute(attr, "" + v);
            } else {
                el.removeAttribute(attr);
            }
            return;
        }
        v = Class.isValid(value) ? "" + value : "";
        if (v.length > 0) {
            el.setAttribute(attr, v);
        } else {
            el.removeAttribute(attr);
        }
    };
    thi$.removeAttribute = function(el, attr) {
        if (!el || el.nodeType !== 1 || !attr) {
            return;
        }
        var prop = attr.toLowerCase();
        if (J$VM.ie && parseInt(J$VM.ie) < 8) {
            attr = ATTRIBUTESCT[attr] || ATTRIBUTESCT[prop] || attr;
        } else {
            attr = prop;
        }
        el.removeAttribute(attr);
    };
    thi$.setAttributes = function(el, attrObj) {
        if (!el || el.nodeType !== 1 || typeof attrObj !== "object") {
            return;
        }
        var attr;
        for (attr in attrObj) {
            this.setAttribute(el, attr, attrObj[attr]);
        }
    };
    thi$.setOpacity = function(el, value) {
        var style = el.style, currentStyle = el.currentStyle;
        if (J$VM.ie && parseInt(J$VM.ie) < 10) {
            var opacity = isNaN(value) ? "" : "alpha(opacity=" + value * 100 + ")";
            var filter = currentStyle && currentStyle.filter || style.filter || "";
            filter = filter.replace(OPACITYREGX, "").replace(/(^\s*)|(\s*$)/g, "");
            style.zoom = 1;
            var filterVal = new js.lang.StringBuffer();
            filterVal = filterVal.append(filter);
            filterVal = filter.length > 0 ? filterVal.append(" ") : filterVal;
            filterVal = filterVal.append(opacity);
            style.filter = filterVal.toString();
        } else {
            style.opacity = value;
        }
    };
    thi$.clearOpacity = function(el) {
        var style = el.style;
        if (J$VM.ie && parseInt(J$VM.ie) < 10) {
            var filter = style.filter;
            style.filter = filter ? filter.replace(OPACITYREGX, "").replace(/(^\s*)|(\s*$)/g, "") : "";
        } else {
            style.opacity = style["-moz-opacity"] = style["-khtml-opacity"] = "";
        }
    };
    var _setStyle = function(ele, sp, value) {
        if (sp == "opacity") {
            this.setOpacity(ele, value);
        } else {
            sp = this.camelName(sp);
            ele.style[sp] = value;
        }
    };
    thi$.setStyle = function(el, sp, value) {
        var styles = {};
        styles[sp] = value;
        this.applyStyles(el, styles);
    };
    var RECTS = {
        left: true,
        top: true,
        width: true,
        height: true
    };
    thi$.applyStyles = function(ele, styles) {
        var mbpchanged = false, rectchanged = false, sp;
        styles = styles || {};
        for (sp in styles) {
            mbpchanged = mbpchanged || MBPTEST.test(sp);
            rectchanged = rectchanged || RECTS[sp];
            _setStyle.call(this, ele, sp, styles[sp]);
        }
        if (mbpchanged && ele.MBP) {
            ele.MBP.dirty = true;
        }
        if (ele.bounds && (rectchanged || mbpchanged)) {
            ele.bounds.dirty = true;
        }
        return !this.getAttribute(ele, "noncomp") ? this.getBounds(ele) : null;
    };
    thi$.MBPCache = {};
    thi$.MBP = function(ele, nocache) {
        var mbp, clazz;
        if (!ele) {
            return null;
        }
        clazz = ele.className || ele.id;
        mbp = ele.MBP || (clazz ? this.MBPCache[clazz] : null);
        if (mbp && !mbp.dirty && (!nocache || ele.cloned)) {
            if (!ele.MBP) {
                ele.MBP = J$VM.System.objectCopy(mbp, {});
            }
            return mbp;
        }
        mbp = ele.MBP;
        if (!mbp || mbp.dirty) {
            mbp = _calcMBP.call(this, ele);
            if (clazz && !this.MBPCache[clazz]) {
                this.MBPCache[clazz] = J$VM.System.objectCopy(mbp, {});
            }
        }
        return mbp;
    };
    var _calcMBP = function(ele, styles) {
        var mbp = ele.MBP = ele.MBP || {}, z, body, clone;
        if (!this.isDOMElement(ele)) {
            body = self.document.body;
            clone = ele.cloneNode(ele.nodeName === "SPAN" ? true : false);
            clone.style.cssText = [ ele.style.cssText, "visibility:hidden" ].join(";");
            body.appendChild(clone);
            styles = this.currentStyles(clone);
        } else {
            styles = styles || this.currentStyles(ele);
        }
        mbp.BBM = styles.boxSizing ? styles.boxSizing === "border-box" : true;
        z = parseInt(styles.zIndex);
        mbp.zIndex = isNaN(z) ? 0 : z;
        margin(styles, mbp);
        border(styles, mbp);
        padding(styles, mbp);
        mbp.BPW = mbp.BW + mbp.PW;
        mbp.BPH = mbp.BH + mbp.PH;
        mbp.position = styles.position;
        if (clone) {
            body.removeChild(clone);
        }
        mbp.dirty = false;
        return mbp;
    };
    var MBPTEST = /margin|border|padding/;
    var MBPSTYLES = [ {
        style: "borderTopStyle",
        border: "borderTopWidth",
        margin: "marginTop",
        padding: "paddingTop"
    }, {
        style: "borderRightStyle",
        border: "borderRightWidth",
        margin: "marginRight",
        padding: "paddingRight"
    }, {
        style: "borderBottomStyle",
        border: "borderBottomWidth",
        margin: "marginBottom",
        padding: "paddingBottom"
    }, {
        style: "borderLeftStyle",
        border: "borderLeftWidth",
        margin: "marginLeft",
        padding: "paddingLeft"
    } ];
    var parseNumber = function(value) {
        var i = Class.isValid(value) ? Math.round(parseFloat(value)) : 0;
        if (Class.isNumber(i)) {
            return i;
        }
        switch (value.toLowerCase()) {
          case "thin":
            return 1;

          case "medium":
            return 3;

          case "thick":
            return 5;

          default:
            return 0;
        }
    };
    var margin = function(styles, mbp) {
        var i, op;
        for (i = 0; i < 4; i++) {
            op = MBPSTYLES[i];
            mbp[op.margin] = parseNumber(styles[op.margin]);
        }
        mbp.MW = mbp.marginLeft + mbp.marginRight;
        mbp.MH = mbp.marginTop + mbp.marginBottom;
    };
    var border = function(styles, mbp) {
        var i, op, bs;
        for (i = 0; i < 4; i++) {
            op = MBPSTYLES[i];
            bs = styles[op.style].toLowerCase();
            mbp[op.border] = !bs || bs === "none" ? 0 : parseNumber(styles[op.border]);
        }
        mbp.BW = mbp.borderLeftWidth + mbp.borderRightWidth;
        mbp.BH = mbp.borderTopWidth + mbp.borderBottomWidth;
    };
    var padding = function(styles, mbp) {
        var i, op;
        for (i = 0; i < 4; i++) {
            op = MBPSTYLES[i];
            mbp[op.padding] = parseNumber(styles[op.padding]);
        }
        mbp.PW = mbp.paddingLeft + mbp.paddingRight;
        mbp.PH = mbp.paddingTop + mbp.paddingBottom;
    };
    thi$.getBorderWidth = function(ele) {
        return this.MBP(ele);
    };
    thi$.getPadding = function(ele) {
        return this.MBP(ele);
    };
    thi$.getMargin = function(ele) {
        return this.MBP(ele);
    };
    thi$.getBoundRect = function(ele, rect) {
        var r, ftoi = Math.ceil;
        rect = rect || {
            left: 0,
            top: 0,
            right: 0,
            bottom: 0
        };
        rect.valid = false;
        if (this.isDOMElement(ele)) {
            r = ele.getBoundingClientRect();
            rect.left = ftoi(r.left);
            rect.top = ftoi(r.top);
            rect.bottom = ftoi(r.bottom);
            rect.right = ftoi(r.right);
            if (rect.bottom == 0 && rect.right == 0) {
                rect.valid = ele.getClientRects().length > 0;
            } else {
                rect.valid = true;
            }
        }
        return rect;
    };
    var _computeByBody = function() {
        var doctype = J$VM.doctype, fValues = [], b = true, v, table;
        if (doctype.declared) {
            v = doctype.getEigenStr();
            if (v) {
                table = DOCTYPECT[v];
                b = table ? table["bodysize"] || false : false;
            } else {
                b = false;
            }
        }
        return b;
    };
    thi$.outerSize = function(el, rect) {
        rect = rect || {
            left: 0,
            top: 0,
            right: 0,
            bottom: 0
        };
        if (el.tagName !== "BODY") {
            rect = this.getBoundRect(el, rect);
            rect.width = rect.right - rect.left;
            rect.height = rect.bottom - rect.top;
        } else {
            var r = _computeByBody.call(this) ? document.body : document.documentElement;
            rect.left = rect.top = 0;
            rect.right = rect.width = r.clientWidth;
            rect.bottom = rect.height = r.clientHeight;
            rect.valid = true;
        }
        return rect;
    };
    thi$.outerWidth = function(el) {
        return this.outerSize(el).width;
    };
    thi$.outerHeight = function(el) {
        return this.outerSize(el).height;
    };
    thi$.innerSize = function(ele) {
        return this.getBounds(ele);
    };
    thi$.innerWidth = function(el) {
        return this.innerSize(el).width;
    };
    thi$.innerHeight = function(el) {
        return this.innerSize(el).height;
    };
    var _setSize = function(ele, w, h, bounds) {
        var mbp = bounds.MBP, v, canvas = ele.tagName === "CANVAS";
        if (w != bounds.width && Class.isNumber(w)) {
            v = w;
            w = mbp.BBM ? w : w - mbp.BPW;
            if (w >= 0) {
                if (canvas) {
                    ele.width = v;
                } else {
                    ele.style.width = [ w, "px" ].join("");
                }
                bounds.dirty = true;
            }
        }
        if (h != bounds.height && Class.isNumber(h)) {
            v = h;
            h = mbp.BBM ? h : h - mbp.BPH;
            if (h >= 0) {
                if (canvas) {
                    ele.height = v;
                } else {
                    ele.style.height = [ h, "px" ].join("");
                }
                bounds.dirty = true;
            }
        }
        return bounds.dirty;
    };
    thi$.setSize = function(ele, w, h, bounds) {
        bounds = bounds || this.getBounds(ele);
        if (_setSize.call(this, ele, w, h, bounds)) {
            bounds = this.getBounds(ele);
        }
        return bounds;
    };
    thi$.absXY = function(el) {
        var r = this.getBoundRect(el);
        return {
            x: r.left,
            y: r.top
        };
    };
    thi$.absX = function(el) {
        return this.absXY(el).x;
    };
    thi$.absY = function(el) {
        return this.absXY(el).y;
    };
    thi$.offsetXY = function(el, rect) {
        var p = this.getOffsetParent(el), bounds = this.getBoundRect(p);
        bounds.MBP = this.MBP(p);
        bounds.absX = bounds.left;
        bounds.absY = bounds.top;
        bounds.scrollLeft = p.scrollLeft;
        bounds.scrollTop = p.scrollTop;
        rect = rect || this.getBounds(el);
        return this.relative(rect.absX, rect.absY, bounds);
    };
    thi$.offsetX = function(el) {
        return this.offsetXY(el).x;
    };
    thi$.offsetY = function(el) {
        return this.offsetXY(el).y;
    };
    var _setPosition = function(ele, x, y, bounds) {
        if (x !== bounds.x && Class.isNumber(x)) {
            ele.style.left = [ x, "px" ].join("");
            bounds.dirty = true;
        }
        if (y !== bounds.y && Class.isNumber(y)) {
            ele.style.top = [ y, "px" ].join("");
            bounds.dirty = true;
        }
        return bounds.dirty;
    };
    thi$.setPosition = function(ele, x, y, bounds) {
        bounds = bounds || this.getBounds(ele);
        if (_setPosition.call(this, ele, x, y, bounds)) {
            bounds = this.getBounds(ele);
        }
        return bounds;
    };
    thi$.setZ = function(ele, z, bounds) {
        var mbp;
        bounds = bounds || this.getBounds(ele);
        ele.style.zIndex = z;
        bounds.MBP.zIndex = z;
        return bounds;
    };
    thi$.setBounds = function(ele, x, y, w, h, bounds) {
        bounds = bounds || this.getBounds(ele);
        _setPosition.call(this, ele, x, y, bounds);
        _setSize.call(this, ele, w, h, bounds);
        return this.getBounds(ele);
    };
    thi$.getBounds = function(ele, nocache) {
        var bounds, body, clone;
        if (!ele) {
            return null;
        }
        if (!this.isDOMElement(ele)) {
            body = self.document.body;
            clone = ele.cloneNode(ele.nodeName === "SPAN" ? true : false);
            clone.style.cssText = [ ele.style.cssText, "visibility:hidden" ].join(";");
            body.appendChild(clone);
            bounds = ele.bounds = _getBounds.call(this, clone, nocache);
            body.removeChild(clone);
        } else {
            bounds = _getBounds.call(this, ele, nocache);
        }
        return bounds;
    };
    var _getBounds = function(ele, nocache) {
        var bounds, mbp;
        if (!ele) {
            return null;
        }
        bounds = ele.bounds = this.outerSize(ele, ele.bounds);
        bounds.absX = bounds.left;
        bounds.absY = bounds.top;
        bounds.MBP = mbp = this.MBP(ele, nocache);
        bounds.BBM = mbp.BBM;
        bounds.offsetXY = this.offsetXY(ele, bounds);
        bounds = _calcCoords.call(this, ele, bounds);
        bounds = _calcSize.call(this, ele, bounds);
        bounds.dirty = false;
        return this.updateBounds(ele, bounds);
    };
    thi$.updateBounds = function(ele, bounds) {
        bounds.offsetWidth = ele.offsetWidth;
        bounds.offsetHeight = ele.offsetHeight;
        bounds.scrollLeft = ele.scrollLeft;
        bounds.scrollTop = ele.scrollTop;
        bounds.scrollWidth = ele.scrollWidth;
        bounds.scrollHeight = ele.scrollHeight;
        bounds.clientWidth = ele.clientWidth;
        bounds.clientHeight = ele.clientHeight;
        bounds.scroll = this.hasScrollbar(ele, bounds);
        return bounds;
    };
    thi$.validBounds = function(bounds) {
        return bounds.MBP && bounds.valid;
    };
    var _calcCoords = function(ele, bounds) {
        var mbp = bounds.MBP, xy = bounds.offsetXY, pMBP;
        bounds.offsetX = xy.x;
        bounds.offsetY = xy.y;
        bounds.x = bounds.offsetX - mbp.marginLeft;
        bounds.y = bounds.offsetY - mbp.marginTop;
        if (!this.isDOMElement(ele)) {
            return bounds;
        }
        if (mbp.position === "relative") {
            pMBP = this.MBP(this.getOffsetParent(ele));
            bounds.x -= pMBP.paddingLeft;
            bounds.y -= pMBP.paddingTop;
        }
        return bounds;
    };
    var _calcSize = function(ele, bounds) {
        var mbp = bounds.MBP;
        if (bounds.valid) {
            bounds.innerWidth = bounds.width - mbp.BPW;
            bounds.innerHeight = bounds.height - mbp.BPH;
        } else {
            bounds.innerWidth = bounds.width;
            bounds.innerHeight = bounds.height;
        }
        if (bounds.BBM) {
            bounds.styleW = bounds.width;
            bounds.styleH = bounds.height;
        } else {
            bounds.styleW = bounds.innerWidth;
            bounds.styleH = bounds.innerHeight;
        }
        return bounds;
    };
    thi$.hasScrollbar = function(el, bounds) {
        var mbp = bounds ? bounds.MBP : this.MBP(el), vbw = el.offsetWidth - el.clientWidth - mbp.BW, hbw = el.offsetHeight - el.clientHeight - mbp.BH;
        return {
            vbw: vbw,
            hbw: hbw,
            vscroll: vbw > 1,
            hscroll: hbw > 1
        };
    };
    thi$.removeFun = function(el) {
        if (!el) {
            return;
        }
        if (el.nodeType == 1) {
            var handlers = el.__handlers__, eventType;
            if (handlers) {
                for (eventType in handlers) {
                    Event.detachEvent(el, eventType);
                }
            }
            el.__handlers__ = undefined;
            el.bounds = undefined;
        }
        var a = el.attributes, i, l, n;
        if (a) {
            for (i = a.length - 1; i >= 0; i--) {
                n = a[i].name;
                if (typeof el[n] === "function") {
                    el[n] = null;
                }
            }
        }
        a = el.childNodes;
        if (a) {
            for (i = 0, l = a.length; i < l; i++) {
                arguments.callee(a.item(i));
            }
        }
    };
    thi$.remove = function() {
        var p;
        return function(el, gc) {
            if (!el) {
                return;
            }
            if (gc) {
                this.removeFun(el);
                if (Class.typeOf(el) != "htmlbodyelement") {
                    p = p || document.createElement("DIV");
                    p.appendChild(el);
                    p.innerHTML = "";
                }
            }
            if (el.parentNode) {
                el.parentNode.removeChild(el);
            }
        };
    }();
    thi$.removeFrom = function(el, parentNode) {
        if (!el) {
            return;
        }
        parentNode = parentNode || el.parentNode;
        parentNode.removeChild(el);
    };
    thi$.empty = function(el) {
        if (!el) {
            return;
        }
        while (el.firstChild) {
            this.remove(el.firstChild, true);
        }
        if (el.options && el.tagName === "SELECT") {
            el.options.length = 0;
        }
    };
    thi$.appendTo = function(el, parentNode) {
        if (!el || !parentNode) {
            return;
        }
        parentNode.appendChild(el);
        _fireHtmlEvent.call(this, el, Event.SYS_EVT_ELE_APPEND);
    };
    thi$.insertBefore = function(el, refNode, parentNode) {
        if (!el || !refNode && !parentNode) {
            return;
        }
        if (refNode) {
            refNode.parentNode.insertBefore(el, refNode);
        } else {
            parentNode.appendChild(el);
        }
        _fireHtmlEvent.call(this, el, Event.SYS_EVT_ELE_APPEND);
    };
    thi$.insertAfter = function(el, refNode) {
        if (!el || !refNode) {
            return;
        }
        var parentNode = refNode.parentNode;
        if (!parentNode) {
            return;
        }
        refNode = refNode.nextSibling;
        if (refNode) {
            parentNode.insertBefore(el, refNode);
        } else {
            parentNode.appendChild(el);
        }
        _fireHtmlEvent.call(this, el, Event.SYS_EVT_ELE_APPEND);
    };
    var _fireHtmlEvent = function(el, type) {
        if (el.parentNode instanceof DocumentFragment || !el.uuid || !el.tagName || !this.isDOMElement(el) || el.hasAttribute("noncomp")) {
            return;
        }
        var desktop = J$VM.Runtime.getDesktop(), event;
        if (desktop) {
            event = new js.util.Event(type);
            event.srcElement = el;
            event.setEventTarget(this.getComponent(el));
            desktop.fireHtmlEvent(event);
        }
    };
    thi$.contains = function(el, child, containSelf) {
        if (!el || !child) {
            return false;
        }
        if (el.compareDocumentPosition) {
            var res = el.compareDocumentPosition(child);
            if (containSelf && res === 0) {
                return true;
            } else {
                return res === 20;
            }
        } else {
            if (containSelf && el === child) {
                return true;
            } else {
                return el.contains(child);
            }
        }
    };
    thi$.isDOMElement = function(el) {
        return this.contains(document.body, el, true);
    };
    thi$.toCssText = function(styles) {
        if (!Class.isObject(styles)) {
            return "";
        }
        var p, v, ret = [];
        for (p in styles) {
            if (styles.hasOwnProperty(p)) {
                v = styles[p];
                p = this.hyphenName(p);
                ret.push(p, ":", v, ";");
            }
        }
        return ret.join("");
    };
    thi$.joinMapToCssText = function(styleMap) {
        var HashMap = Class.forName("js.util.HashMap"), buf, keys, p, v;
        if (!styleMap || !(styleMap instanceof HashMap)) {
            return "";
        }
        buf = new js.lang.StringBuffer();
        keys = styleMap.keys();
        for (var i = 0, len = keys.length; i < len; i++) {
            p = keys[i];
            v = styleMap.get(p);
            if (v !== null && v !== undefined) {
                p = this.hyphenName(p);
                buf.append(p).append(":").append(v).append(";");
            }
        }
        return buf.toString();
    };
    thi$.parseCssText = function(css) {
        var String = js.lang.String, styleMap = new (Class.forName("js.util.HashMap"))(), frags, len, tmp, style, value;
        if (!Class.isString(css) || css.length == 0) {
            return styleMap;
        }
        frags = css.split(";");
        len = Class.isArray(frags) ? frags.length : 0;
        for (var i = 0; i < len; i++) {
            tmp = frags[i];
            tmp = tmp ? tmp.split(":") : null;
            if (Class.isArray(tmp)) {
                style = tmp[0];
                value = tmp[1];
                if (Class.isString(style) && style.length > 0) {
                    style = style.trim();
                    value = Class.isString(value) ? value.trim() : "";
                    if (style) {
                        styleMap.put(style, value);
                    }
                }
            }
        }
        return styleMap;
    };
    thi$.rmStyleFromCssText = function(css, style) {
        if (!Class.isString(css) || css.length == 0 || !Class.isString(style) || style.length == 0) {
            return css;
        }
        var styleMap = this.parseCssText(css);
        if (!styleMap.contains(style)) {
            style = this.hyphenName(style);
        }
        styleMap.remove(style);
        return this.joinMapToCssText(styleMap);
    };
    thi$.getStringSize = function(str, txtStyles, wordwrap, width) {
        if (!Class.isString(str) || str.length == 0) {
            return {
                width: 0,
                height: 0
            };
        }
        var System = J$VM.System, textNode, s, sp, styles = {
            position: "absolute",
            left: "-10000px",
            top: "-10000px",
            display: "inline",
            width: "auto",
            height: "auto",
            padding: "0px",
            border: "0px none"
        };
        if (wordwrap === true && width > 0) {
            styles["white-space"] = "nomal";
            styles["width"] = width + "px";
        } else {
            wordwrap = false;
            styles["white-space"] = "nowrap";
        }
        txtStyles = txtStyles || {};
        for (sp in txtStyles) {
            if (!styles[sp] && !sp.match(/[wW]idth|margin|border|padding/)) {
                styles[sp] = txtStyles[sp];
            }
        }
        textNode = this.createElement("SPAN");
        textNode.style.cssText = this.toCssText(styles);
        textNode.innerHTML = js.lang.String.encodeHtml(str, undefined, wordwrap);
        this.appendTo(textNode, document.body);
        s = this.outerSize(textNode);
        this.remove(textNode, true);
        textNode = null;
        if (J$VM.ie) {
            s.width += 1;
        }
        return s;
    };
    thi$.getTextSize = function(ele, wordwrap, width) {
        var tagName = ele ? ele.tagName : null, str, styles;
        switch (tagName) {
          case "DIV":
          case "SPAN":
            str = ele.textContent ? ele.textContent : ele.innerText;
            break;

          case "INPUT":
          case "TEXTAREA":
            str = ele.value;
            break;

          default:
            break;
        }
        if (!Class.isValid(str)) {
            return {
                width: 0,
                height: 0
            };
        }
        styles = this.getStyles(ele, textSps);
        return this.getStringSize(str, styles, wordwrap, width);
    };
    thi$.setHTML = function(el, html) {
        if (J$VM.ie) {
            while (el.firstChild) {
                el.removeChild(el.firstChild);
            }
            try {
                el.innerHTML = "<br />" + html;
                el.removeChild(el.firstChild);
            } catch (e) {
                var tempDiv = this.create("div");
                tempDiv.innerHTML = "<br />" + html;
                var children = tempDiv.childNodes, len = children ? children.length : 0;
                for (var i = 1; i < len; i++) {
                    el.appendChild(children[i]);
                }
            }
        } else {
            el.innerHTML = html;
        }
        return el;
    };
    thi$.getAbsoluteUrl = function() {
        var a;
        return function(url) {
            if (!a) {
                a = document.createElement("a");
            }
            a.href = url;
            return a.href;
        };
    }();
    thi$.addStyle = function(css, doc) {
        doc = doc || document;
        if (!css || !doc) {
            return;
        }
        var head = doc.getElementsByTagName("head")[0], styleElements = head.getElementsByTagName("style"), styleElement, media, tmpEl;
        if (styleElements.length == 0) {
            if (J$VM.ie) {
                doc.createStyleSheet();
            } else {
                tmpEl = doc.createElement("style");
                tmpEl.setAttribute("type", "text/css");
                head.appendChild(tmpEl);
            }
            styleElements = head.getElementsByTagName("style");
        }
        styleElement = styleElements[0];
        media = styleElement.getAttribute("media");
        if (media != null && !/screen/.test(media.toLowerCase())) {
            styleElement.setAttribute("media", "screen");
        }
        if (J$VM.ie) {
            styleElement.styleSheet.cssText += css;
        } else {
            if (J$VM.firefox) {
                styleElement.innerHTML += css;
            } else {
                styleElement.appendChild(doc.createTextNode(css));
            }
        }
    };
    thi$.styleSheets = {};
    thi$.getStyleSheetBy = function(id, href) {
        id = id || null;
        href = href || null;
        var key = id + ":" + href, styleEle, dom = self.document, styleSheet = this.styleSheets[key];
        if (styleSheet) {
            return styleSheet._syncUpdate();
        }
        styleSheet = this._findNativeStyleSheet(id, href);
        if (!styleSheet) {
            if (href) {
                styleEle = dom.createElement("link");
                styleEle.href = href;
                styleEle.rel = "stylesheet";
                styleEle.type = "text/css";
            } else {
                styleEle = dom.createElement("style");
                if (id) {
                    styleEle.id = id;
                }
                styleEle.type = "text/css";
            }
            this.insertBefore(styleEle, dom.getElementById("j$vm"));
            styleSheet = this._findNativeStyleSheet(id, href);
        }
        styleSheet = this.styleSheets[key] = new (Class.forName("js.util.StyleSheet"))(styleSheet);
        return styleSheet;
    };
    thi$.rmvStyleSheetBy = function(id, href) {
        id = id || null;
        href = href || null;
        var key = id + ":" + href, styleEle, dom = self.document, styleSheet = this.styleSheets[key];
        if (styleSheet) {
            this.removeFrom(styleSheet.nativeSheet.ownerNode);
            styleSheet.destroy();
            delete this.styleSheets[key];
        } else {
            styleSheet = this._findNativeStyleSheet(id, href);
            if (styleSheet) {
                this.removeFrom(styleSheet.ownerNode);
            }
        }
    };
    thi$._findNativeStyleSheet = function(id, href) {
        id = id || null;
        href = href || null;
        var styleSheets = self.document.styleSheets, styleSheet, styleEle, ret = [];
        for (var i = 0, len = styleSheets.length; i < len; i++) {
            styleSheet = styleSheets[i];
            styleEle = this.getStyleSheetElement(styleSheet);
            if (!styleEle || id && styleEle.id !== id || href && styleSheet.href !== href) {
                continue;
            }
            ret.push(styleSheet);
        }
        return ret.length > 0 ? ret[ret.length - 1] : null;
    };
    thi$.getStyleSheetElement = function(sheet) {
        return sheet ? sheet.ownerNode || sheet.owningElement : null;
    };
    thi$.setClassName = function(ele, className, prefix) {
        if (!ele) {
            return;
        }
        if (!Class.isString(prefix)) {
            prefix = "jsvm--";
        }
        switch (Class.typeOf(ele)) {
          case "htmlinputelement":
          case "htmltextareaelement":
            prefix = prefix ? prefix + "txt" : "";
            break;

          default:
            prefix = prefix ? prefix + "com" : "";
            break;
        }
        ele.className = [ prefix, className ].join(" ");
    };
    thi$.getClassName = function(ele) {
        var clazz;
        if (!Class.isHtmlElement(ele) || !Class.isString(ele.className)) {
            clazz = ele.classid = ele.classid || ele.uuid || Math.uuid();
        } else {
            clazz = this.splitClassName(ele.className).join(" ");
        }
        return clazz;
    };
    var STATEREG = /(\w+)(_\d{1,4})$/;
    thi$.splitClassName = function(className) {
        className.trim();
        var names = className.split(" "), map = {}, ret = [], name;
        while (names.length > 0) {
            name = names.shift();
            if (STATEREG.test(name)) {
                name = RegExp.$1;
            }
            if (!map[name]) {
                ret.push(name);
            }
        }
        return ret;
    };
    var _combineClassName = function(className, ext, separator) {
        if (!Class.isString(separator)) {
            separator = "_";
        }
        var names = this.splitClassName(className), rst = [], name, tmp;
        for (var i = 0, len = names.length; i < len; i++) {
            name = names[i].trim();
            if (!name || name.indexOf("--") !== -1) {
                continue;
            }
            for (var j = 0, jlen = ext.length; j < jlen; j++) {
                tmp = ext[j].trim();
                if (tmp) {
                    rst.push(name + separator + tmp);
                } else {
                    rst.push(name);
                }
            }
        }
        return rst.join(" ");
    };
    var STATESEGREG = /\s+\$(\S+)/g;
    thi$.combineClassName = function(className, ext, separator) {
        if (!Class.isArray(ext)) {
            if (Class.isValid(ext)) {
                ext = "" + ext;
            }
            if (ext) {
                ext = [ ext ];
            } else {
                ext = [];
            }
        }
        if (className && ext.length > 0) {
            className = _combineClassName.apply(this, arguments);
        }
        return className;
    };
    thi$.stateClassName = function(className, state) {
        var names = [], stateNames = [], sname, str = className.replace(STATESEGREG, function(match, name) {
            if (name) {
                stateNames.push(name);
            }
            return "";
        });
        names = this.splitClassName(str);
        if (stateNames.length === 0) {
            for (var i = names.length - 1; i >= 0; i--) {
                sname = names[i];
                if (!sname || sname.indexOf("--") !== -1) {
                    continue;
                } else {
                    stateNames.push(sname);
                    break;
                }
            }
        }
        if (!isNaN(state) && state != 0) {
            for (var i = 0, len = stateNames.length; i < len; i++) {
                names.push(stateNames[i] + "_" + state);
            }
        }
        return names.join(" ");
    };
    thi$.extractDOMClassName = function(className) {
        return className ? className.replace(STATESEGREG, "") : "";
    };
    thi$.makeUrlPath = function(parent, file) {
        var A = self.document.createElement("A");
        A.href = parent + file;
        return A.href;
    };
    thi$.getEntryID = function(ele) {
        var entries = self.document.querySelectorAll("[jsvm_entry]"), entry, ret;
        if (!ele) {
            ret = entries && entries.length > 0 ? entries[0].getAttribute("jsvm_entry") : ret;
        } else {
            for (var i = 0, len = entries.length; i < len; i++) {
                entry = entries[i];
                if (this.contains(entry, ele, true)) {
                    ret = entry.getAttribute("jsvm_entry");
                    break;
                }
            }
        }
        return ret;
    };
    thi$.getEventTarget = function(ele, XY) {
        var comp = this.getComponent(ele), ret = comp;
        if (comp && comp.G2D) {
            var layer = comp.G2D.curLayer(), xy, shape;
            if (layer) {
                xy = layer.relative(XY);
                shape = comp.G2D.detectShape(xy.x, xy.y);
            }
            ret = shape || layer || comp;
        }
        return ret;
    };
    thi$.createReportComponent = function(ele, def, Runtime) {
        var obj = null;
        def = def || {};
        def.id = ele.id;
        def.stateless = Class.isBoolean(def.stateless) ? def.stateless : true;
        def.className = def.className || ele.className;
        obj = new js.awt.Component(def, Runtime, ele);
        this.setAttribute(obj.view, "noncomp", "true");
        return obj;
    };
    thi$.getComponent = function(ele, create, def, Runtime) {
        var obj = null, uuid, idx, parent, peer, type = Class.typeOf(ele);
        if (!ele || type === "global" || type === "window" || type === "htmldocument") {
            return obj;
        }
        uuid = ele.uuid;
        if (uuid) {
            idx = uuid.lastIndexOf("-cover");
            if (idx != -1) {
                obj = this.getObject(uuid.substring(0, idx));
            } else {
                idx = uuid.lastIndexOf("-capture");
                obj = this.getObject(uuid.substring(0, idx));
            }
            if (!obj) {
                obj = this.getObject(uuid);
            }
        } else {
            if (create) {
                def = def || {};
                def.id = ele.id;
                def.stateless = Class.isBoolean(def.stateless) ? def.stateless : true;
                def.className = def.className || ele.className;
                Runtime = Runtime || function() {
                    var comp = this.getComponent(ele.parentNode);
                    return comp ? comp.Runtime() : null;
                }.call(this);
                obj = new js.awt.Component(def, Runtime, ele);
                var bounds = obj.getBounds();
                obj.setBounds(bounds.x, bounds.y, bounds.width, bounds.height, 4);
            } else {
                obj = this.getComponent(ele.parentNode);
            }
        }
        return obj;
    };
    thi$.getComponentById = function(id) {
        return this.getComponent(self.document.getElementById(id));
    };
    thi$.getOffsetParent = function(ele) {
        if (ele !== document.body) {
            ele = ele.offsetParent || ele.parentNode;
            if (!ele || ele === document) {
                ele = document.body;
            }
        }
        return ele;
    };
    thi$.inside = function(x, y, bounds) {
        var mbp = bounds.MBP, minX, minY, maxX, maxY;
        minX = bounds.absX + mbp.borderLeftWidth;
        maxX = minX + bounds.clientWidth;
        minY = bounds.absY + mbp.borderTopWidth;
        maxY = minY + bounds.clientHeight;
        return x > minX && x < maxX && y > minY && y < maxY;
    };
    thi$.relative = function(x, y, bounds) {
        var mbp = bounds.MBP, body = document.body;
        return {
            x: x - bounds.absX - mbp.borderLeftWidth + bounds.scrollLeft - body.scrollLeft,
            y: y - bounds.absY - mbp.borderTopWidth + bounds.scrollTop - body.scrollTop
        };
    };
    var OFFSETTABLE = [ [ 0, 7, 6 ], [ 1, 8, 5 ], [ 2, 3, 4 ] ];
    var STEP = 10, STEP3 = STEP * 3;
    var offsetIndex0 = function(offset, min, max) {
        var diff = max - min, step = diff >= STEP3 ? STEP : Math.floor(diff / 3);
        if (offset < min + step) {
            return 0;
        } else {
            if (offset > max - step) {
                return 2;
            } else {
                return 1;
            }
        }
    };
    thi$.offsetIndexes = function(x, y, bounds) {
        var xIdx, yIdx;
        yIdx = offsetIndex0(y, bounds.absY, bounds.absY + bounds.height);
        xIdx = offsetIndex0(x, bounds.absX, bounds.absX + bounds.width);
        return [ yIdx, xIdx, OFFSETTABLE[yIdx][xIdx] ];
    };
    var CURSORS = [ "nw-resize", "w-resize", "sw-resize", "s-resize", "se-resize", "e-resize", "ne-resize", "n-resize", "move", "ew-resize", "ns-resize", "default", "pointer", "wait", "help", "text", "crosshair", "auto", "URL:../style/closedhand_8_8.cur" ];
    var capturer;
    var _checkCapturer = function() {
        if (capturer) {
            return;
        }
        capturer = document.createElement("div");
        capturer.id = "mouse-capturer";
        capturer.style.cssText = "position:absolute;";
    };
    thi$.showMouseCapturer = function(bounds, uuid, spot) {
        _checkCapturer();
        if (!bounds) {
            this.setBounds(capturer, 0, 0, 0, 0);
            return;
        }
        capturer.style.cursor = CURSORS[spot];
        capturer.uuid = [ uuid, "-capture" ].join("");
        capturer.spot = spot;
        document.body.appendChild(capturer);
        this.setBounds(capturer, bounds.x, bounds.y, bounds.width, bounds.height);
        this.setZ(capturer, this.LM_ZBASE);
    };
    thi$.isMouseCapture = function(ele) {
        return ele === capturer;
    };
    thi$.DM_ZBASE = 1e3;
    thi$.LM_ZBASE = 1e4;
    thi$.setCursor = function(ele, cursor) {
        if (!ele) {
            return;
        }
        ele.style.cursor = cursorOf(cursor);
    };
    thi$.getCursor = function(ele) {
        return ele ? ele.style.cursor : null;
    };
    var cursorOf = function(index) {
        var ret;
        if (Class.isString(index)) {
            ret = index;
        } else {
            if (Class.isNumber(index)) {
                ret = index >= 0 ? CURSORS[index] : null;
            }
        }
        if (ret && ret.startsWith("URL:")) {
            ret = ret.substring(4);
            ret = [ 'url("', J$VM.env.j$vm_home, ret, '"),auto' ].join("");
        }
        return ret;
    };
    var dirtys = {};
    thi$.setDynamicCursor = function(ele, cursor) {
        if (!ele) {
            return;
        }
        var did = ele.did = ele.did || Math.uuid();
        if (!dirtys[did]) {
            dirtys[did] = {
                cursor: this.getCursor(ele),
                ele: ele
            };
        }
        this.setCursor(ele, cursor);
    };
    thi$.cleanDynamicCursor = function() {
        var data, p;
        for (p in dirtys) {
            data = dirtys[p];
            if (data && data.ele) {
                this.setCursor(data.ele, data.cursor);
            }
        }
        dirtys = {};
    };
    thi$.getMaxZIndex = function(ele) {
        var children = ele.children, zIndex = 0, tmp, e;
        for (var i = 0, len = children.length; i < len; i++) {
            e = children[i];
            tmp = parseInt(this.currentStyles(e, true).zIndex);
            tmp = Class.isNumber(tmp) ? tmp : 0;
            zIndex = Math.max(zIndex, tmp);
        }
        return zIndex;
    };
    thi$.isInScrollbar = function(x, y, ele, bounds) {
        bounds = bounds || this.getBounds(ele);
        var sobj = this.hasScrollbar(ele), MBP = bounds.MBP, tx, ty, b = false;
        if (sobj.vscroll) {
            tx = bounds.absX + bounds.width - MBP.borderRightWidth - MBP.paddingRight;
            b = x >= tx - sobj.vbw && x <= tx && y >= bounds.absY && y <= bounds.absY + bounds.height;
        }
        if (!b && sobj.hscroll) {
            ty = bounds.absY + bounds.height - MBP.borderBottomWidth - MBP.paddingBottom;
            b = x >= bounds.absX && x <= bounds.absX + bounds.width && y >= ty - sobj.hbw && y <= ty;
        }
        return b;
    };
    thi$.autoSelect = function(ele, start, end) {
        var tagName = ele ? ele.tagName : undefined, range;
        tagName = tagName ? tagName.toUpperCase() : null;
        if (!tagName || tagName !== "INPUT" && tagName !== "TEXTAREA") {
            return;
        }
        start = Class.isNumber(start) ? start : 0;
        end = Class.isNumber(end) ? end : ele.value.length;
        if (ele.setSelectionRange) {
            ele.setSelectionRange(start, end);
        } else {
            if (e.createTextRange) {
                range = ele.createTextRange();
                range.collapse(true);
                range.moveStart("character", start);
                range.moveEnd("character", end - start);
                range.select();
            }
        }
        ele.focus();
    };
}.$extend(js.lang.Object);

$package("js.util");

$import("js.util.HashMap");

js.util.MemoryStorage = function(capacity) {
    var CLASS = js.util.MemoryStorage, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class;
    thi$.isMemory = true;
    thi$.length = function() {
        return this.size();
    };
    thi$.key = function(index) {
        return this._keys[index];
    };
    thi$.setItem = function(key, value) {
        if (this.size() >= this.capacity) {
            _reduce.call(this);
        }
        this.put(key, {
            key: key,
            count: 1,
            data: value
        });
    };
    thi$.getItem = function(key) {
        var ele = this.get(key), ret;
        if (ele) {
            ele.count++;
            ret = ele.data;
        }
        return ret;
    };
    thi$.removeItem = function(key) {
        var o = this.remove(key);
        return o ? o.data : undefined;
    };
    var _reduce = function() {
        var array = this.values().sort(function(a, b) {
            return a.count - b.count;
        }), len = Math.floor(this.capacity / 10), tmp;
        len = len < 1 ? 1 : len;
        while (len > 0) {
            tmp = array.shift();
            this.removeItem(tmp.key);
            len--;
        }
    };
    thi$._init = function(capacity) {
        arguments.callee.__super__.call(this);
        this.capacity = Class.isNumber(capacity) ? capacity : 1024;
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.util.HashMap);

$package("js.util");

js.util.Storage = function(storage) {
    var CLASS = js.util.Storage, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class;
    var _check = function() {
        var hasStorage = this._storage != null && this._storage != undefined;
        if (arguments.length > 0) {
            var key = arguments[0];
            if (typeof key === "string" && key.length > 0) {
                return hasStorage;
            } else {
                return false;
            }
        }
        return hasStorage;
    };
    thi$.keys = function() {
        var keys = [];
        if (!this._storage.isMemory) {
            for (var i = 0, len = this.length(); i < len; i++) {
                keys[i] = this._storage.key(i);
            }
        } else {
            keys = this._storage.keys();
        }
        return keys;
    };
    thi$.length = function() {
        var sto = this._storage;
        return _check() ? sto.isMemory ? sto.size() : sto.length : 0;
    };
    thi$.key = function(index) {
        return _check() ? this._storage.key(index) : undefined;
    };
    thi$.setItem = function(key, value) {
        if (!_check.call(this, key)) {
            return;
        }
        var sto = this._storage;
        try {
            sto.removeItem(key);
            switch (Class.typeOf(value)) {
              case "string":
              case "number":
                sto.setItem(key, value);
                break;

              case "object":
              case "array":
                if (sto.isMemory) {
                    sto.setItem(key, value);
                } else {
                    sto.setItem(key, JSON.stringify(value));
                }
                break;

              default:
                break;
            }
        } catch (x) {}
    };
    thi$.getItem = function(key) {
        if (!_check.call(this, key)) {
            return null;
        }
        var value = this._storage.getItem(key);
        if (value) {
            if (Class.typeOf(value) == "string" && (value.indexOf("{") == 0 || value.indexOf("[") == 0)) {
                value = JSON.parse(value);
            }
        }
        return value;
    };
    thi$.removeItem = function(key) {
        if (!_check.call(this, key)) {
            return;
        }
        this._storage.removeItem(key);
    };
    thi$.clear = function() {
        if (!_check.call(this)) {
            return;
        }
        this._storage.clear();
    };
    thi$._init = function(storage) {
        this._storage = storage;
    };
    this._init.apply(this, arguments);
}.$extend(js.lang.Object);

js.util.Storage.getStorage = function(type) {
    var _storage, _storageObj;
    switch (type) {
      case "local":
        try {
            _storage = window.localStorage;
        } catch (x) {}
        break;

      case "session":
        try {
            _storage = window.sessionStorage;
        } catch (e) {}
        break;

      case "memory":
      default:
        _storage = new js.util.MemoryStorage();
        break;
    }
    _storageObj = new js.util.Storage(_storage || new js.util.MemoryStorage());
    return _storageObj;
};

js.util.Cache = function() {
    var CLASS = js.util.Cache, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var local, session, memory;
    thi$.setItem = function(key, value) {
        try {
            local.setItem(key, value);
        } catch (e1) {
            try {
                session.setItem(key, value);
            } catch (e2) {
                memory.setItem(key, value);
            }
        }
    };
    thi$.getItem = function(key) {
        var value = memory.getItem(key);
        value = value ? value : session.getItem(key);
        value = value ? value : local.getItem(key);
        return value;
    };
    thi$._init = function() {
        local = J$VM.storage.local;
        session = J$VM.storage.session;
        memory = J$VM.storage.memory;
    };
    this._init.apply(this, arguments);
}.$extend(js.lang.Object);

$package("js.util");

js.util.Cookie = function(k, v, e, p, d, s) {
    var CLASS = js.util.Cookie, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    thi$.getName = function() {
        return this._name;
    };
    thi$.getValue = function() {
        return this._value;
    };
    thi$.setValue = function(v) {
        this._value = v;
    };
    thi$.getMaxAge = function() {
        return this._maxAge;
    };
    thi$.setMaxAge = function(expiry) {
        this._maxAge = typeof expiry === "number" && !isNaN(expiry) ? expiry * 1e3 : undefined;
    };
    thi$.getPath = function() {
        return this._path;
    };
    thi$.setPath = function(uri) {
        this._path = typeof uri === "string" ? uri : "/";
    };
    thi$.getDomain = function() {
        return this._domain;
    };
    thi$.setDomain = function(pattern) {
        this._domain = typeof pattern === "string" ? pattern.toLowerCase() : undefined;
    };
    thi$.setSecure = function(s) {
        this._secure = s === true ? true : undefined;
    };
    thi$.toString = function() {
        var buf = new js.lang.StringBuffer();
        buf.append(this._name).append("=").append(this._value ? escape(this._value) : "");
        if (typeof this._maxAge === "number") {
            var exp = new Date();
            exp.setTime(exp.getTime() + this._maxAge);
            buf.append(";expire=").append(exp.toGMTString());
        }
        if (this._path) {
            buf.append(";path=").append(this._path);
        }
        if (this._domain) {
            buf.append(";domain=").append(this._domain);
        }
        if (this._secure === true) {
            buf.append(";secure").append(this._secure);
        }
        return buf.toString();
    };
    thi$._init = function(k, v, e, p, d, s) {
        this._name = k;
        this.setValue(v);
        this.setMaxAge(e);
        this.setPath(p);
        this.setDomain(d);
    };
    this._init.apply(this, arguments);
}.$extend(js.lang.Object);

$package("js.util");

$import("js.util.Cookie");

js.util.CookieStorage = function() {
    var CLASS = js.util.CookieStorage, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this.parseCookies();
        return;
    }
    CLASS.__defined__ = true;
    var cookies;
    thi$.setCookie = function(name, value, expire, path, domain, secure) {
        this.add(new js.util.Cookie(name, value, expire, path, domain, secure));
    };
    thi$.getCookie = function(name) {
        var cookie = this.get(name);
        return cookie ? cookie.getValue() : undefined;
    };
    thi$.delCookie = function(name) {
        var cookie = this.get(name);
        if (cookie) {
            this.remove(cookie);
        }
    };
    thi$.add = function(cookie, uri) {
        document.cookie = cookie.toString();
        this.parseCookies();
    };
    thi$.get = function(name) {
        return cookies[name];
    };
    thi$.remove = function(cookie, uri) {
        cookie.setMaxAge(-1);
        this.add(cookie, uri);
    };
    thi$.parseCookies = function() {
        cookies = cookies || {};
        for (var p in cookies) {
            delete cookies[p];
        }
        var vs = document.cookie.split(";"), item, n, v;
        for (var i = 0, len = vs.length; i < len; i++) {
            item = vs[i].split("=");
            n = item[0].trim();
            v = unescape(item[1]);
            cookies[n] = new js.util.Cookie(n, v);
        }
    };
    this.parseCookies();
}.$extend(js.lang.Object);

$package("js.util");

js.util.Locale = function(language, country) {
    var CLASS = js.util.Locale, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var C = js.lang.Class, System = J$VM.System;
    CLASS.getSymbols = function(locale, type) {
        var className, classPath, res, symbols;
        if (locale && locale instanceof CLASS) {
            className = [ "js.text.resources.", locale.toString() ].join("");
            classPath = C._makeClassPath(className);
            if (J$VM.pkgversion && !J$VM.pkgversion[classPath]) {
                className = [ "js.text.resources.", locale.getLanguage().toLowerCase() ].join("");
                classPath = C._makeClassPath(className);
                if (!J$VM.pkgversion[classPath]) {
                    className = "js.text.resources.en_US";
                }
            }
            res = C.forName(className);
            if (C.isString(type)) {
                symbols = res ? res[type] : null;
            } else {
                symbols = res;
            }
        } else {
            throw "The parameter locale must be a js.util.Local object.";
        }
        return symbols;
    };
    CLASS.getDateSymbols = function(locale) {
        return CLASS.getSymbols(locale, "dateSymbols");
    };
    CLASS.getNumberSymbols = function(locale) {
        return CLASS.getSymbols(locale, "numrSymbols");
    };
    thi$.setLanguage = function(language) {
        this.language = C.isString(language) ? language : "";
    };
    thi$.getLanguage = function() {
        return this.language ? this.language.toLowerCase() : "";
    };
    thi$.setCountry = function(country) {
        this.country = C.isString(country) ? country : "";
    };
    thi$.getCountry = function() {
        return this.country ? this.country.toUpperCase() : "";
    };
    thi$.equals = function(locale) {
        return locale && locale.getLanguage() === this.getLanguage() && locale.getCountry() === this.getCountry();
    };
    thi$.toString = function() {
        var language = this.getLanguage(), country = this.getCountry();
        return [ language, country ].join(country ? "_" : "");
    };
    thi$._init = function(language, country) {
        if (!C.isString(language) && !C.isString(country)) {
            var nav = self.navigator, lang = nav.browserLanguage || nav.language;
            lang = lang.replace("-", "_").split("_");
            language = lang[0];
            country = lang.length > 1 ? lang[1] : "";
        }
        this.setLanguage(language);
        this.setCountry(country);
    };
    this._init.apply(this, arguments);
};

$package("js.util");

js.util.Base64 = new function() {
    this.SAFEB64 = F.SAFEB64;
    this.COMMB64 = F.COMMB64;
    this.encode = F.Base64Encode;
    this.decode = F.Base64Decode;
}();

$package("js.util");

js.util.Tools = new function() {
    var Class = js.lang.Class, REGX_PATH = /(.*[/|\\])(.*)/;
    this.parseBoolean = function(v, defaultValue) {
        if (v === "true") {
            return true;
        } else {
            if (v === "false") {
                return false;
            } else {
                if (Class.isBoolean(v)) {
                    return v;
                } else {
                    return defaultValue || false;
                }
            }
        }
    };
    this.parseNumber = function(v, defaultValue) {
        if (Class.isNumber(v)) {
            return v;
        }
        if (v == undefined || v == null) {
            v = Number.NaN;
        } else {
            v = Number(v);
        }
        return !isNaN(v) ? v : defaultValue;
    };
    this.getFilePath = function(path) {
        if (path == null) {
            return path;
        }
        var m = path.match(REGX_PATH);
        return m ? m[1] : "";
    };
    this.checkPath = function(path) {
        if (path == null) {
            return path;
        }
        if (path.lastIndexOf("/") + 1 !== path.length) {
            path = path + "/";
        }
        return path;
    };
    this.getFileName = function(path) {
        if (path == null) {
            return path;
        }
        var m = path.match(REGX_PATH);
        return m ? m[2] : path;
    };
    this.getFileNameWithoutSuffix = function(path) {
        var file = this.getFileName(path);
        if (file == null) {
            return file;
        }
        var p = file.lastIndexOf(".");
        if (p == -1) {
            return file;
        }
        return file.substring(0, p);
    };
    this.getFileSuffix = function(path) {
        if (path == null) {
            return path;
        }
        var p = path.lastIndexOf(".");
        return p != -1 ? path.substring(p) : "";
    };
}();

$package("js.util");

$import("js.util.HashMap");

js.util.StringBreaker = function() {
    var CLASS = js.util.StringBreaker, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        return;
    }
    CLASS.__defined__ = true;
    var C = js.lang.Class, DOM = J$VM.DOM;
    this.orgString;
    this.styles;
    this.cssFont;
    this.cutWithEllipsis;
    this.firstBlock;
    this.custMaxHeight;
    this.singleEllipsisW;
    this.maxCharWidth;
    this.isStrCut;
    this.isWholeBlank;
    var EC = {
        A: true,
        B: true,
        C: true,
        D: true,
        E: true,
        F: true,
        G: true,
        H: true,
        I: true,
        J: true,
        K: true,
        L: true,
        M: true,
        N: true,
        O: true,
        P: true,
        Q: true,
        R: true,
        S: true,
        T: true,
        U: true,
        V: true,
        W: true,
        X: true,
        Y: true,
        Z: true,
        a: true,
        b: true,
        c: true,
        d: true,
        e: true,
        f: true,
        g: true,
        h: true,
        i: true,
        j: true,
        k: true,
        l: true,
        m: true,
        n: true,
        o: true,
        p: true,
        q: true,
        r: true,
        s: true,
        t: true,
        u: true,
        v: true,
        w: true,
        x: true,
        y: true,
        z: true,
        "0": true,
        "1": true,
        "2": true,
        "3": true,
        "4": true,
        "5": true,
        "6": true,
        "7": true,
        "8": true,
        "9": true,
        "`": true,
        "~": true,
        "!": true,
        "@": true,
        "#": true,
        $: true,
        "%": true,
        "^": true,
        "&": true,
        "*": true,
        "(": true,
        ")": true,
        "-": true,
        _: true,
        "=": true,
        "+": true,
        "[": true,
        "]": true,
        "{": true,
        "}": true,
        "\\": true,
        "|": true,
        ";": true,
        ":": true,
        "'": true,
        '"': true,
        ",": true,
        "<": true,
        ">": true,
        ".": true,
        "/": true,
        "?": true
    };
    thi$.refreshBreakInfo = function() {
        this.cssFont = this.getCSSFont(this.styles);
        this.maxCharWidth = this.getStringSize("R", this.styles, this.cssFont).width;
        this.singleEllipsisW = this.getStringSize(".", this.styles, this.cssFont).width;
        this.firstBlock = undefined;
        this.custMaxHeight = 0;
        this.fillBlockChain();
        this.isStrCut = false;
    };
    thi$.doBreak = function(firstLineWidth, firstLineHeight, width, height) {
        if (height == undefined || isNaN(height)) {
            height = 999999;
        }
        firstLineWidth = Math.max(0, firstLineWidth);
        width = Math.max(0, width);
        var rst = {};
        var blocks = [];
        rst.blocks = blocks;
        if (this.orgString === undefined || this.orgString == "") {
            return rst;
        }
        if (width < this.maxCharWidth) {
            return rst;
        }
        _clearTempInfo(this.firstBlock);
        var lineStr = "";
        var lineW = 0;
        var curBlock = this.firstBlock;
        var isBrokeFirst = true;
        var usableWidth = firstLineWidth;
        var breakInfo;
        var preBreakInfo;
        while (curBlock) {
            if (lineW + _blockW(curBlock) <= usableWidth) {
                lineStr += _blockStr(curBlock);
                lineW += _blockW(curBlock);
            } else {
                if (_getBlocksHeight(rst.blocks) + this.custMaxHeight > height) {
                    _dockLastBreakerWhenNoVerSpace.call(this, rst, lineStr);
                    break;
                } else {
                    if (lineStr == "" && usableWidth == width) {} else {
                        var removeInfo = {
                            str: lineStr,
                            removeW: 0
                        };
                        if (!this.isWholeBlank) {
                            removeInfo = this.removeWhiteSpace(lineStr, true);
                        }
                        var block = {
                            str: removeInfo.str,
                            w: lineW - removeInfo.removeW,
                            h: this.custMaxHeight,
                            usableW: usableWidth - lineW
                        };
                        blocks.push(block);
                        rst = {
                            isStrCut: this.isStrCut,
                            blocks: blocks
                        };
                    }
                    if (isBrokeFirst) {
                        if (blocks.length > 0 && blocks[0].str == "") {
                            blocks[0].w = firstLineWidth;
                            blocks[0].isSpace = true;
                        }
                        isBrokeFirst = false;
                        usableWidth = width;
                    }
                    if (usableWidth < _blockW(curBlock) && curBlock.type == "s" && curBlock.cwArray.length > 1) {
                        curBlock = _cutStrBlockToEllips.call(this, curBlock, usableWidth);
                        continue;
                    } else {
                        lineStr = _blockStr(curBlock);
                        lineW = _blockW(curBlock);
                    }
                }
            }
            curBlock = curBlock.next;
        }
        if (lineW > 0) {
            if (_getBlocksHeight(rst.blocks) + this.custMaxHeight > height) {
                _dockLastBreakerWhenNoVerSpace.call(this, rst, lineStr);
            } else {
                var removeInfo = {
                    str: lineStr,
                    removeW: 0
                };
                if (!this.isWholeBlank) {
                    removeInfo = this.removeWhiteSpace(lineStr, true);
                }
                var block = {
                    str: removeInfo.str,
                    w: lineW - removeInfo.removeW,
                    h: this.custMaxHeight,
                    usableW: usableWidth - lineW
                };
                blocks.push(block);
                rst = {
                    isStrCut: this.isStrCut,
                    blocks: blocks
                };
            }
        }
        if (firstLineHeight != undefined && !isNaN(firstLineHeight) && rst.blocks.length > 1) {
            rst.blocks[0].h = firstLineHeight;
        }
        rst.blocks = _removeBlankLine(rst.blocks);
        return rst;
    };
    var _clearTempInfo = function(curBlock) {
        while (curBlock) {
            delete curBlock.str_cut;
            delete curBlock.w_cut;
            curBlock = curBlock.next;
        }
    };
    var _blockStr = function(curBlock) {
        return curBlock.str_cut != undefined ? curBlock.str_cut : curBlock.str;
    };
    var _blockW = function(curBlock) {
        return curBlock.w_cut !== undefined ? curBlock.w_cut : curBlock.w;
    };
    thi$.removeWhiteSpace = function(str, left, right) {
        var rst = {};
        if (str.match(/\S/) == null) {
            rst.str = "";
            rst.removeW = this.singleEllipsisW * str.length;
            return rst;
        }
        var matchObj;
        if (left) {
            matchObj = str.match(/^\s*/g);
            if (matchObj != null) {
                rst.str = str.replace(/^\s*/g, "");
                rst.removeW = this.singleEllipsisW * matchObj[0].length;
            }
        }
        if (right) {
            matchObj = str.match(/\s*$/g);
            if (matchObj != null) {
                rst.str = str.replace(/\s*$/g, "");
                rst.removeW = this.singleEllipsisW * matchObj[0].length;
            }
        }
        return rst;
    };
    thi$.getFitWidthStrInfo = function(w, str, styles, cssFont) {
        w = Math.floor(w);
        var rst = "";
        var realW = 0;
        for (var i = 0, leni = str.length; i < leni; i++) {
            var c = str.charAt(i);
            var sizeInfo = this.getStringSize(c, styles, cssFont);
            if (realW + sizeInfo.width > w) {
                break;
            }
            rst += c;
            realW += sizeInfo.width;
        }
        return {
            str: rst,
            w: realW
        };
    };
    thi$.fillBlockChain = function() {
        this.custMaxHeight = 0;
        var oneChar;
        var info;
        var tempStr = "";
        var curBlock = undefined;
        if (this.orgString.match(/\S/) == null) {
            this.isWholeBlank = true;
        } else {
            this.isWholeBlank = false;
        }
        for (var i = 0, leni = this.orgString.length; i < leni; i++) {
            oneChar = this.orgString.charAt(i);
            if (_isBlockChar(oneChar)) {
                if (tempStr.length > 0) {
                    var preChar = tempStr.charAt(tempStr.length - 1);
                    if (preChar == oneChar) {
                        tempStr += oneChar;
                    } else {
                        curBlock = _createBlockInfo.call(this, tempStr, curBlock);
                        this.custMaxHeight = Math.max(this.custMaxHeight, curBlock.h);
                        tempStr = oneChar;
                    }
                } else {
                    tempStr = oneChar;
                }
            } else {
                if (tempStr.length > 0) {
                    var preChar = tempStr.charAt(tempStr.length - 1);
                    if (_isBlockChar(preChar)) {
                        curBlock = _createBlockInfo.call(this, tempStr, curBlock);
                        this.custMaxHeight = Math.max(this.custMaxHeight, curBlock.h);
                        tempStr = oneChar;
                    } else {
                        tempStr += oneChar;
                    }
                } else {
                    tempStr += oneChar;
                }
            }
        }
        if (tempStr.length > 0) {
            curBlock = _createBlockInfo.call(this, tempStr, curBlock);
            this.custMaxHeight = Math.max(this.custMaxHeight, curBlock.h);
        }
    };
    var _getBlocksHeight = function(blocks) {
        var rst = 0;
        for (var i = 0, leni = blocks.length; i < leni; i++) {
            var block = blocks[i];
            if (block.w != 0) {
                rst += block.h;
            } else {
                if (block.w == 0 && block.usableW == 0 && block.str == "") {
                    rst += block.h;
                }
            }
        }
        return rst;
    };
    var _removeBlankLine = function(rst, width) {
        var newRst = [];
        for (var i = 0, leni = rst.length; i < leni; i++) {
            var block = rst[i];
            if (block.w != 0) {
                newRst.push(block);
            } else {
                if (block.w == 0 && block.usableW == 0 && block.str == "") {
                    newRst.push(block);
                }
            }
        }
        return newRst;
    };
    var _dockLastBreakerWhenNoVerSpace = function(breakers, lineStr) {
        if (breakers.length > 0) {
            var preBreakInfo = breakers[breakers.length - 1];
            if (false) {
                if (preBreakInfo.usableW > this.singleEllipsisW * 3) {
                    var cuttedStr = lineStr.substring(0, cutIndex - 3 + 1);
                    cuttedStr += "...";
                    preBreakInfo.str += cuttedStr;
                } else {
                    _dockEllipsis(preBreakInfo);
                }
                this.isStrCut = true;
            } else {}
        }
    };
    var _dockLastBrekerDirect = function(breakers, lineStr) {
        var fitWidthStrInfo = this.getFitWidthStrInfo(preBreakInfo.usableW, lineStr, this.styles, this.cssFont);
        preBreakInfo.str += fitWidthStrInfo.str;
        preBreakInfo.w += fitWidthStrInfo.w;
        preBreakInfo.usableW -= fitWidthStrInfo.w;
    };
    var _dockEllipsis = function(blockInfo) {
        var usableW = blockInfo.usableW;
        var str = blockInfo.str;
        var ell = "";
        var i = 0;
        while (usableW > this.singleEllipsisW) {
            ell += ".";
            i++;
            usableW -= this.singleEllipsisW;
        }
        while (i <= 3) {
            if (str.length > 0) {
                str = str.substring(0, str.length - 1);
            }
            ell += ".";
            i++;
        }
        blockInfo.str = str + ell;
        blockInfo.w += usableW;
    };
    var _cutStrBlockToEllips = function(block, usableWidth) {
        var str = block.str;
        var strW = 0;
        var cSpcElips;
        var cwArray = block.cwArray;
        var iSpace = 0;
        var useableWidth = usableWidth;
        var cutIndex = 0;
        var ellipseW = this.singleEllipsisW * 3;
        var cutFlag = true;
        iSpace = cwArray[cutIndex];
        while (iSpace <= useableWidth) {
            cutIndex = cutIndex + 1;
            iSpace += cwArray[cutIndex];
        }
        if (iSpace > useableWidth) {
            strW = iSpace - cwArray[cutIndex];
            cutIndex--;
        } else {
            strW = iSpace;
        }
        this.isStrCut = true;
        if (this.cutWithEllipsis) {
            if (strW - cwArray[0] < ellipseW) {
                block.str_cut = "";
                block.w_cut = strW;
            } else {
                cSpcElips = cwArray[cutIndex];
                while (cSpcElips < ellipseW) {
                    cSpcElips += cwArray[--cutIndex];
                }
                var reStr = str.substr(0, cutIndex);
                reStr += "...";
                block.str_cut = reStr;
                block.w_cut = strW;
            }
        } else {
            var reStr = str.substr(0, cutIndex);
            block.str_cut = reStr;
            block.w_cut = strW;
        }
        return block;
    };
    var _unPackStrBlockToEllips = function(block, usableWidth) {
        var str = block.str;
        var cwArray = block.cwArray;
        var firstB;
        var endB;
        var preBlock;
        var iSpace = 0;
        var useableWidth = usableWidth;
        var cutIndex;
        var cutFlag = true;
        var replaceNode;
        for (cutIndex = 0, iSpace = cwArray[cutIndex]; iSpace < useableWidth; cutIndex++) {
            iSpace += cwArray[cutIndex];
        }
        if (cutIndex-- <= 2) {
            block.str = "";
            block.w = 0;
            return block;
        } else {
            for (var i = 0, iSpace = cwArray[i]; iSpace < useableWidth; i++) {
                var cblock = {
                    str: str.charAt(i),
                    cwArray: [ cwArray[i] ],
                    w: cwArray[i],
                    h: block.h,
                    type: block.type,
                    isE: block.isE
                };
                if (preBlock) {
                    preBlock.next = cblock;
                    cblock.pre = preBlock;
                }
                preBlock = cblock;
                if (i == 0) {
                    firstB = cblock;
                }
                endB = cblock;
                iSpace += cwArray[i + 1];
            }
            replaceNode = endB;
            replaceNode.str = ".";
            replaceNode.w = this.singleEllipsisW;
            replaceNode = replaceNode.pre;
            replaceNode.str = "..";
            replaceNode.w = this.singleEllipsisW;
            firstB.pre = block.pre;
            if (firstB.pre) {
                firstB.pre.next = firstB;
            }
            endB.next = block.next;
            if (endB.next) {
                endB.next.pre = endB;
            }
            return firstB;
        }
    };
    var _unPackStrBlockToCharBlock = function(block) {
        var str = block.str;
        var cwArray = block.cwArray;
        var firstB;
        var endB;
        var preBlock;
        for (var i = 0, leni = cwArray.length; i < leni; i++) {
            var cblock = {
                str: str.charAt(i),
                cwArray: [ cwArray[i] ],
                w: cwArray[i],
                h: block.h,
                type: block.type,
                isE: block.isE
            };
            if (preBlock) {
                preBlock.next = cblock;
                cblock.pre = preBlock;
            }
            preBlock = cblock;
            if (i == 0) {
                firstB = cblock;
            }
            if (i == cwArray.length - 1) {
                endB = cblock;
            }
        }
        firstB.pre = block.pre;
        if (firstB.pre) {
            firstB.pre.next = firstB;
        }
        endB.next = block.next;
        if (endB.next) {
            endB.next.pre = endB;
        }
        this.isStrCut = true;
        return firstB;
    };
    var _getCutIndex = function(blockInfo, uasbleW) {
        var cwArray = blockInfo.cwArray;
        var curW = 0;
        var index = -1;
        for (var i = 0, leni = cwArray.length; i < leni; i++) {
            curW += cwArray[i];
            if (curW > uasbleW) {
                break;
            }
            index = i;
        }
        return index;
    };
    var _getChartType = function(c) {
        var rst;
        switch (c) {
          case " ":
            rst = "b";
            break;

          case "	":
            rst = "t";
            break;

          case "\r":
            rst = "r";
            break;

          default:
            rst = "s";
        }
        return rst;
    };
    var _createBlockInfo = function(str, preBlock) {
        var newStr = str.replace(/ /g, ".");
        var firstChart = str.charAt(0);
        var maxHeight = 0;
        var totalW = 0;
        var c;
        var sizeInfo;
        var cwArray = [];
        for (var i = 0, leni = str.length; i < leni; i++) {
            c = str.charAt(i);
            sizeInfo = this.getStringSize(c, this.styles, this.cssFont);
            cwArray.push(sizeInfo.width);
            maxHeight = Math.max(sizeInfo.height, maxHeight);
            totalW += sizeInfo.width;
        }
        var rst = {
            str: str,
            cwArray: cwArray,
            w: totalW,
            h: maxHeight,
            type: _getChartType(firstChart),
            isE: _isEnglish(firstChart)
        };
        if (preBlock) {
            preBlock.next = rst;
            rst.pre = preBlock;
        }
        if (this.firstBlock == undefined) {
            this.firstBlock = rst;
        }
        return rst;
    };
    thi$.getStringSize = function(str, styles, cssFont) {
        if (J$VM.supports.canvas) {
            var rst = {};
            var canvas = document.getElementById("calSizeCanvas");
            if (canvas == undefined) {
                canvas = document.createElement("Canvas");
                canvas.id = "calSizeCanvas";
                canvas.style.visibility = "hidden";
                canvas.style.width = "0px";
                canvas.style.height = "0px";
                DOM.appendTo(canvas, document.body);
            }
            var ctx = canvas.getContext("2d");
            var fontInfo = cssFont;
            if (fontInfo == undefined) {
                fontInfo = this.getCSSFont(styles);
            }
            ctx.font = fontInfo.css;
            rst.width = ctx.measureText(str).width;
            rst.height = fontInfo.intFontSize + 3;
            return rst;
        } else {
            return DOM.getStringSize(str, styles);
        }
    };
    thi$.getCSSFont = function(styles) {
        var fontFamily = styles.fontFamily || "Arial";
        var fontVariant = styles.fontVariant || "normal";
        var fontSize = styles.fontSize ? styles.fontSize : styles["font-size"] ? styles["font-size"] : "12px";
        var intFontSize = parseInt(fontSize.replace("px", ""));
        var fontStyle = styles.fontStyle || "normal";
        var fontWeight = styles.fontWeight || "normal";
        var font = new (C.forName("js.awt.Font"))(fontFamily, fontSize, fontStyle, fontWeight, fontVariant);
        return {
            css: font.toString(),
            intFontSize: intFontSize
        };
    };
    var _isEnglish = function(c) {
        if (EC[c] !== undefined) {
            return EC[c];
        } else {
            return false;
        }
    };
    var _isBlockChar = function(c) {
        if (!_isEnglish(c)) {
            return true;
        } else {
            if (c.match(/\s/)) {
                return true;
            } else {
                return false;
            }
        }
    };
};

$package("js.net");

js.net.URI = function(url) {
    var CLASS = js.net.URI, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Keys = [ "source", "scheme", "userInfo", "user", "password", "host", "port", "path", "query", "fragment" ], schemeRegExp = /^(?:([-+a-zA-Z0-9]+):\/\/|\/\/)/i, userInfoRegExp = /^(?:([^:@\/?\s]+))(:(?:[^:@\/?\s]+))?@/i, hostRegExp = /^((?:[^;:@=\/\?\.\s]+\.)+[A-Za-z0-9\-]{1,}|localhost)/i, regNameRegExp = /^([^;:@=\/\?\#\.\s]+)/i, noSchemeRegNameRegExp = /^([^;:@=\/\?\#\.\s]+)(?=:\d+)/i, portRegExp = /^:(\d+)/, pathRegExp = /^\.*\/[^?#]*/i, queryRegExp = /^\?([^#]*)/i, fragmentRegExp = /^#(.+)/i, QueryRegExp = new RegExp("(?:^|&)([^&=]*)=?([^&]*)", "g"), regExps = [ schemeRegExp, userInfoRegExp, hostRegExp, portRegExp, pathRegExp, queryRegExp, fragmentRegExp ], REGX_PATH = /(.*[/|\\])(.*)/;
    thi$.parseURI = function(uri) {
        if (!uri) {
            return;
        }
        var curUri = uri, regExp, i = 0, parseFun = function($0, $1, $2, $3) {
            switch (regExp) {
              case schemeRegExp:
                this.scheme = $1;
                break;

              case userInfoRegExp:
                this.userInfo = $0;
                this.user = $1;
                this.password = $2 ? $2.substring(1) : $2;
                break;

              case hostRegExp:
              case regNameRegExp:
              case noSchemeRegNameRegExp:
                this.host = $0;
                break;

              case portRegExp:
                this.port = $1;
                break;

              case pathRegExp:
                this.path = $0;
                break;

              case queryRegExp:
                this.query = $1;
                break;

              case fragmentRegExp:
                this.fragment = $1;
                break;

              default:
                break;
            }
            return "";
        }.$bind(this);
        while (curUri && i < 7) {
            regExp = regExps[i];
            curUri = curUri.replace(regExp, parseFun);
            if (regExp == hostRegExp && !this.host) {
                regExp = this.scheme ? regNameRegExp : noSchemeRegNameRegExp;
                curUri = curUri.replace(regExp, parseFun);
            }
            ++i;
        }
        if (curUri && curUri.search(/\?#/i) == -1 && this.path == undefined && this.query == undefined && this.fragment == undefined) {
            this.path = curUri;
        }
        this.source = uri;
    };
    thi$.parseParams = function(query) {
        var params = {};
        if (query) {
            query.replace(QueryRegExp, function($0, $1, $2) {
                if ($1) {
                    params[$1] = $2;
                }
            });
        }
        return params;
    };
    thi$.toURI = function() {
        var curUri = J$VM.System.getProperty("j$vm_uri") || new CLASS(document.URL), uri = "", query = "", hasQF = false, tmp;
        if (this.host) {
            uri += (this.scheme || "http") + "://";
            uri += this.userInfo || "";
            uri += this.host;
            if (this.port) {
                uri += ":" + this.port;
            }
            if (this.path) {
                uri += this.path;
                hasQF = true;
            }
        } else {
            if (this.path) {
                uri += curUri.scheme + "://" + (curUri.userInfo || "") + curUri.host;
                if (curUri.port) {
                    uri += ":" + curUri.port;
                }
                if (this.path.indexOf("/") == 0) {
                    uri += this.path;
                } else {
                    tmp = (curUri.path || "").match(REGX_PATH);
                    uri += (tmp[1] || "/") + this.path;
                }
                hasQF = true;
            }
        }
        if (hasQF) {
            for (var key in this.params) {
                query += key + "=" + this.params[key] + "&";
            }
            if (query) {
                query = query.substring(0, query.length - 1);
                uri += "?" + query;
            }
            if (this.fragment) {
                uri += "#" + this.fragment;
            }
        }
        return uri;
    };
    thi$.isSameOrigin = function(s) {
        var uri = new CLASS(s || document.URL);
        return this.scheme == uri.scheme && this.host == uri.host && this.port == uri.port;
    };
    thi$._init = function() {
        if (arguments.length === 1) {
            this.scheme = undefined;
            this.userInfo = undefined;
            this.user = undefined;
            this.password = undefined;
            this.host = undefined;
            this.port = undefined;
            this.path = undefined;
            this.query = undefined;
            this.fragment = undefined;
            var A, uri = "";
            try {
                uri = arguments[0];
                while (uri.indexOf("%") > 0) {
                    uri = unescape(uri);
                }
                uri = decodeURI(uri);
                if (J$VM.env.j$vm_isworker !== true) {
                    A = document.createElement("A");
                    A.href = uri;
                    uri = A.href;
                }
            } catch (ex) {
                throw ex;
            }
            this.parseURI(uri);
        } else {
            this.scheme = arguments[0];
            this.userInfo = arguments[1];
            this.host = arguments[2];
            this.port = arguments[3];
            this.path = arguments[4];
            this.query = arguments[5];
            this.fragment = arguments[6];
        }
        this.params = this.parseParams(this.query);
    };
    this._init.apply(this, arguments);
}.$extend(js.lang.Object);

$package("js.awt");

$import("js.util.Event");

js.awt.Event = function(e) {
    var CLASS = js.awt.Event, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var DOM = J$VM.DOM, Event = js.util.Event;
    thi$.eventXY = function() {
        return {
            x: this.clientX,
            y: this.clientY
        };
    };
    thi$.offsetXY = function() {
        return {
            x: this.offsetX,
            y: this.offsetY
        };
    };
    thi$.cancelBubble = function() {
        var _e = this._event;
        if (!(_e instanceof js.util.Event)) {
            if (_e.stopPropagation) {
                _e.stopPropagation();
            } else {
                try {
                    _e.cancelBubble = true;
                } catch (x) {}
            }
        }
        $super(this);
    }.$override(this.cancelBubble);
    thi$.cancelDefault = function() {
        var _e = this._event;
        if (!(_e instanceof js.util.Event)) {
            if (_e.preventDefault) {
                _e.preventDefault();
            } else {
                try {
                    _e.returnValue = false;
                } catch (x) {}
            }
        }
        return $super(this);
    }.$override(this.cancelDefault);
    var isOver = function(type) {
        return Event.W3C_EVT_MOUSE_OVER === type;
    };
    var isOut = function(type) {
        return Event.W3C_EVT_MOUSE_OUT === type;
    };
    var keys = [ "altKey", "ctrlKey", "shiftKey", "metaKey", "keyCode", "button", "pointerId", "pointerType", "clientX", "clientY", "offsetX", "offsetY", "srcElement", "fromElement", "toElement", "_type", "_data", "_target" ], keyslen = keys.length;
    thi$.clone = function(type, data, target) {
        var evt = new CLASS(this), i, key;
        for (i = 0; i < keyslen; i++) {
            key = keys[i];
            evt[key] = this[key];
        }
        if (type) {
            evt.setType(type);
        }
        if (data) {
            evt.setData(data);
        }
        if (target) {
            evt.setEventTarget(target);
        }
        return evt;
    };
    var btns = [ 1, 4, 2, 8, 16 ];
    thi$._init = function(e) {
        var _e = this._event = e || window.event;
        if (e instanceof js.awt.Event) {
            $super(this, _e.type, e._event);
            return;
        }
        $super(this, _e.type, _e);
        if (typeof TouchEvent == "function" && e instanceof TouchEvent) {
            return;
        }
        var ie = _e.stopPropagation == undefined, ff = J$VM.firefox != undefined, domE = document.documentElement, body = document.body;
        this.altKey = _e.altKey || false;
        this.ctrlKey = _e.ctrlKey || false;
        this.shiftKey = _e.shiftKey || false;
        this.metaKey = _e.metaKey || false;
        this.keyCode = ie ? _e.keyCode : _e.which;
        this.button = _e.buttons ? _e.buttons : !J$VM.ie && _e.button >= 0 ? btns[_e.button] : _e.button;
        this.pointerId = _e.pointerId || 0;
        this.pointerType = _e.pointerType || "mouse";
        this.clientX = !isNaN(_e.pageX) ? _e.pageX : _e.clientX + domE.scrollLeft - body.clientLeft;
        this.clientY = !isNaN(_e.pageY) ? _e.pageY : _e.clientY + domE.scrollTop - body.clientTop;
        this.offsetX = ff ? _e.layerX : _e.offsetX;
        this.offsetY = ff ? _e.layerY : _e.offsetY;
        this.srcElement = ie ? _e.srcElement : _e.target;
        this.fromElement = ie ? _e.fromElement : isOver(_e.type) ? _e.relatedTarget : isOut(_e.type) ? _e.target : undefined;
        this.toElement = ie ? _e.toElement : isOut(_e.type) ? _e.relatedTarget : isOver(_e.type) ? _e.target : undefined;
        this.setEventTarget(DOM.getEventTarget(this.srcElement, this.eventXY()));
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.util.Event);

$package("js.awt");

js.awt.ComponentFactory = function(System) {
    var CLASS = js.awt.ComponentFactory, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init();
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class;
    thi$.registerClass = function(wClass) {
        var className = wClass.className;
        if (this._classes[className] == undefined) {
            this._classes[className] = wClass;
        } else {
            throw new Error("The class definition " + className + " is existed.");
        }
        return className;
    };
    thi$.unRegisterClass = function(className) {
        delete this._classes[className];
    };
    thi$.getClass = function(className, nocache) {
        var _wClass = this._classes[className], wClass;
        if (_wClass == undefined) {
            throw "Can not found the wClass with name " + className;
        }
        return nocache === true ? _wClass : System.objectCopy(_wClass, {}, true);
    };
    thi$.hasClass = function(className) {
        return Class.isObject(this._classes[className]);
    };
    thi$.createComponent = function(className, opitons, Runtime) {
        var comp, wClass = this.getClass(className);
        wClass = System.objectCopy(opitons || {}, wClass, true, true);
        comp = new (Class.forName(wClass.classType))(wClass, Runtime);
        return comp;
    };
    thi$._init = function() {
        this._classes = {};
    };
    this._init();
};

js.lang.Service = function(def, Runtime) {
    var CLASS = js.lang.Service, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event;
    thi$.sendBrowserInfo = function() {};
    thi$.destroy = function() {
        $super(this);
    }.$override(this.destroy);
    thi$._init = function(def, Runtime) {
        if (def === undefined) {
            return;
        }
        this.uuid("service");
        def.__contextid__ = "runtime";
        $super(this);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.util.EventTarget);

js.lang.Runtime = function(System) {
    var CLASS = js.lang.Runtime, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event;
    thi$.registerService = function(service) {
        this._service = service;
    };
    thi$.getService = function() {
        var service = this._service;
        if (!service) {
            service = this._service = new js.lang.Service({}, this);
        }
        return service;
    };
    thi$.registerDesktop = function(desktop) {
        this._desktop = desktop;
    };
    thi$.getDesktop = function() {
        return this._desktop;
    };
    var procs = [];
    thi$.exec = function(entryId, fn) {
        procs.push({
            entry: entryId,
            fn: fn
        });
    };
    var scopes = J$VM.runtime = {};
    thi$._execProcs = function() {
        var proc, scope, entry;
        while (procs.length > 0) {
            proc = procs.shift();
            entry = proc.entry;
            if (entry) {
                scope = scopes[entry] = scopes[entry] || _newScope.call(this, entry);
            } else {
                scope = this;
            }
            (function(scope, proc) {
                proc.fn.call(scope, proc.entry);
            }).$delay(this, 0, scope, proc);
        }
    };
    var _newScope = function(entryId) {
        var runtimeScope = function() {
            this.getEntryID = function() {
                return entryId;
            };
            this.createApp = function(def) {
                var app = new appPromise(this);
                _createApp.call(this, entryId, def, app);
                return app;
            };
            this.getApp = function() {
                return this.Application;
            };
            var _createApp = function(entryId, def, promise) {
                def = def || {
                    zorder: true
                };
                def.classType = def.classType || "js.awt.Application";
                var appClass = Class.forName(def.classType), app;
                (function() {
                    app = new appClass(def, this, entryId);
                    promise.done(app);
                }).$delay(this, 1);
            };
            var appPromise = function(runtime) {
                var tasks = [];
                this.startApp = function() {
                    this.run();
                };
                this.run = function(fn) {
                    if (Class.isFunction(fn)) {
                        tasks.push(fn);
                    }
                    return this;
                };
                this.done = function(app) {
                    runtime.Application = app;
                    runtime.getDesktop().registerApp(runtime.getEntryID(), app);
                    app.startApp();
                    while (tasks.length > 0) {
                        tasks.shift().call(app);
                    }
                };
            };
        };
        runtimeScope.prototype = this;
        runtimeScope = js.lang.Object.$decorate(new runtimeScope());
        runtimeScope.uuid(this.uuid() + "_" + entryId);
        runtimeScope.setContextID(this.uuid());
        runtimeScope.putContextAttr("runtime", runtimeScope);
        return runtimeScope;
    };
    thi$.isEmbedded = function() {
        return self != self.parent;
    };
    thi$.isSamePID = function() {
        if (this.isEmbedded()) {
            var pJ$VM;
            try {
                pJ$VM = self.parent.J$VM;
                return pJ$VM && pJ$VM.Runtime.PID() == this.PID();
            } catch (x) {}
        }
        return false;
    };
    thi$.getProperty = function(key, defValue) {
        return System.getProperty(key, defValue);
    };
    thi$.setProperty = function(key, value) {
        System.setProperty(key, value);
    };
    thi$.prefer = function(prefer) {
        if (Class.isObject(prefer)) {
            this.setProperty("prefer", prefer);
        }
        return this.getProperty("prefer", {});
    };
    thi$.themes = function(themes) {
        if (Class.isArray(themes)) {
            this.setProperty("themes", themes);
        }
        return this.getProperty("themes", [ "default" ]);
    };
    thi$.theme = function(theme) {
        if (Class.isString(theme)) {
            this.setProperty("theme", theme);
        }
        return this.getProperty("theme", "default");
    };
    var _isAbsPath = function(url) {
        return url.indexOf("http") === 0;
    };
    thi$.imagePath = function(imagePath) {
        if (Class.isString(imagePath)) {
            if (!_isAbsPath(imagePath)) {
                imagePath = J$VM.DOM.makeUrlPath(J$VM.env.j$vm_home, imagePath);
            }
            this.setProperty("imagePath", imagePath);
        }
        return this.getProperty("imagePath", J$VM.DOM.makeUrlPath(J$VM.env.j$vm_home, "../style/" + this.theme() + "/images/"));
    };
    thi$.imageUrl = function(imageName) {
        var images = J$VM.env.images;
        return images && images[imageName] ? images[imageName] : this.imagePath() + imageName;
    };
    thi$.PID = function(pid) {
        if (Class.isString(pid)) {
            this.setProperty("j$vm_pid", pid);
        }
        return this.getProperty("j$vm_pid", "");
    };
    thi$.postEntry = function(entry) {
        if (Class.isString(entry)) {
            if (!_isAbsPath(entry)) {
                entry = J$VM.DOM.makeUrlPath(J$VM.env.j$vm_home, entry);
            }
            this.setProperty("postEntry", entry);
        }
        return this.getProperty("postEntry", J$VM.DOM.makeUrlPath(J$VM.env.j$vm_home, this.PID() + ".vt"));
    };
    thi$.getsEntry = function(entry) {
        if (Class.isString(entry)) {
            if (!_isAbsPath(entry)) {
                var home = J$VM.env.j$vm_home;
                entry = J$VM.DOM.makeUrlPath(home, entry);
            }
            this.setProperty("getsEntry", entry);
        }
        return this.getProperty("getsEntry", J$VM.DOM.makeUrlPath(J$VM.env.j$vm_home, "../../vt"));
    };
    thi$.nlsText = function(text, defVal) {
        return defVal;
    };
    thi$.message = function(type, subject, content, title, rect, handler) {
        var msgbox = {
            className: "jmsgbox msgbox $jmsgbox $msgbox",
            model: {
                msgType: type,
                title: title || "",
                msgSubject: subject || "",
                msgContent: content || " "
            }
        };
        this.getDesktop().openDialog("message", rect || {}, new js.awt.MessageBox(msgbox, this), handler);
    };
    thi$.initialize = function(env) {
        System.getProperties().addAll(env || {});
        if (env.postEntry) {
            this.postEntry(env.postEntry);
        }
        if (env.getsEntry) {
            this.getsEntry(env.getsEntry);
        }
        if (env.imagePath) {
            this.imagePath(env.imagePath);
        }
    };
    thi$.destroy = function() {
        if (this._service) {
            this._service.destroy();
            this._service = null;
        }
        if (this._desktop) {
            this._desktop.destroy();
            this._desktop = null;
        }
        procs = null;
        scopes = null;
        $super(this);
    }.$override(this.destroy);
    thi$._init = function(system) {
        System = system;
        arguments.callee.__super__.call(this, {
            uuid: "runtime"
        }, this);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.util.EventTarget);

js.lang.System = function(env, vm) {
    var props, lastAccessTime;
    this.currentTimeMillis = function() {
        return new Date().getTime();
    };
    this.hasProperty = function(key) {
        return props.contains(key);
    };
    this.getProperties = function() {
        return props;
    };
    this.getProperty = function(key, defaultValue) {
        return props.getProperty(key, defaultValue);
    };
    this.setProperty = function(key, value) {
        props.setProperty(key, value);
        return this.getProperty(key);
    };
    this.removeProperty = function(key) {
        return props.remove(key);
    };
    this.out = {
        println: function(s) {
            console.info(s);
        }
    };
    this.err = {
        println: function(s) {
            console.error(s);
        }
    };
    this.log = {
        println: function(s) {
            props.getProperty("j$vm_log", false) ? console.log(s) : F.noop();
        },
        time: function(label) {
            props.getProperty("j$vm_log", false) ? console.time(label) : F.noop();
        },
        timeEnd: function(label) {
            props.getProperty("j$vm_log", false) ? console.timeEnd(label) : F.noop();
        },
        count: function(label) {
            props.getProperty("j$vm_log", false) ? console.count(label) : F.noop();
        },
        trace: function(label) {
            props.getProperty("j$vm_log", false) ? console.trace(label) : F.noop();
        }
    };
    this.exit = function() {
        this.gc();
        window.open("", "_self");
        window.close();
    };
    var _notifyActivatingFrames = function() {
        (function(iframe) {
            if (iframe.getAttribute("jsvm_msgpeer")) {
                J$VM.MQ.post("-j$vm-activating", null, null, iframe.contentWindow);
            }
        }).$forEach(this, J$VM.DOM.getElementsByTagName("iframe"));
    };
    var _notifyActivatingParent = function() {
        J$VM.MQ.post("-j$vm-activating", null, null, self.parent);
    };
    var _last = 0;
    this.updateLastAccessTime = function(e, source) {
        var now = this.currentTimeMillis();
        if (now - _last < 1e3) {
            return;
        }
        _last = now;
        lastAccessTime = this.currentTimeMillis();
        if (vm.env.j$vm_isworker) {
            return;
        }
        if (!source || source !== self.parent) {
            _notifyActivatingFrames.call(this);
            if (this.isEmbedded) {
                _notifyActivatingParent.call(this);
            }
        } else {
            _notifyActivatingFrames.call(this);
        }
    };
    this.getLastAccessTime = function() {
        return lastAccessTime;
    };
    this.getMaxInactiveInterval = function() {
        return this.getProperty("j$vm_max_inactive", 18e5);
    };
    this.setMaxInactiveInterval = function(interval) {
        this.setProperty("j$vm_max_inactive", interval);
    };
    this.objectCopy = function(src, des, deep, merge) {
        var Class = js.lang.Class, item;
        switch (Class.typeOf(src)) {
          case "object":
            des = des === null || des === undefined ? {} : des;
            for (var p in src) {
                item = src[p];
                if (deep === true) {
                    if (src._transient && src._transient[p]) {
                        continue;
                    }
                    switch (Class.typeOf(item)) {
                      case "object":
                        if (merge === true) {
                            des[p] = this.objectCopy(item, des[p], deep, merge);
                        } else {
                            des[p] = this.objectCopy(item, null, deep);
                        }
                        break;

                      case "array":
                        des[p] = this.arrayCopy(item, 0, [], 0, item.length, deep);
                        break;

                      default:
                        des[p] = item;
                    }
                } else {
                    des[p] = item;
                }
            }
            break;

          case "array":
            des = this.arrayCopy(src, 0, des, 0, src.length, deep);
            break;

          default:
            des = src;
            break;
        }
        return des;
    };
    this.arrayCopy = function(src, srcPos, des, desPos, length, deep) {
        var Class = js.lang.Class, srcIdx = srcPos, desIdx = desPos, item;
        des = des === null || des === undefined ? [] : des;
        for (var i = 0; i < length; i++) {
            if (srcIdx > src.length - 1) {
                break;
            }
            item = src[srcIdx];
            if (deep === true) {
                switch (Class.typeOf(item)) {
                  case "object":
                    des[desIdx++] = this.objectCopy(item, null, deep);
                    break;

                  case "array":
                    des[desIdx++] = this.arrayCopy(item, 0, [], 0, item.length, deep);
                    break;

                  default:
                    des[desIdx++] = item;
                    break;
                }
            } else {
                des[desIdx++] = item;
            }
            srcIdx++;
        }
        return des;
    };
    var _buildEnv = function() {
        var script = document.getElementById("j$vm");
        if (script) {
            var attrs = script.attributes, uri, name, value, params, p;
            for (var i = 0, len = attrs.length; i < len; i++) {
                name = attrs[i].nodeName;
                value = attrs[i].value;
                switch (name) {
                  case "src":
                  case "crs":
                    value = script.src || script.getAttribute("crs");
                    uri = new js.net.URI(value);
                    this.setProperty("j$vm_uri", uri);
                    params = uri.params;
                    for (p in params) {
                        this.setProperty(p, params[p]);
                    }
                    value = script.getAttribute("crs") || script.src;
                    if (value.indexOf("http") !== 0) {
                        var srcpath = script.src;
                        p = srcpath.lastIndexOf("/");
                        srcpath = srcpath.substring(0, p + 1);
                        value = srcpath + value;
                    }
                    p = value.lastIndexOf("/");
                    uri = document.createElement("A");
                    uri.href = value.substring(0, p + 1);
                    this.setProperty("j$vm_home", uri.href);
                    vm.j$vm_home = uri.href;
                    break;

                  case "classpath":
                    value = value.replace(/(\s*)/g, "");
                    this.setProperty("j$vm_classpath", value);
                    break;

                  default:
                    if (name.indexOf("-d") == 0 || name.indexOf("-D") == 0) {
                        var tmp = parseInt(value);
                        value = isNaN(tmp) ? value === "true" ? true : value === "false" ? false : value : tmp;
                        this.setProperty(name.substring(2).toLowerCase(), value);
                    }
                    break;
                }
            }
            vm.uuid("j$vm_" + Math.uuid());
            vm.id = vm.uuid();
        } else {
            throw new Error("Can't not found J$VM home");
        }
    };
    var _onload = function(e) {
        J$VM.System.out.println([ J$VM.__product__, J$VM.__version__, "loading..." ].join(" "));
        J$VM.MQ.post("-j$vm-handshake", {}, null, self.parent);
        var b = vm.storage.session.getItem("j$vm_log");
        if (b === "true") {
            vm.enableLogger();
        } else {
            vm.disableLogger();
        }
        J$VM.DOM.checkDoctype();
        J$VM.DOM.checkBrowser();
        var Runtime = vm.Runtime;
        Runtime.getService().sendBrowserInfo();
        if (js.awt.Desktop) {
            Runtime.registerDesktop(new js.awt.Desktop(vm.Runtime));
        }
        Runtime._execProcs();
    };
    var _onbeforeunload = function() {};
    var _onunload = function(e) {
        self.document.innerHTML = "";
    };
    var getMsgPeer = function(source) {
        var frames = J$VM.DOM.getElementsByTagName("iframe"), peer;
        (function(v) {
            if (v.contentWindow === source) {
                if (!(peer = v.getAttribute("jsvm_msgpeer"))) {
                    peer = v.uuid = v.uuid || Math.uuid();
                    v.setAttribute("jsvm_msgpeer", peer);
                }
                throw F.EOF;
            }
        }).$forEach(this, frames);
        return peer;
    };
    var _onmessage = function(e) {
        var Class = js.lang.Class, srcDev = e._event.source, isLocal = srcDev == self, peer, msg, evt;
        try {
            msg = JSON.parse(e._event.data);
        } catch (x) {}
        if (Class.isArray(msg)) {
            switch (msg[0]) {
              case "-j$vm-handshake":
                if (!isLocal) {
                    peer = getMsgPeer(srcDev);
                    if (peer) {
                        J$VM.MQ.post(msg[0], {}, null, srcDev);
                    } else {
                        this.isEmbedded = true;
                    }
                }
                break;

              case "-j$vm-rpc":
                if (!isLocal) {
                    msg = new js.util.Message(msg[1]);
                    evt = new js.util.Event(msg.type, msg);
                    evt.source = srcDev;
                    evt.msgpeer = getMsgPeer(srcDev);
                    J$VM.MQ.post(evt.getType(), evt);
                }
                break;

              case "-j$vm-activating":
                if (!isLocal) {
                    this.updateLastAccessTime(e, srcDev);
                }
                break;

              default:
                e.message = msg[1];
                J$VM.MQ.post(msg[0], e, msg[2], null, msg[4]);
                break;
            }
        }
    };
    var _enableLogger = function() {
        this.setProperty("j$vm_log", true);
        J$VM.storage.session.setItem("j$vm_log", "true");
        return "J$VM logger is enabled";
    }.$bind(this);
    var _disableLogger = function() {
        this.setProperty("j$vm_log", false);
        J$VM.storage.session.setItem("j$vm_log", "false");
        return "J$VM logger is disabled";
    }.$bind(this);
    this.isLogEnabled = function() {
        return this.getProperty("j$vm_log") == true;
    };
    var _init = function(env, vm) {
        var Event = js.util.Event;
        props = new js.util.Properties(env);
        vm.Class = js.lang.Class;
        vm.MQ = new js.util.Messenger(this);
        vm.Runtime = new js.lang.Runtime(this);
        vm.pkgversion = self.j$vm_pkgversion || {};
        self.j$vm_pkgversion = null;
        vm.__version__ = self.j$vm_version || vm.pkgversion["package.jz"] || Math.uuid();
        self.j$vm_version = null;
        _buildEnv.call(this);
        vm.hwnd = self;
        vm.DOM = new js.util.Document();
        vm.Factory = new js.awt.ComponentFactory(this);
        vm.storage = {
            local: js.util.Storage.getStorage("local"),
            session: js.util.Storage.getStorage("session"),
            memory: js.util.Storage.getStorage("memory"),
            cookie: new js.util.CookieStorage()
        };
        vm.storage.cache = new js.util.Cache();
        vm.storage.images = new js.util.MemoryStorage(this.getProperty("j$vm_images_cachesize", 256));
        vm.enableLogger = _enableLogger;
        vm.disableLogger = _disableLogger;
        vm.exec = vm.Runtime.exec;
        vm.locale = new js.util.Locale();
        Event.attachEvent(self, Event.W3C_EVT_LOAD, 0, this, _onload);
        Event.attachEvent(self, Event.W3C_EVT_UNLOAD, 0, this, _onunload);
        Event.attachEvent(self, Event.W3C_EVT_MESSAGE, 0, this, _onmessage);
    };
    if (env != undefined && vm != undefined) {
        _init.apply(this, arguments);
    }
}.$extend(js.lang.Object);

$package("js.sql");

js.sql.Types = new function() {
    this.BIT = -7;
    this.TINYINT = -6;
    this.SMALLINT = 5;
    this.INTEGER = 4;
    this.BIGINT = -5;
    this.FLOAT = 6;
    this.REAL = 7;
    this.DOUBLE = 8;
    this.NUMERIC = 2;
    this.DECIMAL = 3;
    this.CHAR = 1;
    this.VARCHAR = 12;
    this.LONGVARCHAR = -1;
    this.DATE = 91;
    this.TIME = 92;
    this.TIMESTAMP = 93;
    this.BINARY = -2;
    this.VARBINARY = -3;
    this.LONGVARBINARY = -4;
    this.NULL = 0;
    this.OTHER = 1111;
    this.JAVA_OBJECT = 2e3;
    this.DISTINCT = 2001;
    this.STRUCT = 2002;
    this.ARRAY = 2003;
    this.BLOB = 2004;
    this.CLOB = 2005;
    this.REF = 2006;
    this.DATALINK = 70;
    this.BOOLEAN = 16;
    this.ROWID = -8;
    this.NCHAR = -15;
    this.NVARCHAR = -9;
    this.LONGNVARCHAR = -16;
    this.NCLOB = 2011;
    this.SQLXML = 2009;
    var _sqlMapName = {}, _nameMapsql = {};
    this.getNameBySql = function(sql) {
        return _sqlMapName["" + sql];
    };
    this.getSqlByName = function(name) {
        name = name || "";
        return _nameMapsql[name.toUpperCase()];
    };
    (function() {
        var Class = js.lang.Class, p, v;
        for (p in this) {
            v = this[p];
            if (Class.isNumber(v)) {
                _sqlMapName["" + v] = p;
                _nameMapsql[p] = v;
            }
        }
    }).call(this);
}();

$package("js.math");

js.math.Traveller = new function() {
    this.trave = function(handler, node, level) {
        var nodes;
        level = level || 0;
        handler.apply(node, level);
        if (handler.isLeaf()) {
            return;
        }
        nodes = handler.getMembers();
        for (var i = 0, len = nodes.length; i < len; i++) {
            this.trave(handler, nodes[i], level + 1);
        }
    };
}();

js.math.TraveHandler = function(data) {
    var CLASS = js.math.TraveHandler, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, System = J$VM.System;
    thi$.apply = function(node, level) {
        this.node = node;
        var U = this._local, levels = U.levels, lnodes = levels[level], path, i;
        if (!lnodes) {
            lnodes = levels[level] = [];
        }
        lnodes.push(node);
        if (this.isLeaf()) {
            path = [];
            for (i = 0; i <= level; i++) {
                lnodes = levels[i];
                path.push(lnodes[lnodes.length - 1]);
            }
            U.paths.push(path);
        }
    };
    thi$.getPath = function(index) {
        return this._local.paths[index];
    };
    thi$.getDeepth = function() {
        var U = this._local, levels = U.levels;
        return levels.length;
    };
    thi$.getBreadth = function() {
        var U = this._local, paths = U.paths;
        return paths.length;
    };
    thi$.isLeaf = function() {
        var nodes = this.getMembers();
        return !Class.isArray(nodes);
    };
    thi$.getMembers = function() {
        return this.node.nodes;
    };
    thi$._init = function(data) {
        if (data === undefined) {
            return;
        }
        this._local = {};
        var U = this._local;
        U.levels = [];
        U.paths = [];
    };
    this._init.apply(this, arguments);
};

$package("js.text");

js.text.BigIntTools = function() {
    var CLASS = js.text.BigIntTools, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, System = J$VM.System;
    thi$.parse = function(str) {
        return this.parseBigInt(str);
    };
    thi$.format = function(obj) {
        if (!Class.isBigInt(obj)) {
            return NaN;
        }
        var str = this.patternM.prefix.join("");
        str = str + _toString.call(this, obj);
        str = str + this.patternM.suffix.join(str);
        return str;
    };
    thi$.setPattern = function(pattern) {
        if (pattern.replace(this.reg.all, "") !== "") {
            throw "The pattern is illegal !";
        }
        _initPatternM.call(this);
        var prePart = pattern.match(this.reg.prefix);
        var sufPart = pattern.match(this.reg.suffix);
        var middle = pattern.replace(this.reg.prefix, "");
        var fix = pattern.split(middle);
        middle = middle.replace(/,(?=.*,\.?[#|0])/g, "");
        middle = middle.replace(/,(?!\.?[#|0])/g, "");
        _preparePatternM.call(this, fix, middle);
    };
    var _preparePatternM = function(fix, middle) {
        var allFix = fix.join("");
        var prefix = fix[0].replace("%", "");
        var suffix = fix[fix.length - 1].replace("%", "");
        if (allFix.indexOf("%") != -1) {
            this.patternM.percent = true;
        }
        var c = middle.indexOf(","), d = middle.indexOf("."), cLen = middle.replace(".", "").length, dLen = middle.replace(/.*\./, "").replace(/[^0]/g, "").length;
        if (c !== -1 && d !== -1) {
            if (c < d) {
                this.patternM.commaInterval = d - c - 1;
                this.patternM.decimal = dLen;
            } else {
                this.patternM.decimal = dLen;
            }
        } else {
            if (c !== -1 && d === -1) {
                this.patternM.commaInterval = cLen - c - 1;
            } else {
                if (c === -1 && d !== -1) {
                    this.patternM.decimal = dLen;
                }
            }
        }
        this.patternM.prefix.push(prefix);
        this.patternM.suffix.push(suffix);
    };
    var _toString = function(obj) {
        var str = "", array, negative = obj.negative, c = this.patternM.commaInterval, d = this.patternM.decimal;
        array = this.patternM.percent ? [ 0, 0 ].concat(obj.array) : obj.array;
        for (var i = array.length - 1; i > -1; i--) {
            if ((i + 1) % c === 0 && i !== array.length - 1 && i !== 0) {
                str += ",";
            }
            str += array[i];
        }
        if (d > -1) {
            str += ".";
            for (var j = 0; j < d; j++) {
                str += "0";
            }
        }
        if (this.patternM.percent) {
            str += "%";
        }
        return str === "0" ? str : negative ? "-" + str : str;
    };
    thi$.parseBigInt = function(obj) {
        if (Class.isBigInt(obj)) {
            return obj;
        } else {
            if (Class.isString(obj)) {
                obj.trim();
            }
        }
        return new js.text.BigInt(obj);
    };
    thi$.calculate = function(expression) {
        if (Class.typeOf(expression) === "array") {
            return _calculate.call(this, expression);
        }
        if (Class.typeOf(expression) !== "string") {
            return NaN;
        }
        var result = expression.replace(/\s/g, ""), _expression;
        if (Class.typeOf(arguments[1]) === "object") {
            var params = arguments[1];
            for (var paramName in params) {
                result = result.replace(new RegExp(paramName, "g"), params[paramName]);
            }
        } else {
            if (arguments[1] !== undefined) {
                var _caller = arguments.callee.caller;
                if (this.calMap[_caller] === undefined) {
                    var callerStr = _caller.toString().replace(/\/\*(\*(?!\/)|[^\*])*\*\//g, "");
                    callerStr = callerStr.replace(/\/\/.*/g, "");
                    callerStr = _findTopLevelNested.call(this, callerStr, "{", "}")[0].slice(1, -2);
                    var func = _findFunction.call(this, callerStr);
                    for (var i in func) {
                        callerStr = callerStr.replace(func[i], "");
                    }
                    callerStr = callerStr.replace(/\s/g, "").match(/\.calculate\("[^"]*"(,\w+)+/g);
                    this.calMap[_caller] = callerStr;
                }
                var calExp = this.calMap[_caller], temp, varList;
                for (var k = 0; k < calExp.length; k++) {
                    temp = calExp[k].replace(/\.calculate\(|\s/g, "").split(",");
                    if (temp.shift().replace(/"/g, "") === result) {
                        varList = [ null ].concat(temp);
                        calExp.splice(k, 1);
                        break;
                    }
                }
                if (arguments.length > 1) {
                    for (var i = 1, len = arguments.length; i < len; i++) {
                        result = result.replace(new RegExp(varList[i], "g"), arguments[i]);
                    }
                }
                if (this.calMap[_caller].length === 0) {
                    this.calMap[_caller] = undefined;
                    delete this.calMap[_caller];
                }
            }
        }
        result = _transToPolish.call(this, result);
        return _calculate.call(this, result);
    };
    var _calculate = function(expression) {
        if (Class.typeOf(expression) === "string") {
            return this.parseBigInt(expression);
        }
        if (expression.length < 3) {
            throw "The expression is not right!";
        }
        var e0 = expression[0], e1 = expression[1];
        var ret = Class.typeOf(e1) === "array" ? _calculate.call(this, e1) : e1;
        switch (e0) {
          case "+":
            for (var i = 2, len = expression.length; i < len; i++) {
                if (Class.typeOf(expression[i]) === "array") {
                    ret = this.plus(ret, _calculate.call(this, expression[i]));
                } else {
                    ret = this.plus(ret, expression[i]);
                }
            }
            break;

          case "-":
            for (i = 2, len = expression.length; i < len; i++) {
                if (Class.typeOf(expression[i]) === "array") {
                    ret = this.minus(ret, _calculate.call(this, expression[i]));
                } else {
                    ret = this.minus(ret, expression[i]);
                }
            }
            break;

          case "*":
            for (i = 2, len = expression.length; i < len; i++) {
                if (Class.typeOf(expression[i]) === "array") {
                    ret = this.multiply(ret, _calculate.call(this, expression[i]));
                } else {
                    ret = this.multiply(ret, expression[i]);
                }
            }
            break;

          case "/":
            for (i = 2, len = expression.length; i < len; i++) {
                if (Class.typeOf(expression[i]) === "array") {
                    ret = this.divid(ret, _calculate.call(this, expression[i]));
                } else {
                    ret = this.divid(ret, expression[i]);
                }
            }
            break;

          default:
            break;
        }
        return ret;
    };
    var _transToPolish = function(expression) {
        var s1 = [], s2 = [], temp, ret, _char, _number = "", k;
        for (var i = expression.length - 1; i > -1; i--) {
            _char = expression.charAt(i);
            if (isNaN(+_char) && !_isNegative.call(this, _char, i, expression) && _char !== ".") {
                if (_number !== "") {
                    s1.unshift(_number);
                    _number = "";
                }
                switch (_char) {
                  case "(":
                    k = 0;
                    while (true && k < 100) {
                        if (s2[0] === ")") {
                            s2.shift();
                            break;
                        } else {
                            s1.unshift([ s2.shift(), s1.shift(), s1.shift() ]);
                        }
                        k++;
                    }
                    break;

                  case ")":
                    s2.unshift(_char);
                    break;

                  case "*":
                  case "/":
                    s2.unshift(_char);
                    break;

                  case "+":
                  case "-":
                    k = 0;
                    while (true && k < 100) {
                        if (s2[0] === "*" || s2[0] === "/") {
                            s1.unshift([ s2.shift(), s1.shift(), s1.shift() ]);
                        } else {
                            s2.unshift(_char);
                            break;
                        }
                        k++;
                    }
                    break;
                }
            } else {
                _number = _char + _number;
                if (i === 0) {
                    s1.unshift(_number);
                }
            }
        }
        i = 0;
        while (s2.length !== 0 && i < 100) {
            if (!ret) {
                ret = [ s2.shift(), s1.shift(), s1.shift() ];
            } else {
                ret = [ s2.shift(), ret, s1.shift() ];
            }
            i++;
        }
        if (s1.length === 1) {
            return s1.shift();
        }
        return ret;
    };
    var _isNegative = function(_char, index, expression) {
        if (_char !== "-") {
            return false;
        }
        if (index === 0) {
            return true;
        }
        var preChar = expression.charAt(index - 1);
        if (preChar === "+" || preChar === "-" || preChar === "*" || preChar === "/") {
            return true;
        }
        return false;
    };
    var _findFunction = function(str) {
        var ret = [], s = "\\{", e = "\\}";
        var func = "function.*\\(.*\\)";
        var pattern = s + "[^" + s + e + "]*" + e, flag = true, temp = [], i = 0;
        while (flag) {
            temp = str.match(new RegExp(func + pattern + ";?", "g"));
            if (temp && temp.join("") !== ret.join("")) {
                ret = temp;
                pattern = s + "([^" + s + e + "]|" + pattern + ")*" + e;
            } else {
                flag = false;
            }
        }
        return ret;
    };
    var _findTopLevelNested = function(str, startSymbol, endSymbol) {
        var ret = [], reg = new RegExp(), s = _checkPattern(startSymbol), e = _checkPattern(endSymbol);
        var pattern = s + "[^" + s + e + "]*" + e, flag = true, temp = [], i = 0;
        while (flag) {
            reg.compile(pattern, "g");
            temp = str.match(reg);
            if (temp && temp.join("") !== ret.join("")) {
                ret = temp;
                pattern = s + "([^" + s + e + "]|" + pattern + ")*" + e;
            } else {
                flag = false;
            }
        }
        return ret;
    };
    var _checkPattern = function(pattern) {
        pattern = pattern.replace(/\\/g, "\\\\");
        pattern = pattern.replace(/\//g, "\\/");
        pattern = pattern.replace(/\./g, "\\.");
        pattern = pattern.replace(/\*/g, "\\*");
        pattern = pattern.replace(/\+/g, "\\+");
        pattern = pattern.replace(/\?/g, "\\?");
        pattern = pattern.replace(/\$/g, "\\$");
        pattern = pattern.replace(/\[/g, "\\[");
        pattern = pattern.replace(/\]/g, "\\]");
        pattern = pattern.replace(/\(/g, "\\(");
        pattern = pattern.replace(/\)/g, "\\)");
        pattern = pattern.replace(/\{/g, "\\{");
        pattern = pattern.replace(/\}/g, "\\}");
        pattern = pattern.replace(/\^/g, "\\^");
        pattern = pattern.replace(/\|/g, "\\|");
        return pattern;
    };
    thi$.test = function() {
        var ret, tools = this, v0 = 11111111, v1 = 2, time = 3;
        var s = new Date(), e;
        for (var i = 0; i < 1e3; i++) {
            ret = tools.calculate("(v0*time + v1)*((v0-v1)/time - v0)", v0, v1, time);
        }
        e = new Date();
        System.out.println(ret + "");
        System.out.println(e - s);
        s = new Date();
        for (i = 0; i < 1e3; i++) {
            ret = tools.calculate("(v0*time + v1)*( (v0-v1)/time - v0)", {
                v0: v0,
                v1: v1,
                time: time
            });
        }
        e = new Date();
        System.out.println(ret + "");
        System.out.println(e - s);
        s = new Date();
        for (i = 0; i < 1e3; i++) {
            ret = tools.calculate([ "*", [ "+", [ "*", v0, time ], v1 ], [ "-", [ "/", [ "-", v0, v1 ], time ], v0 ] ]);
        }
        e = new Date();
        System.out.println(ret + "");
        System.out.println(e - s);
        s = new Date();
        v0 = tools.parseBigInt(v0);
        for (i = 0; i < 1e3; i++) {
            ret = v0.multiply(time).plus(v1).multiply(v0.minus(v1).divid(time).minus(v0));
        }
        e = new Date();
        System.out.println(ret + "");
        System.out.println(e - s);
    };
    thi$.plus = function(a, b) {
        var x = this.parseBigInt(a), y = this.parseBigInt(b);
        return x.plus(y);
    };
    thi$.minus = function(a, b) {
        var x = this.parseBigInt(a), y = this.parseBigInt(b);
        return x.minus(y);
    };
    thi$.multiply = function(a, b) {
        var x = this.parseBigInt(a), y = this.parseBigInt(b);
        return x.multiply(b);
    };
    thi$.divid = function(a, b) {
        var x = this.parseBigInt(a), y = this.parseBigInt(b);
        return x.divid(y);
    };
    thi$.divisible = function(a, b) {
        var x = this.parseBigInt(a), y = this.parseBigInt(b);
        return x.divisible(y);
    };
    thi$.mod = function(a, b) {
        var x = this.parseBigInt(a), y = this.parseBigInt(b);
        return x.mod(y);
    };
    thi$.round = function(obj) {
        var o = this.parseBigInt(obj + "");
        return o.round();
    };
    thi$.floor = function(obj) {
        var o = this.parseBigInt(obj + "");
        return o.floor();
    };
    thi$.ceil = function(obj) {
        var o = this.parseBigInt(obj + "");
        return o.ceil();
    };
    thi$.sort = function(array, desc) {
        var temp;
        for (var i = 0, j = array.length; i < j; i++) {
            if (i === j - 1) {
                i = -1;
                j--;
                continue;
            }
            if (this.moreThan(array[i], array[i + 1]) && !desc) {
                temp = array[i];
                array[i] = array[i + 1];
                array[i + 1] = temp;
            } else {
                if (this.lessThan(array[i], array[i + 1]) && desc) {
                    temp = array[i];
                    array[i] = array[i + 1];
                    array[i + 1] = temp;
                }
            }
        }
        return array;
    };
    thi$.a_LessThan_b = function() {
        System.err.println("This method is not deprecated!");
        this.lessThan();
    };
    thi$.a_MoreThan_b = function() {
        System.err.println("This method is deprecated!");
        this.moreThan();
    };
    thi$.a_Equals_b = function() {
        System.err.println("This method is deprecated!");
        this.equals();
    };
    thi$.a_LessOrEqual_b = function() {
        System.err.println("This method is deprecated!");
        this.lessOrEqual();
    };
    thi$.a_MoreOrEqual_b = function() {
        System.err.println("This method is deprecated!");
        this.moreOrEqual();
    };
    thi$.lessThan = function(a, b) {
        var x = this.parseBigInt(a), y = this.parseBigInt(b);
        return x.lessThan(b);
    };
    thi$.moreThan = function(a, b) {
        var x = this.parseBigInt(a), y = this.parseBigInt(b);
        return x.moreThan(b);
    };
    thi$.equals = function(a, b) {
        var x = this.parseBigInt(a), y = this.parseBigInt(b);
        return x.equal(b);
    };
    thi$.lessOrEqual = function(a, b) {
        var x = this.parseBigInt(a), y = this.parseBigInt(b);
        return x.lessOrEqual(b);
    };
    thi$.moreOrEqual = function(a, b) {
        var x = this.parseBigInt(a), y = this.parseBigInt(b);
        return x.moreOrEqual(b);
    };
    var _initPatternM = function() {
        this.patternM = {
            prefix: [],
            commaInterval: 0,
            decimal: -1,
            percent: false,
            suffix: []
        };
    };
    thi$._init = function(pattern) {
        this.reg = {
            prefix: /[^(#|0|,|\.)]*/g,
            suffix: /[^(#|0|,|\.)]*/g,
            middle: /[#|0|,]*\.?[#|0|,]*/,
            all: /[^(#|0|,|\.)]*[#|0|,]*\.?[#|0|,]*[^(#|0|,|\.)]*/
        };
        this.calMap = {};
        _initPatternM.call(this);
        this.setPattern(pattern || "####");
    };
    this._init.apply(this, arguments);
};

js.text.BigInt = function(data) {
    var CLASS = js.text.BigInt, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, System = J$VM.System;
    thi$.toString = function() {
        return this.valueOf();
    }.$override(this.toString);
    thi$.valueOf = function() {
        var str = "", array = this.array, negative = this.negative, decArray = this.decArray;
        for (var i = array.length - 1; i > -1; i--) {
            str += array[i];
        }
        if (decArray.length !== 0) {
            str += ".";
            for (var j = decArray.length - 1; j > -1; j--) {
                str += decArray[j];
            }
        }
        return str === "0" ? str : negative ? "-" + str : str;
    }.$override(this.valueOf);
    thi$.parseBigInt = function(data) {
        if (data === undefined) {
            return new js.text.BigInt();
        } else {
            if (Class.isBigInt(data)) {
                var _new = new js.text.BigInt();
                _new.array = data.array.slice();
                _new.decArray = data.decArray.slice();
                _new.negative = data.negative;
                return _new;
            }
        }
        return new js.text.BigInt(data);
    };
    thi$.plus = function(b) {
        var x = this.parseBigInt(this), y = this.parseBigInt(b);
        var result = this.parseBigInt();
        var decLength = 0, temp;
        if (x.isDecimal() || y.isDecimal()) {
            decLength = Math.max(x.decArray.length, y.decArray.length);
            for (var i = 0; i < decLength; i++) {
                temp = x.decArray.pop();
                x.array.unshift(temp ? temp : 0);
                temp = y.decArray.pop();
                y.array.unshift(temp ? temp : 0);
            }
            checkZero(x.array);
            checkZero(y.array);
        }
        if (x.negative == y.negative) {
            result.array = _plus(x.array, y.array);
            result.negative = x.negative;
        } else {
            if (a_LessThan_b(x.array, y.array)) {
                result.array = _minus(y.array, x.array);
                result.negative = y.negative;
            } else {
                result.array = _minus(x.array, y.array);
                result.negative = x.negative;
            }
        }
        for (var j = 0, len = decLength; j < len; j++) {
            temp = result.array.shift();
            result.decArray.push(temp ? temp : 0);
        }
        if (result.array.length === 0) {
            result.array.push(0);
        }
        checkDecArray.call(this, result.decArray);
        return result;
    };
    var _plus = function(x, y) {
        var ret = [], carry = 0, sum;
        if (x.length < y.length) {
            ret = _plus(y, x);
            return ret;
        }
        for (var i = 0; i < y.length; i++) {
            sum = x[i] + y[i] + carry;
            if (sum > 9) {
                carry = 1;
                ret.push(sum - 10);
            } else {
                carry = 0;
                ret.push(sum);
            }
        }
        for (;i < x.length; i++) {
            sum = x[i] + carry;
            if (sum > 9) {
                carry = 1;
                ret.push(sum - 10);
            } else {
                carry = 0;
                ret.push(sum);
            }
        }
        if (carry) {
            ret.push(carry);
        }
        checkZero(ret);
        return ret;
    };
    thi$.minus = function(b) {
        var y = this.parseBigInt(b + "");
        y.negative = !y.negative;
        return this.plus(y);
    };
    var _minus = function(x, y) {
        var ret = [], borrow = false, _x, _y;
        for (var i = 0, len = y.length; i < len; i++) {
            _x = borrow ? x[i] - 1 : x[i];
            _y = y[i];
            if (_y > _x) {
                borrow = true;
                ret.push(10 + _x - _y);
            } else {
                borrow = false;
                ret.push(_x - _y);
            }
        }
        for (len = x.length; i < len; i++) {
            if (borrow) {
                if (x[i] > 0) {
                    borrow = false;
                    ret.push(x[i] - 1);
                } else {
                    borrow = true;
                    ret.push(10 + x[i] - 1);
                }
            } else {
                ret.push(x[i]);
            }
        }
        checkZero(ret);
        return ret;
    };
    thi$.multiply = function(b) {
        var x = this.parseBigInt(this), y = this.parseBigInt(b);
        var result = this.parseBigInt(), negative = x.negative == y.negative ? false : true;
        var decLength = 0, temp;
        if (x.isDecimal() || y.isDecimal()) {
            decLength = Math.max(x.decArray.length, y.decArray.length);
            for (var i = 0; i < decLength; i++) {
                temp = x.decArray.pop();
                x.array.unshift(temp ? temp : 0);
                temp = y.decArray.pop();
                y.array.unshift(temp ? temp : 0);
            }
            checkZero(x.array);
            checkZero(y.array);
        }
        if (a_MoreOrEqual_b(x.array, y.array)) {
            result.array = _multiply(x.array, y.array);
        } else {
            result.array = _multiply(y.array, x.array);
        }
        for (var j = 0, len = decLength * 2; j < len; j++) {
            temp = result.array.shift();
            result.decArray.push(temp ? temp : 0);
        }
        if (result.array.length === 0) {
            result.array.push(0);
        }
        checkDecArray.call(this, result.decArray);
        result.negative = negative;
        return result;
    };
    var _multiply = function(x, y) {
        var array = [ 0 ], innerArray, temp, carry = 0;
        for (var i = 0; i < y.length; i++) {
            innerArray = [];
            if (y[i] === 0) {
                continue;
            }
            for (var k = 0; k < i; k++) {
                innerArray.push(0);
            }
            for (var j = 0; j < x.length; j++) {
                temp = y[i] * x[j] + carry;
                if (temp > 9) {
                    carry = parseInt(temp / 10, 10);
                    innerArray.push(temp % 10);
                } else {
                    carry = 0;
                    innerArray.push(temp);
                }
            }
            if (carry) {
                innerArray.push(carry);
                carry = 0;
            }
            array = _plus(array, innerArray);
        }
        return array;
    };
    thi$.divid = function(b) {
        var y = this.parseBigInt(b);
        if (isZero(this) && isZero(y)) {
            return NaN;
        }
        if (isZero(y)) {
            return !this.negative === y.negative ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;
        }
        if (isZero(this)) {
            return this.parseBigInt(0);
        }
        var result = this.divid_mod(y), modStr = result.mod.toString(), x = result.mod;
        var decLength = 0, temp;
        if (x.isDecimal() || y.isDecimal()) {
            decLength = Math.max(x.decArray.length, y.decArray.length);
            for (var i = 0; i < decLength; i++) {
                temp = x.decArray.pop();
                x.array.unshift(temp ? temp : 0);
                temp = y.decArray.pop();
                y.array.unshift(temp ? temp : 0);
            }
            checkZero(x.array);
            checkZero(y.array);
        }
        if (modStr !== "0") {
            var decPart = this.parseBigInt(x + "0000000000000000");
            temp = decPart.divisible(y).array;
            for (var i = 0, len = temp.length; i < 16 - len; i++) {
                temp.push(0);
            }
            result.ret.decArray = temp;
            checkDecArray.call(this, result.ret.decArray);
        }
        return result.ret;
    };
    thi$.divisible = function(b) {
        return this.divid_mod(b).ret;
    };
    thi$.mod = function(b) {
        return this.divid_mod(b).mod;
    };
    thi$.divid_mod = function(b) {
        var x = this.parseBigInt(this), y = this.parseBigInt(b);
        var result, mod, negative, flag = true;
        var decLength = Math.max(x.decArray.length, y.decArray.length), temp;
        if (x.isDecimal() || y.isDecimal()) {
            for (var i = 0; i < decLength; i++) {
                temp = x.decArray.pop();
                x.array.unshift(temp ? temp : 0);
                temp = y.decArray.pop();
                y.array.unshift(temp ? temp : 0);
            }
            checkZero(x.array);
            checkZero(y.array);
        }
        if (x.negative == y.negative) {
            negative = false;
        } else {
            negative = true;
        }
        if (isZero(x) && isZero(y)) {
            return {
                ret: NaN,
                mod: NaN
            };
        }
        if (isZero(y)) {
            return negative ? {
                ret: Number.NEGATIVE_INFINITY,
                mod: NaN
            } : {
                ret: Number.POSITIVE_INFINITY,
                mod: NaN
            };
        }
        if (isZero(x)) {
            return {
                ret: this.parseBigInt(0),
                mod: this.parseBigInt(0)
            };
        }
        if (a_LessThan_b(x.array, y.array)) {
            result = this.parseBigInt("0");
            result.negative = negative;
            mod = this.parseBigInt(x.toString());
        } else {
            var xObj, xArray = x.array.slice();
            var index, length, yLength = y.array.length, dividRet;
            result = this.parseBigInt();
            while (flag) {
                if (mod) {
                    xArray = xArray.concat(mod);
                    length = mod.length + 1;
                } else {
                    length = 1;
                }
                index = xArray.length - length;
                if (index < 1) {
                    flag = false;
                    dividRet = _divid(xArray, y.array);
                    result.array.unshift(dividRet.ret);
                    mod = this.parseBigInt(dividRet.mod.reverse().join(""));
                    mod.negative = negative;
                    continue;
                } else {
                    xObj = xArray.splice(index, length);
                    dividRet = _divid(xObj, y.array);
                    mod = dividRet.mod.length == 1 && dividRet.mod[0] === 0 ? undefined : dividRet.mod;
                    result.array.unshift(dividRet.ret);
                }
            }
            result.negative = negative;
        }
        for (var j = 0, len = decLength; j < len; j++) {
            temp = mod.array.shift();
            mod.decArray.push(temp ? temp : 0);
        }
        if (result.array.length === 0) {
            result.array.push(0);
        }
        checkDecArray.call(this, mod.decArray);
        checkZero(result.array);
        return {
            ret: result,
            mod: mod
        };
    };
    var _divid = function(x, y) {
        var result = {
            ret: 0,
            mod: [ 0 ]
        }, temp = x, flag = true;
        while (flag) {
            if (a_LessThan_b(temp, y)) {
                flag = false;
                result.mod = isZero(temp) ? result.mod : temp;
            } else {
                temp = _minus(temp, y);
                result.ret++;
            }
        }
        return result;
    };
    thi$.round = function() {
        if (this.decArray.length === 0) {
            return this;
        }
        var round = [];
        for (var i = 0; i < this.decArray.length; i++) {
            if (i === 0) {
                round.unshift(5);
                continue;
            }
            round.unshift(0);
        }
        if (!this.negative && a_MoreOrEqual_b(this.decArray, round)) {
            this.array = _plus(this.array, [ 1 ]);
        } else {
            if (this.negative && a_MoreThan_b(this.decArray, round)) {
                this.array = _plus(this.array, [ 1 ]);
            }
        }
        this.decArray = [];
        return this;
    };
    thi$.floor = function() {
        if (this.decArray.length === 0) {
            return this;
        }
        if (this.decArray.length !== 0 && this.negative) {
            this.array = _plus(this.array, [ 1 ]);
        }
        this.decArray = [];
        return this;
    };
    thi$.ceil = function() {
        if (this.decArray.length === 0) {
            return this;
        }
        if (this.decArray.length !== 0 && !this.negative) {
            this.array = _plus(this.array, [ 1 ]);
        }
        this.decArray = [];
        return this;
    };
    thi$.lessThan = function(b) {
        var x = this, y = this.parseBigInt(b);
        if (y.negative < x.negative) {
            return true;
        } else {
            if (y.negative > x.negative) {
                return false;
            }
        }
        switch (arrayComparison(x.array, y.array)) {
          case 0:
            return x.negative ? false : true;

          case 1:
            return false;

          case 2:
          default:
            return x.negative ? true : false;
        }
    };
    thi$.equal = function(b) {
        var x = this, y = this.parseBigInt(b);
        return x.negative === y.negative && a_Equals_b(x.array, y.array);
    };
    thi$.moreThan = function(b) {
        return !this.lessThan(b) && !this.equal(b);
    };
    thi$.lessOrEqual = function(b) {
        return !this.moreThan(b);
    };
    thi$.moreOrEqual = function(b) {
        return !this.lessThan(b);
    };
    var isZero = function(a) {
        return a.toString() === "0";
    };
    var a_LessThan_b = function(a, b) {
        return !(arrayComparison(a, b) && true);
    };
    var a_Equals_b = function(a, b) {
        return arrayComparison(a, b) === 1;
    };
    var a_MoreThan_b = function(a, b) {
        return arrayComparison(a, b) === 2;
    };
    var a_LessOrEqual_b = function(a, b) {
        return !a_MoreThan_b(a, b);
    };
    var a_MoreOrEqual_b = function(a, b) {
        return !a_LessThan_b(a, b);
    };
    var arrayComparison = function(x, y) {
        var arrayA = x, arrayB = y, aLen = arrayA.length, bLen = arrayB.length;
        if (aLen > bLen) {
            return 2;
        } else {
            if (aLen < bLen) {
                return 0;
            }
        }
        for (var i = aLen - 1; i > -1; i--) {
            if (arrayA[i] < arrayB[i]) {
                return 0;
            } else {
                if (arrayA[i] > arrayB[i]) {
                    return 2;
                }
            }
        }
        return 1;
    };
    var createBigInt = function(str) {
        var ret = this, i = 0;
        var arr = str.split("."), intArr = arr[0], decArr = arr.length > 1 ? arr[1] : [];
        if (intArr.charAt(0) == "-") {
            i = 1;
            ret.negative = true;
        }
        for (var len = intArr.length; i < len; i++) {
            ret.array.unshift(+intArr.charAt(i));
        }
        if (decArr.length !== 0) {
            for (var j = 0; j < decArr.length; j++) {
                ret.decArray.unshift(+decArr.charAt(j));
            }
        }
        checkZero(ret.array);
        checkDecArray.call(this, ret.decArray);
        return ret;
    };
    var isNeed2BigInt = function(str) {
        return str.length > 15;
    };
    var checkZero = function(array) {
        var flag = true;
        for (var i = array.length - 1; i > 0; i--) {
            if (flag && array[i] !== 0) {
                flag = false;
            }
            if (flag) {
                array.pop();
            }
        }
    };
    var checkDecArray = function(decArray) {
        var decLen = decArray.length;
        if (decLen > this.decMaxLen) {
            decArray.splice(0, decLen - this.decMaxLen);
        }
        decLen = decArray.length;
        for (var i = 0; i < decLen; ) {
            if (decArray[i] !== 0) {
                break;
            }
            decArray.shift();
        }
    };
    thi$.isDecimal = function() {
        return this.decArray.length !== 0;
    };
    thi$.isDecMaxLen = function() {
        return this.decArray.length === this.getDecMaxLen();
    };
    thi$.getDecMaxLen = function() {
        return this.decMaxLen;
    };
    thi$._init = function(data) {
        this.array = [ 0 ];
        this.decArray = [];
        this.decMaxLen = 16;
        this.negative = false;
        this.pattern = "####";
        this.objTypeIsBigIntType = true;
        if (!data) {
            return;
        }
        switch (Class.typeOf(data)) {
          case "string":
            if (Class.isNumber(+data)) {
                createBigInt.call(this, data);
            } else {
                throw "This data type can not parse to BigInt type.";
            }
            break;

          case "number":
            createBigInt.call(this, "" + data);
            break;

          default:
            throw "This data type can not parse to BigInt type.";
        }
    };
    this._init.apply(this, arguments);
}.$extend(js.lang.Object);

js.text.BigIntTools.BigInt = js.text.BigInt;

$package("js.text");

js.text.TimeZone = new function() {
    var Class = js.lang.Class, System = J$VM.System;
    var timezones = {
        "Africa/Abidjan": {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: false
        },
        "Africa/Accra": {
            name: "Ghana Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: false
        },
        "Africa/Addis_Ababa": {
            name: "Eastern African Time",
            timezone: "EAT",
            offset: "+0300",
            useDaylight: false
        },
        "Africa/Algiers": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: false
        },
        "Africa/Asmara": {
            name: "Eastern African Time",
            timezone: "EAT",
            offset: "+0300",
            useDaylight: false
        },
        "Africa/Asmera": {
            name: "Eastern African Time",
            timezone: "EAT",
            offset: "+0300",
            useDaylight: false
        },
        "Africa/Bamako": {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: false
        },
        "Africa/Bangui": {
            name: "Western African Time",
            timezone: "WAT",
            offset: "+0100",
            useDaylight: false
        },
        "Africa/Banjul": {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: false
        },
        "Africa/Bissau": {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: false
        },
        "Africa/Blantyre": {
            name: "Central African Time",
            timezone: "CAT",
            offset: "+0200",
            useDaylight: false
        },
        "Africa/Brazzaville": {
            name: "Western African Time",
            timezone: "WAT",
            offset: "+0100",
            useDaylight: false
        },
        "Africa/Bujumbura": {
            name: "Central African Time",
            timezone: "CAT",
            offset: "+0200",
            useDaylight: false
        },
        "Africa/Cairo": {
            name: "Eastern European Time",
            timezone: "OEZ",
            offset: "+0200",
            useDaylight: false
        },
        "Africa/Casablanca": {
            name: "Western European Time",
            timezone: "WEZ",
            offset: "+0000",
            useDaylight: true
        },
        "Africa/Ceuta": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Africa/Conakry": {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: false
        },
        "Africa/Dakar": {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: false
        },
        "Africa/Dar_es_Salaam": {
            name: "Eastern African Time",
            timezone: "EAT",
            offset: "+0300",
            useDaylight: false
        },
        "Africa/Djibouti": {
            name: "Eastern African Time",
            timezone: "EAT",
            offset: "+0300",
            useDaylight: false
        },
        "Africa/Douala": {
            name: "Western African Time",
            timezone: "WAT",
            offset: "+0100",
            useDaylight: false
        },
        "Africa/El_Aaiun": {
            name: "Western European Time",
            timezone: "WEZ",
            offset: "+0000",
            useDaylight: true
        },
        "Africa/Freetown": {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: false
        },
        "Africa/Gaborone": {
            name: "Central African Time",
            timezone: "CAT",
            offset: "+0200",
            useDaylight: false
        },
        "Africa/Harare": {
            name: "Central African Time",
            timezone: "CAT",
            offset: "+0200",
            useDaylight: false
        },
        "Africa/Johannesburg": {
            name: "South Africa Standard Time",
            timezone: "SAST",
            offset: "+0200",
            useDaylight: false
        },
        "Africa/Juba": {
            name: "Eastern African Time",
            timezone: "EAT",
            offset: "+0300",
            useDaylight: false
        },
        "Africa/Kampala": {
            name: "Eastern African Time",
            timezone: "EAT",
            offset: "+0300",
            useDaylight: false
        },
        "Africa/Khartoum": {
            name: "Eastern African Time",
            timezone: "EAT",
            offset: "+0300",
            useDaylight: false
        },
        "Africa/Kigali": {
            name: "Central African Time",
            timezone: "CAT",
            offset: "+0200",
            useDaylight: false
        },
        "Africa/Kinshasa": {
            name: "Western African Time",
            timezone: "WAT",
            offset: "+0100",
            useDaylight: false
        },
        "Africa/Lagos": {
            name: "Western African Time",
            timezone: "WAT",
            offset: "+0100",
            useDaylight: false
        },
        "Africa/Libreville": {
            name: "Western African Time",
            timezone: "WAT",
            offset: "+0100",
            useDaylight: false
        },
        "Africa/Lome": {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: false
        },
        "Africa/Luanda": {
            name: "Western African Time",
            timezone: "WAT",
            offset: "+0100",
            useDaylight: false
        },
        "Africa/Lubumbashi": {
            name: "Central African Time",
            timezone: "CAT",
            offset: "+0200",
            useDaylight: false
        },
        "Africa/Lusaka": {
            name: "Central African Time",
            timezone: "CAT",
            offset: "+0200",
            useDaylight: false
        },
        "Africa/Malabo": {
            name: "Western African Time",
            timezone: "WAT",
            offset: "+0100",
            useDaylight: false
        },
        "Africa/Maputo": {
            name: "Central African Time",
            timezone: "CAT",
            offset: "+0200",
            useDaylight: false
        },
        "Africa/Maseru": {
            name: "South Africa Standard Time",
            timezone: "SAST",
            offset: "+0200",
            useDaylight: false
        },
        "Africa/Mbabane": {
            name: "South Africa Standard Time",
            timezone: "SAST",
            offset: "+0200",
            useDaylight: false
        },
        "Africa/Mogadishu": {
            name: "Eastern African Time",
            timezone: "EAT",
            offset: "+0300",
            useDaylight: false
        },
        "Africa/Monrovia": {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: false
        },
        "Africa/Nairobi": {
            name: "Eastern African Time",
            timezone: "EAT",
            offset: "+0300",
            useDaylight: false
        },
        "Africa/Ndjamena": {
            name: "Western African Time",
            timezone: "WAT",
            offset: "+0100",
            useDaylight: false
        },
        "Africa/Niamey": {
            name: "Western African Time",
            timezone: "WAT",
            offset: "+0100",
            useDaylight: false
        },
        "Africa/Nouakchott": {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: false
        },
        "Africa/Ouagadougou": {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: false
        },
        "Africa/Porto-Novo": {
            name: "Western African Time",
            timezone: "WAT",
            offset: "+0100",
            useDaylight: false
        },
        "Africa/Sao_Tome": {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: false
        },
        "Africa/Timbuktu": {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: false
        },
        "Africa/Tripoli": {
            name: "Eastern European Time",
            timezone: "OEZ",
            offset: "+0200",
            useDaylight: false
        },
        "Africa/Tunis": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: false
        },
        "Africa/Windhoek": {
            name: "Western African Time",
            timezone: "WAST",
            offset: "+0200",
            useDaylight: true
        },
        "America/Adak": {
            name: "Hawaii Standard Time",
            timezone: "HST",
            offset: "-1000",
            useDaylight: true
        },
        "America/Anchorage": {
            name: "Alaska Standard Time",
            timezone: "AKST",
            offset: "-0900",
            useDaylight: true
        },
        "America/Anguilla": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: false
        },
        "America/Antigua": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: false
        },
        "America/Araguaina": {
            name: "Brasilia Time",
            timezone: "BRT",
            offset: "-0300",
            useDaylight: false
        },
        "America/Argentina/Buenos_Aires": {
            name: "Argentine Time",
            timezone: "ART",
            offset: "-0300",
            useDaylight: false
        },
        "America/Argentina/Catamarca": {
            name: "Argentine Time",
            timezone: "ART",
            offset: "-0300",
            useDaylight: false
        },
        "America/Argentina/ComodRivadavia": {
            name: "Argentine Time",
            timezone: "ART",
            offset: "-0300",
            useDaylight: false
        },
        "America/Argentina/Cordoba": {
            name: "Argentine Time",
            timezone: "ART",
            offset: "-0300",
            useDaylight: false
        },
        "America/Argentina/Jujuy": {
            name: "Argentine Time",
            timezone: "ART",
            offset: "-0300",
            useDaylight: false
        },
        "America/Argentina/La_Rioja": {
            name: "Argentine Time",
            timezone: "ART",
            offset: "-0300",
            useDaylight: false
        },
        "America/Argentina/Mendoza": {
            name: "Argentine Time",
            timezone: "ART",
            offset: "-0300",
            useDaylight: false
        },
        "America/Argentina/Rio_Gallegos": {
            name: "Argentine Time",
            timezone: "ART",
            offset: "-0300",
            useDaylight: false
        },
        "America/Argentina/Salta": {
            name: "Argentine Time",
            timezone: "ART",
            offset: "-0300",
            useDaylight: false
        },
        "America/Argentina/San_Juan": {
            name: "Argentine Time",
            timezone: "ART",
            offset: "-0300",
            useDaylight: false
        },
        "America/Argentina/San_Luis": {
            name: "Argentine Time",
            timezone: "ART",
            offset: "-0300",
            useDaylight: false
        },
        "America/Argentina/Tucuman": {
            name: "Argentine Time",
            timezone: "ART",
            offset: "-0300",
            useDaylight: false
        },
        "America/Argentina/Ushuaia": {
            name: "Argentine Time",
            timezone: "ART",
            offset: "-0300",
            useDaylight: false
        },
        "America/Aruba": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: false
        },
        "America/Asuncion": {
            name: "Paraguay Time",
            timezone: "PYST",
            offset: "-0300",
            useDaylight: true
        },
        "America/Atikokan": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: false
        },
        "America/Atka": {
            name: "Hawaii Standard Time",
            timezone: "HST",
            offset: "-1000",
            useDaylight: true
        },
        "America/Bahia": {
            name: "Brasilia Time",
            timezone: "BRT",
            offset: "-0300",
            useDaylight: false
        },
        "America/Bahia_Banderas": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: true
        },
        "America/Barbados": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: false
        },
        "America/Belem": {
            name: "Brasilia Time",
            timezone: "BRT",
            offset: "-0300",
            useDaylight: false
        },
        "America/Belize": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: false
        },
        "America/Blanc-Sablon": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: false
        },
        "America/Boa_Vista": {
            name: "Amazon Time",
            timezone: "AMT",
            offset: "-0400",
            useDaylight: false
        },
        "America/Bogota": {
            name: "Colombia Time",
            timezone: "COT",
            offset: "-0500",
            useDaylight: false
        },
        "America/Boise": {
            name: "Mountain Standard Time",
            timezone: "MST",
            offset: "-0700",
            useDaylight: true
        },
        "America/Buenos_Aires": {
            name: "Argentine Time",
            timezone: "ART",
            offset: "-0300",
            useDaylight: false
        },
        "America/Cambridge_Bay": {
            name: "Mountain Standard Time",
            timezone: "MST",
            offset: "-0700",
            useDaylight: true
        },
        "America/Campo_Grande": {
            name: "Amazon Time",
            timezone: "AMST",
            offset: "-0300",
            useDaylight: true
        },
        "America/Cancun": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: false
        },
        "America/Caracas": {
            name: "Venezuela Time",
            timezone: "VET",
            offset: "-0400",
            useDaylight: false
        },
        "America/Catamarca": {
            name: "Argentine Time",
            timezone: "ART",
            offset: "-0300",
            useDaylight: false
        },
        "America/Cayenne": {
            name: "French Guiana Time",
            timezone: "GFT",
            offset: "-0300",
            useDaylight: false
        },
        "America/Cayman": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: false
        },
        "America/Chicago": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: true
        },
        "America/Chihuahua": {
            name: "Mountain Standard Time",
            timezone: "MST",
            offset: "-0700",
            useDaylight: true
        },
        "America/Coral_Harbour": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: false
        },
        "America/Cordoba": {
            name: "Argentine Time",
            timezone: "ART",
            offset: "-0300",
            useDaylight: false
        },
        "America/Costa_Rica": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: false
        },
        "America/Creston": {
            name: "Mountain Standard Time",
            timezone: "MST",
            offset: "-0700",
            useDaylight: false
        },
        "America/Cuiaba": {
            name: "Amazon Time",
            timezone: "AMST",
            offset: "-0300",
            useDaylight: true
        },
        "America/Curacao": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: false
        },
        "America/Danmarkshavn": {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: false
        },
        "America/Dawson": {
            name: "Pacific Standard Time",
            timezone: "PST",
            offset: "-0800",
            useDaylight: true
        },
        "America/Dawson_Creek": {
            name: "Mountain Standard Time",
            timezone: "MST",
            offset: "-0700",
            useDaylight: false
        },
        "America/Denver": {
            name: "Mountain Standard Time",
            timezone: "MST",
            offset: "-0700",
            useDaylight: true
        },
        "America/Detroit": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: true
        },
        "America/Dominica": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: false
        },
        "America/Edmonton": {
            name: "Mountain Standard Time",
            timezone: "MST",
            offset: "-0700",
            useDaylight: true
        },
        "America/Eirunepe": {
            name: "Acre Time",
            timezone: "ACT",
            offset: "-0500",
            useDaylight: false
        },
        "America/El_Salvador": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: false
        },
        "America/Ensenada": {
            name: "Pacific Standard Time",
            timezone: "PST",
            offset: "-0800",
            useDaylight: true
        },
        "America/Fort_Nelson": {
            name: "Mountain Standard Time",
            timezone: "MST",
            offset: "-0700",
            useDaylight: false
        },
        "America/Fort_Wayne": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: true
        },
        "America/Fortaleza": {
            name: "Brasilia Time",
            timezone: "BRT",
            offset: "-0300",
            useDaylight: false
        },
        "America/Glace_Bay": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: true
        },
        "America/Godthab": {
            name: "Western Greenland Time",
            timezone: "WGT",
            offset: "-0300",
            useDaylight: true
        },
        "America/Goose_Bay": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: true
        },
        "America/Grand_Turk": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: false
        },
        "America/Grenada": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: false
        },
        "America/Guadeloupe": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: false
        },
        "America/Guatemala": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: false
        },
        "America/Guayaquil": {
            name: "Ecuador Time",
            timezone: "ECT",
            offset: "-0500",
            useDaylight: false
        },
        "America/Guyana": {
            name: "Guyana Time",
            timezone: "GYT",
            offset: "-0400",
            useDaylight: false
        },
        "America/Halifax": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: true
        },
        "America/Havana": {
            name: "Cuba Standard Time",
            timezone: "CST",
            offset: "-0500",
            useDaylight: true
        },
        "America/Hermosillo": {
            name: "Mountain Standard Time",
            timezone: "MST",
            offset: "-0700",
            useDaylight: false
        },
        "America/Indiana/Indianapolis": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: true
        },
        "America/Indiana/Knox": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: true
        },
        "America/Indiana/Marengo": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: true
        },
        "America/Indiana/Petersburg": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: true
        },
        "America/Indiana/Tell_City": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: true
        },
        "America/Indiana/Vevay": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: true
        },
        "America/Indiana/Vincennes": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: true
        },
        "America/Indiana/Winamac": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: true
        },
        "America/Indianapolis": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: true
        },
        "America/Inuvik": {
            name: "Mountain Standard Time",
            timezone: "MST",
            offset: "-0700",
            useDaylight: true
        },
        "America/Iqaluit": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: true
        },
        "America/Jamaica": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: false
        },
        "America/Jujuy": {
            name: "Argentine Time",
            timezone: "ART",
            offset: "-0300",
            useDaylight: false
        },
        "America/Juneau": {
            name: "Alaska Standard Time",
            timezone: "AKST",
            offset: "-0900",
            useDaylight: true
        },
        "America/Kentucky/Louisville": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: true
        },
        "America/Kentucky/Monticello": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: true
        },
        "America/Knox_IN": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: true
        },
        "America/Kralendijk": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: false
        },
        "America/La_Paz": {
            name: "Bolivia Time",
            timezone: "BOT",
            offset: "-0400",
            useDaylight: false
        },
        "America/Lima": {
            name: "Peru Time",
            timezone: "PET",
            offset: "-0500",
            useDaylight: false
        },
        "America/Los_Angeles": {
            name: "Pacific Standard Time",
            timezone: "PST",
            offset: "-0800",
            useDaylight: true
        },
        "America/Louisville": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: true
        },
        "America/Lower_Princes": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: false
        },
        "America/Maceio": {
            name: "Brasilia Time",
            timezone: "BRT",
            offset: "-0300",
            useDaylight: false
        },
        "America/Managua": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: false
        },
        "America/Manaus": {
            name: "Amazon Time",
            timezone: "AMT",
            offset: "-0400",
            useDaylight: false
        },
        "America/Marigot": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: false
        },
        "America/Martinique": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: false
        },
        "America/Matamoros": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: true
        },
        "America/Mazatlan": {
            name: "Mountain Standard Time",
            timezone: "MST",
            offset: "-0700",
            useDaylight: true
        },
        "America/Mendoza": {
            name: "Argentine Time",
            timezone: "ART",
            offset: "-0300",
            useDaylight: false
        },
        "America/Menominee": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: true
        },
        "America/Merida": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: true
        },
        "America/Metlakatla": {
            name: "Alaska Standard Time",
            timezone: "AKST",
            offset: "-0900",
            useDaylight: true
        },
        "America/Mexico_City": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: true
        },
        "America/Miquelon": {
            name: "Pierre & Miquelon Standard Time",
            timezone: "PMST",
            offset: "-0300",
            useDaylight: true
        },
        "America/Moncton": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: true
        },
        "America/Monterrey": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: true
        },
        "America/Montevideo": {
            name: "Uruguay Time",
            timezone: "UYT",
            offset: "-0300",
            useDaylight: false
        },
        "America/Montreal": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: true
        },
        "America/Montserrat": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: false
        },
        "America/Nassau": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: true
        },
        "America/New_York": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: true
        },
        "America/Nipigon": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: true
        },
        "America/Nome": {
            name: "Alaska Standard Time",
            timezone: "AKST",
            offset: "-0900",
            useDaylight: true
        },
        "America/Noronha": {
            name: "Fernando de Noronha Time",
            timezone: "FNT",
            offset: "-0200",
            useDaylight: false
        },
        "America/North_Dakota/Beulah": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: true
        },
        "America/North_Dakota/Center": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: true
        },
        "America/North_Dakota/New_Salem": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: true
        },
        "America/Ojinaga": {
            name: "Mountain Standard Time",
            timezone: "MST",
            offset: "-0700",
            useDaylight: true
        },
        "America/Panama": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: false
        },
        "America/Pangnirtung": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: true
        },
        "America/Paramaribo": {
            name: "Suriname Time",
            timezone: "SRT",
            offset: "-0300",
            useDaylight: false
        },
        "America/Phoenix": {
            name: "Mountain Standard Time",
            timezone: "MST",
            offset: "-0700",
            useDaylight: false
        },
        "America/Port-au-Prince": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: true
        },
        "America/Port_of_Spain": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: false
        },
        "America/Porto_Acre": {
            name: "Acre Time",
            timezone: "ACT",
            offset: "-0500",
            useDaylight: false
        },
        "America/Porto_Velho": {
            name: "Amazon Time",
            timezone: "AMT",
            offset: "-0400",
            useDaylight: false
        },
        "America/Puerto_Rico": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: false
        },
        "America/Punta_Arenas": {
            name: "GMT-03:00",
            timezone: "GMT-03:00",
            offset: "-0300",
            useDaylight: false
        },
        "America/Rainy_River": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: true
        },
        "America/Rankin_Inlet": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: true
        },
        "America/Recife": {
            name: "Brasilia Time",
            timezone: "BRT",
            offset: "-0300",
            useDaylight: false
        },
        "America/Regina": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: false
        },
        "America/Resolute": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: true
        },
        "America/Rio_Branco": {
            name: "Acre Time",
            timezone: "ACT",
            offset: "-0500",
            useDaylight: false
        },
        "America/Rosario": {
            name: "Argentine Time",
            timezone: "ART",
            offset: "-0300",
            useDaylight: false
        },
        "America/Santa_Isabel": {
            name: "Pacific Standard Time",
            timezone: "PST",
            offset: "-0800",
            useDaylight: true
        },
        "America/Santarem": {
            name: "Brasilia Time",
            timezone: "BRT",
            offset: "-0300",
            useDaylight: false
        },
        "America/Santiago": {
            name: "Chile Time",
            timezone: "CLST",
            offset: "-0300",
            useDaylight: true
        },
        "America/Santo_Domingo": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: false
        },
        "America/Sao_Paulo": {
            name: "Brasilia Time",
            timezone: "BRST",
            offset: "-0200",
            useDaylight: true
        },
        "America/Scoresbysund": {
            name: "Eastern Greenland Time",
            timezone: "EGT",
            offset: "-0100",
            useDaylight: true
        },
        "America/Shiprock": {
            name: "Mountain Standard Time",
            timezone: "MST",
            offset: "-0700",
            useDaylight: true
        },
        "America/Sitka": {
            name: "Alaska Standard Time",
            timezone: "AKST",
            offset: "-0900",
            useDaylight: true
        },
        "America/St_Barthelemy": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: false
        },
        "America/St_Johns": {
            name: "Newfoundland Standard Time",
            timezone: "NST",
            offset: "-0330",
            useDaylight: true
        },
        "America/St_Kitts": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: false
        },
        "America/St_Lucia": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: false
        },
        "America/St_Thomas": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: false
        },
        "America/St_Vincent": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: false
        },
        "America/Swift_Current": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: false
        },
        "America/Tegucigalpa": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: false
        },
        "America/Thule": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: true
        },
        "America/Thunder_Bay": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: true
        },
        "America/Tijuana": {
            name: "Pacific Standard Time",
            timezone: "PST",
            offset: "-0800",
            useDaylight: true
        },
        "America/Toronto": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: true
        },
        "America/Tortola": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: false
        },
        "America/Vancouver": {
            name: "Pacific Standard Time",
            timezone: "PST",
            offset: "-0800",
            useDaylight: true
        },
        "America/Virgin": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: false
        },
        "America/Whitehorse": {
            name: "Pacific Standard Time",
            timezone: "PST",
            offset: "-0800",
            useDaylight: true
        },
        "America/Winnipeg": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: true
        },
        "America/Yakutat": {
            name: "Alaska Standard Time",
            timezone: "AKST",
            offset: "-0900",
            useDaylight: true
        },
        "America/Yellowknife": {
            name: "Mountain Standard Time",
            timezone: "MST",
            offset: "-0700",
            useDaylight: true
        },
        "Antarctica/Casey": {
            name: "Australian Western Standard Time",
            timezone: "AWST",
            offset: "+1100",
            useDaylight: false
        },
        "Antarctica/Davis": {
            name: "Davis Time",
            timezone: "DAVT",
            offset: "+0700",
            useDaylight: false
        },
        "Antarctica/DumontDUrville": {
            name: "Dumont-d'Urville Time",
            timezone: "DDUT",
            offset: "+1000",
            useDaylight: false
        },
        "Antarctica/Macquarie": {
            name: "Macquarie Island Standard Time",
            timezone: "MIST",
            offset: "+1100",
            useDaylight: false
        },
        "Antarctica/Mawson": {
            name: "Mawson Time",
            timezone: "MAWT",
            offset: "+0500",
            useDaylight: false
        },
        "Antarctica/McMurdo": {
            name: "New Zealand Standard Time",
            timezone: "NZDT",
            offset: "+1300",
            useDaylight: true
        },
        "Antarctica/Palmer": {
            name: "Chile Time",
            timezone: "CLT",
            offset: "-0300",
            useDaylight: false
        },
        "Antarctica/Rothera": {
            name: "Rothera Time",
            timezone: "ROTT",
            offset: "-0300",
            useDaylight: false
        },
        "Antarctica/South_Pole": {
            name: "New Zealand Standard Time",
            timezone: "NZDT",
            offset: "+1300",
            useDaylight: true
        },
        "Antarctica/Syowa": {
            name: "Syowa Time",
            timezone: "SYOT",
            offset: "+0300",
            useDaylight: false
        },
        "Antarctica/Troll": {
            name: "Coordinated Universal Time",
            timezone: "UTC",
            offset: "+0000",
            useDaylight: true
        },
        "Antarctica/Vostok": {
            name: "Vostok Time",
            timezone: "VOST",
            offset: "+0600",
            useDaylight: false
        },
        "Arctic/Longyearbyen": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Asia/Aden": {
            name: "Arabia Standard Time",
            timezone: "AST",
            offset: "+0300",
            useDaylight: false
        },
        "Asia/Almaty": {
            name: "Alma-Ata Time",
            timezone: "ALMT",
            offset: "+0600",
            useDaylight: false
        },
        "Asia/Amman": {
            name: "Eastern European Time",
            timezone: "OEZ",
            offset: "+0200",
            useDaylight: true
        },
        "Asia/Anadyr": {
            name: "Anadyr Time",
            timezone: "ANAT",
            offset: "+1200",
            useDaylight: false
        },
        "Asia/Aqtau": {
            name: "Aqtau Time",
            timezone: "AQTT",
            offset: "+0500",
            useDaylight: false
        },
        "Asia/Aqtobe": {
            name: "Aqtobe Time",
            timezone: "AQTT",
            offset: "+0500",
            useDaylight: false
        },
        "Asia/Ashgabat": {
            name: "Turkmenistan Time",
            timezone: "TMT",
            offset: "+0500",
            useDaylight: false
        },
        "Asia/Ashkhabad": {
            name: "Turkmenistan Time",
            timezone: "TMT",
            offset: "+0500",
            useDaylight: false
        },
        "Asia/Atyrau": {
            name: "GMT+05:00",
            timezone: "GMT+05:00",
            offset: "+0500",
            useDaylight: false
        },
        "Asia/Baghdad": {
            name: "Arabia Standard Time",
            timezone: "AST",
            offset: "+0300",
            useDaylight: false
        },
        "Asia/Bahrain": {
            name: "Arabia Standard Time",
            timezone: "AST",
            offset: "+0300",
            useDaylight: false
        },
        "Asia/Baku": {
            name: "Azerbaijan Time",
            timezone: "AZT",
            offset: "+0400",
            useDaylight: false
        },
        "Asia/Bangkok": {
            name: "Indochina Time",
            timezone: "ICT",
            offset: "+0700",
            useDaylight: false
        },
        "Asia/Barnaul": {
            name: "GMT+07:00",
            timezone: "GMT+07:00",
            offset: "+0700",
            useDaylight: false
        },
        "Asia/Beirut": {
            name: "Eastern European Time",
            timezone: "OEZ",
            offset: "+0200",
            useDaylight: true
        },
        "Asia/Bishkek": {
            name: "Kirgizstan Time",
            timezone: "KGT",
            offset: "+0600",
            useDaylight: false
        },
        "Asia/Brunei": {
            name: "Brunei Time",
            timezone: "BNT",
            offset: "+0800",
            useDaylight: false
        },
        "Asia/Calcutta": {
            name: "India Standard Time",
            timezone: "IST",
            offset: "+0530",
            useDaylight: false
        },
        "Asia/Chita": {
            name: "Yakutsk Time",
            timezone: "YAKT",
            offset: "+0900",
            useDaylight: false
        },
        "Asia/Choibalsan": {
            name: "Choibalsan Time",
            timezone: "CHOT",
            offset: "+0800",
            useDaylight: false
        },
        "Asia/Chongqing": {
            name: "China Standard Time",
            timezone: "CST",
            offset: "+0800",
            useDaylight: false
        },
        "Asia/Chungking": {
            name: "China Standard Time",
            timezone: "CST",
            offset: "+0800",
            useDaylight: false
        },
        "Asia/Colombo": {
            name: "India Standard Time",
            timezone: "IST",
            offset: "+0530",
            useDaylight: false
        },
        "Asia/Dacca": {
            name: "Bangladesh Time",
            timezone: "BDT",
            offset: "+0600",
            useDaylight: false
        },
        "Asia/Damascus": {
            name: "Eastern European Time",
            timezone: "OEZ",
            offset: "+0200",
            useDaylight: true
        },
        "Asia/Dhaka": {
            name: "Bangladesh Time",
            timezone: "BDT",
            offset: "+0600",
            useDaylight: false
        },
        "Asia/Dili": {
            name: "Timor-Leste Time",
            timezone: "TLT",
            offset: "+0900",
            useDaylight: false
        },
        "Asia/Dubai": {
            name: "Gulf Standard Time",
            timezone: "GST",
            offset: "+0400",
            useDaylight: false
        },
        "Asia/Dushanbe": {
            name: "Tajikistan Time",
            timezone: "TJT",
            offset: "+0500",
            useDaylight: false
        },
        "Asia/Famagusta": {
            name: "GMT+03:00",
            timezone: "GMT+03:00",
            offset: "+0300",
            useDaylight: false
        },
        "Asia/Gaza": {
            name: "Eastern European Time",
            timezone: "OEZ",
            offset: "+0200",
            useDaylight: true
        },
        "Asia/Harbin": {
            name: "China Standard Time",
            timezone: "CST",
            offset: "+0800",
            useDaylight: false
        },
        "Asia/Hebron": {
            name: "Eastern European Time",
            timezone: "OEZ",
            offset: "+0200",
            useDaylight: true
        },
        "Asia/Ho_Chi_Minh": {
            name: "Indochina Time",
            timezone: "ICT",
            offset: "+0700",
            useDaylight: false
        },
        "Asia/Hong_Kong": {
            name: "Hong Kong Time",
            timezone: "HKT",
            offset: "+0800",
            useDaylight: false
        },
        "Asia/Hovd": {
            name: "Hovd Time",
            timezone: "HOVT",
            offset: "+0700",
            useDaylight: false
        },
        "Asia/Irkutsk": {
            name: "Irkutsk Time",
            timezone: "IRKT",
            offset: "+0800",
            useDaylight: false
        },
        "Asia/Istanbul": {
            name: "Eastern European Time",
            timezone: "OEZ",
            offset: "+0300",
            useDaylight: false
        },
        "Asia/Jakarta": {
            name: "West Indonesia Time",
            timezone: "WIB",
            offset: "+0700",
            useDaylight: false
        },
        "Asia/Jayapura": {
            name: "East Indonesia Time",
            timezone: "WIT",
            offset: "+0900",
            useDaylight: false
        },
        "Asia/Jerusalem": {
            name: "Israel Standard Time",
            timezone: "IST",
            offset: "+0200",
            useDaylight: true
        },
        "Asia/Kabul": {
            name: "Afghanistan Time",
            timezone: "AFT",
            offset: "+0430",
            useDaylight: false
        },
        "Asia/Kamchatka": {
            name: "Petropavlovsk-Kamchatski Time",
            timezone: "PETT",
            offset: "+1200",
            useDaylight: false
        },
        "Asia/Karachi": {
            name: "Pakistan Time",
            timezone: "PKT",
            offset: "+0500",
            useDaylight: false
        },
        "Asia/Kashgar": {
            name: "Xinjiang Standard Time",
            timezone: "XJT",
            offset: "+0600",
            useDaylight: false
        },
        "Asia/Kathmandu": {
            name: "Nepal Time",
            timezone: "NPT",
            offset: "+0545",
            useDaylight: false
        },
        "Asia/Katmandu": {
            name: "Nepal Time",
            timezone: "NPT",
            offset: "+0545",
            useDaylight: false
        },
        "Asia/Khandyga": {
            name: "Yakutsk Time",
            timezone: "YAKT",
            offset: "+0900",
            useDaylight: false
        },
        "Asia/Kolkata": {
            name: "India Standard Time",
            timezone: "IST",
            offset: "+0530",
            useDaylight: false
        },
        "Asia/Krasnoyarsk": {
            name: "Krasnoyarsk Time",
            timezone: "KRAT",
            offset: "+0700",
            useDaylight: false
        },
        "Asia/Kuala_Lumpur": {
            name: "Malaysia Time",
            timezone: "MYT",
            offset: "+0800",
            useDaylight: false
        },
        "Asia/Kuching": {
            name: "Malaysia Time",
            timezone: "MYT",
            offset: "+0800",
            useDaylight: false
        },
        "Asia/Kuwait": {
            name: "Arabia Standard Time",
            timezone: "AST",
            offset: "+0300",
            useDaylight: false
        },
        "Asia/Macao": {
            name: "China Standard Time",
            timezone: "CST",
            offset: "+0800",
            useDaylight: false
        },
        "Asia/Macau": {
            name: "China Standard Time",
            timezone: "CST",
            offset: "+0800",
            useDaylight: false
        },
        "Asia/Magadan": {
            name: "Magadan Time",
            timezone: "MAGT",
            offset: "+1100",
            useDaylight: false
        },
        "Asia/Makassar": {
            name: "Central Indonesia Time",
            timezone: "WITA",
            offset: "+0800",
            useDaylight: false
        },
        "Asia/Manila": {
            name: "Philippines Time",
            timezone: "PHT",
            offset: "+0800",
            useDaylight: false
        },
        "Asia/Muscat": {
            name: "Gulf Standard Time",
            timezone: "GST",
            offset: "+0400",
            useDaylight: false
        },
        "Asia/Nicosia": {
            name: "Eastern European Time",
            timezone: "OEZ",
            offset: "+0200",
            useDaylight: true
        },
        "Asia/Novokuznetsk": {
            name: "Krasnoyarsk Time",
            timezone: "KRAT",
            offset: "+0700",
            useDaylight: false
        },
        "Asia/Novosibirsk": {
            name: "Novosibirsk Time",
            timezone: "NOVT",
            offset: "+0700",
            useDaylight: false
        },
        "Asia/Omsk": {
            name: "Omsk Time",
            timezone: "OMST",
            offset: "+0600",
            useDaylight: false
        },
        "Asia/Oral": {
            name: "Oral Time",
            timezone: "ORAT",
            offset: "+0500",
            useDaylight: false
        },
        "Asia/Phnom_Penh": {
            name: "Indochina Time",
            timezone: "ICT",
            offset: "+0700",
            useDaylight: false
        },
        "Asia/Pontianak": {
            name: "West Indonesia Time",
            timezone: "WIB",
            offset: "+0700",
            useDaylight: false
        },
        "Asia/Pyongyang": {
            name: "Korea Standard Time",
            timezone: "KST",
            offset: "+0830",
            useDaylight: false
        },
        "Asia/Qatar": {
            name: "Arabia Standard Time",
            timezone: "AST",
            offset: "+0300",
            useDaylight: false
        },
        "Asia/Qyzylorda": {
            name: "Qyzylorda Time",
            timezone: "QYZT",
            offset: "+0600",
            useDaylight: false
        },
        "Asia/Rangoon": {
            name: "Myanmar Time",
            timezone: "MMT",
            offset: "+0630",
            useDaylight: false
        },
        "Asia/Riyadh": {
            name: "Arabia Standard Time",
            timezone: "AST",
            offset: "+0300",
            useDaylight: false
        },
        "Asia/Saigon": {
            name: "Indochina Time",
            timezone: "ICT",
            offset: "+0700",
            useDaylight: false
        },
        "Asia/Sakhalin": {
            name: "Sakhalin Time",
            timezone: "SAKT",
            offset: "+1100",
            useDaylight: false
        },
        "Asia/Samarkand": {
            name: "Uzbekistan Time",
            timezone: "UZT",
            offset: "+0500",
            useDaylight: false
        },
        "Asia/Seoul": {
            name: "Korea Standard Time",
            timezone: "KST",
            offset: "+0900",
            useDaylight: false
        },
        "Asia/Shanghai": {
            name: "China Standard Time",
            timezone: "CST",
            offset: "+0800",
            useDaylight: false
        },
        "Asia/Singapore": {
            name: "Singapore Time",
            timezone: "SGT",
            offset: "+0800",
            useDaylight: false
        },
        "Asia/Srednekolymsk": {
            name: "Srednekolymsk Time",
            timezone: "SRET",
            offset: "+1100",
            useDaylight: false
        },
        "Asia/Taipei": {
            name: "China Standard Time",
            timezone: "CST",
            offset: "+0800",
            useDaylight: false
        },
        "Asia/Tashkent": {
            name: "Uzbekistan Time",
            timezone: "UZT",
            offset: "+0500",
            useDaylight: false
        },
        "Asia/Tbilisi": {
            name: "Georgia Time",
            timezone: "GET",
            offset: "+0400",
            useDaylight: false
        },
        "Asia/Tehran": {
            name: "Iran Standard Time",
            timezone: "IRST",
            offset: "+0330",
            useDaylight: true
        },
        "Asia/Tel_Aviv": {
            name: "Israel Standard Time",
            timezone: "IST",
            offset: "+0200",
            useDaylight: true
        },
        "Asia/Thimbu": {
            name: "Bhutan Time",
            timezone: "BTT",
            offset: "+0600",
            useDaylight: false
        },
        "Asia/Thimphu": {
            name: "Bhutan Time",
            timezone: "BTT",
            offset: "+0600",
            useDaylight: false
        },
        "Asia/Tokyo": {
            name: "Japan Standard Time",
            timezone: "JST",
            offset: "+0900",
            useDaylight: false
        },
        "Asia/Tomsk": {
            name: "GMT+07:00",
            timezone: "GMT+07:00",
            offset: "+0700",
            useDaylight: false
        },
        "Asia/Ujung_Pandang": {
            name: "Central Indonesia Time",
            timezone: "WITA",
            offset: "+0800",
            useDaylight: false
        },
        "Asia/Ulaanbaatar": {
            name: "Ulaanbaatar Time",
            timezone: "ULAT",
            offset: "+0800",
            useDaylight: false
        },
        "Asia/Ulan_Bator": {
            name: "Ulaanbaatar Time",
            timezone: "ULAT",
            offset: "+0800",
            useDaylight: false
        },
        "Asia/Urumqi": {
            name: "Xinjiang Standard Time",
            timezone: "XJT",
            offset: "+0600",
            useDaylight: false
        },
        "Asia/Ust-Nera": {
            name: "Ust-Nera Time",
            timezone: "VLAT",
            offset: "+1000",
            useDaylight: false
        },
        "Asia/Vientiane": {
            name: "Indochina Time",
            timezone: "ICT",
            offset: "+0700",
            useDaylight: false
        },
        "Asia/Vladivostok": {
            name: "Vladivostok Time",
            timezone: "VLAT",
            offset: "+1000",
            useDaylight: false
        },
        "Asia/Yakutsk": {
            name: "Yakutsk Time",
            timezone: "YAKT",
            offset: "+0900",
            useDaylight: false
        },
        "Asia/Yangon": {
            name: "Myanmar Time",
            timezone: "MMT",
            offset: "+0630",
            useDaylight: false
        },
        "Asia/Yekaterinburg": {
            name: "Yekaterinburg Time",
            timezone: "YEKT",
            offset: "+0500",
            useDaylight: false
        },
        "Asia/Yerevan": {
            name: "Armenia Time",
            timezone: "AMT",
            offset: "+0400",
            useDaylight: false
        },
        "Atlantic/Azores": {
            name: "Azores Time",
            timezone: "AZOT",
            offset: "-0100",
            useDaylight: true
        },
        "Atlantic/Bermuda": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: true
        },
        "Atlantic/Canary": {
            name: "Western European Time",
            timezone: "WEZ",
            offset: "+0000",
            useDaylight: true
        },
        "Atlantic/Cape_Verde": {
            name: "Cape Verde Time",
            timezone: "CVT",
            offset: "-0100",
            useDaylight: false
        },
        "Atlantic/Faeroe": {
            name: "Western European Time",
            timezone: "WEZ",
            offset: "+0000",
            useDaylight: true
        },
        "Atlantic/Faroe": {
            name: "Western European Time",
            timezone: "WEZ",
            offset: "+0000",
            useDaylight: true
        },
        "Atlantic/Jan_Mayen": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Atlantic/Madeira": {
            name: "Western European Time",
            timezone: "WEZ",
            offset: "+0000",
            useDaylight: true
        },
        "Atlantic/Reykjavik": {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: false
        },
        "Atlantic/South_Georgia": {
            name: "South Georgia Standard Time",
            timezone: "GST",
            offset: "-0200",
            useDaylight: false
        },
        "Atlantic/St_Helena": {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: false
        },
        "Atlantic/Stanley": {
            name: "Falkland Is. Time",
            timezone: "FKT",
            offset: "-0300",
            useDaylight: false
        },
        "Australia/ACT": {
            name: "Australian Eastern Standard Time (New South Wales)",
            timezone: "AEDT",
            offset: "+1100",
            useDaylight: true
        },
        "Australia/Adelaide": {
            name: "Australian Central Standard Time (South Australia)",
            timezone: "ACDT",
            offset: "+1030",
            useDaylight: true
        },
        "Australia/Brisbane": {
            name: "Australian Eastern Standard Time (Queensland)",
            timezone: "AEST",
            offset: "+1000",
            useDaylight: false
        },
        "Australia/Broken_Hill": {
            name: "Australian Central Standard Time (South Australia/New South Wales)",
            timezone: "ACDT",
            offset: "+1030",
            useDaylight: true
        },
        "Australia/Canberra": {
            name: "Australian Eastern Standard Time (New South Wales)",
            timezone: "AEDT",
            offset: "+1100",
            useDaylight: true
        },
        "Australia/Currie": {
            name: "Australian Eastern Standard Time (New South Wales)",
            timezone: "AEDT",
            offset: "+1100",
            useDaylight: true
        },
        "Australia/Darwin": {
            name: "Australian Central Standard Time (Northern Territory)",
            timezone: "ACST",
            offset: "+0930",
            useDaylight: false
        },
        "Australia/Eucla": {
            name: "Australian Central Western Standard Time",
            timezone: "ACWST",
            offset: "+0845",
            useDaylight: false
        },
        "Australia/Hobart": {
            name: "Australian Eastern Standard Time (Tasmania)",
            timezone: "AEDT",
            offset: "+1100",
            useDaylight: true
        },
        "Australia/LHI": {
            name: "Lord Howe Standard Time",
            timezone: "LHDT",
            offset: "+1100",
            useDaylight: true
        },
        "Australia/Lindeman": {
            name: "Australian Eastern Standard Time (Queensland)",
            timezone: "AEST",
            offset: "+1000",
            useDaylight: false
        },
        "Australia/Lord_Howe": {
            name: "Lord Howe Standard Time",
            timezone: "LHDT",
            offset: "+1100",
            useDaylight: true
        },
        "Australia/Melbourne": {
            name: "Australian Eastern Standard Time (Victoria)",
            timezone: "AEDT",
            offset: "+1100",
            useDaylight: true
        },
        "Australia/NSW": {
            name: "Australian Eastern Standard Time (New South Wales)",
            timezone: "AEDT",
            offset: "+1100",
            useDaylight: true
        },
        "Australia/North": {
            name: "Australian Central Standard Time (Northern Territory)",
            timezone: "ACST",
            offset: "+0930",
            useDaylight: false
        },
        "Australia/Perth": {
            name: "Australian Western Standard Time",
            timezone: "AWST",
            offset: "+0800",
            useDaylight: false
        },
        "Australia/Queensland": {
            name: "Australian Eastern Standard Time (Queensland)",
            timezone: "AEST",
            offset: "+1000",
            useDaylight: false
        },
        "Australia/South": {
            name: "Australian Central Standard Time (South Australia)",
            timezone: "ACDT",
            offset: "+1030",
            useDaylight: true
        },
        "Australia/Sydney": {
            name: "Australian Eastern Standard Time (New South Wales)",
            timezone: "AEDT",
            offset: "+1100",
            useDaylight: true
        },
        "Australia/Tasmania": {
            name: "Australian Eastern Standard Time (Tasmania)",
            timezone: "AEDT",
            offset: "+1100",
            useDaylight: true
        },
        "Australia/Victoria": {
            name: "Australian Eastern Standard Time (Victoria)",
            timezone: "AEDT",
            offset: "+1100",
            useDaylight: true
        },
        "Australia/West": {
            name: "Australian Western Standard Time",
            timezone: "AWST",
            offset: "+0800",
            useDaylight: false
        },
        "Australia/Yancowinna": {
            name: "Australian Central Standard Time (South Australia/New South Wales)",
            timezone: "ACDT",
            offset: "+1030",
            useDaylight: true
        },
        "Brazil/Acre": {
            name: "Acre Time",
            timezone: "ACT",
            offset: "-0500",
            useDaylight: false
        },
        "Brazil/DeNoronha": {
            name: "Fernando de Noronha Time",
            timezone: "FNT",
            offset: "-0200",
            useDaylight: false
        },
        "Brazil/East": {
            name: "Brasilia Time",
            timezone: "BRST",
            offset: "-0200",
            useDaylight: true
        },
        "Brazil/West": {
            name: "Amazon Time",
            timezone: "AMT",
            offset: "-0400",
            useDaylight: false
        },
        CET: {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        CST6CDT: {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: true
        },
        "Canada/Atlantic": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: true
        },
        "Canada/Central": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: true
        },
        "Canada/East-Saskatchewan": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: false
        },
        "Canada/Eastern": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: true
        },
        "Canada/Mountain": {
            name: "Mountain Standard Time",
            timezone: "MST",
            offset: "-0700",
            useDaylight: true
        },
        "Canada/Newfoundland": {
            name: "Newfoundland Standard Time",
            timezone: "NST",
            offset: "-0330",
            useDaylight: true
        },
        "Canada/Pacific": {
            name: "Pacific Standard Time",
            timezone: "PST",
            offset: "-0800",
            useDaylight: true
        },
        "Canada/Saskatchewan": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: false
        },
        "Canada/Yukon": {
            name: "Pacific Standard Time",
            timezone: "PST",
            offset: "-0800",
            useDaylight: true
        },
        "Chile/Continental": {
            name: "Chile Time",
            timezone: "CLST",
            offset: "-0300",
            useDaylight: true
        },
        "Chile/EasterIsland": {
            name: "Easter Is. Time",
            timezone: "EASST",
            offset: "-0500",
            useDaylight: true
        },
        Cuba: {
            name: "Cuba Standard Time",
            timezone: "CST",
            offset: "-0500",
            useDaylight: true
        },
        EET: {
            name: "Eastern European Time",
            timezone: "OEZ",
            offset: "+0200",
            useDaylight: true
        },
        EST5EDT: {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: true
        },
        Egypt: {
            name: "Eastern European Time",
            timezone: "OEZ",
            offset: "+0200",
            useDaylight: false
        },
        Eire: {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: true
        },
        "Etc/GMT": {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: false
        },
        "Etc/GMT+0": {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: false
        },
        "Etc/GMT+1": {
            name: "GMT-01:00",
            timezone: "GMT-01:00",
            offset: "-0100",
            useDaylight: false
        },
        "Etc/GMT+10": {
            name: "GMT-10:00",
            timezone: "GMT-10:00",
            offset: "-1000",
            useDaylight: false
        },
        "Etc/GMT+11": {
            name: "GMT-11:00",
            timezone: "GMT-11:00",
            offset: "-1100",
            useDaylight: false
        },
        "Etc/GMT+12": {
            name: "GMT-12:00",
            timezone: "GMT-12:00",
            offset: "-1200",
            useDaylight: false
        },
        "Etc/GMT+2": {
            name: "GMT-02:00",
            timezone: "GMT-02:00",
            offset: "-0200",
            useDaylight: false
        },
        "Etc/GMT+3": {
            name: "GMT-03:00",
            timezone: "GMT-03:00",
            offset: "-0300",
            useDaylight: false
        },
        "Etc/GMT+4": {
            name: "GMT-04:00",
            timezone: "GMT-04:00",
            offset: "-0400",
            useDaylight: false
        },
        "Etc/GMT+5": {
            name: "GMT-05:00",
            timezone: "GMT-05:00",
            offset: "-0500",
            useDaylight: false
        },
        "Etc/GMT+6": {
            name: "GMT-06:00",
            timezone: "GMT-06:00",
            offset: "-0600",
            useDaylight: false
        },
        "Etc/GMT+7": {
            name: "GMT-07:00",
            timezone: "GMT-07:00",
            offset: "-0700",
            useDaylight: false
        },
        "Etc/GMT+8": {
            name: "GMT-08:00",
            timezone: "GMT-08:00",
            offset: "-0800",
            useDaylight: false
        },
        "Etc/GMT+9": {
            name: "GMT-09:00",
            timezone: "GMT-09:00",
            offset: "-0900",
            useDaylight: false
        },
        "Etc/GMT-0": {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: false
        },
        "Etc/GMT-1": {
            name: "GMT+01:00",
            timezone: "GMT+01:00",
            offset: "+0100",
            useDaylight: false
        },
        "Etc/GMT-10": {
            name: "GMT+10:00",
            timezone: "GMT+10:00",
            offset: "+1000",
            useDaylight: false
        },
        "Etc/GMT-11": {
            name: "GMT+11:00",
            timezone: "GMT+11:00",
            offset: "+1100",
            useDaylight: false
        },
        "Etc/GMT-12": {
            name: "GMT+12:00",
            timezone: "GMT+12:00",
            offset: "+1200",
            useDaylight: false
        },
        "Etc/GMT-13": {
            name: "GMT+13:00",
            timezone: "GMT+13:00",
            offset: "+1300",
            useDaylight: false
        },
        "Etc/GMT-14": {
            name: "GMT+14:00",
            timezone: "GMT+14:00",
            offset: "+1400",
            useDaylight: false
        },
        "Etc/GMT-2": {
            name: "GMT+02:00",
            timezone: "GMT+02:00",
            offset: "+0200",
            useDaylight: false
        },
        "Etc/GMT-3": {
            name: "GMT+03:00",
            timezone: "GMT+03:00",
            offset: "+0300",
            useDaylight: false
        },
        "Etc/GMT-4": {
            name: "GMT+04:00",
            timezone: "GMT+04:00",
            offset: "+0400",
            useDaylight: false
        },
        "Etc/GMT-5": {
            name: "GMT+05:00",
            timezone: "GMT+05:00",
            offset: "+0500",
            useDaylight: false
        },
        "Etc/GMT-6": {
            name: "GMT+06:00",
            timezone: "GMT+06:00",
            offset: "+0600",
            useDaylight: false
        },
        "Etc/GMT-7": {
            name: "GMT+07:00",
            timezone: "GMT+07:00",
            offset: "+0700",
            useDaylight: false
        },
        "Etc/GMT-8": {
            name: "GMT+08:00",
            timezone: "GMT+08:00",
            offset: "+0800",
            useDaylight: false
        },
        "Etc/GMT-9": {
            name: "GMT+09:00",
            timezone: "GMT+09:00",
            offset: "+0900",
            useDaylight: false
        },
        "Etc/GMT0": {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: false
        },
        "Etc/Greenwich": {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: false
        },
        "Etc/UCT": {
            name: "Coordinated Universal Time",
            timezone: "UTC",
            offset: "+0000",
            useDaylight: false
        },
        "Etc/UTC": {
            name: "Coordinated Universal Time",
            timezone: "UTC",
            offset: "+0000",
            useDaylight: false
        },
        "Etc/Universal": {
            name: "Coordinated Universal Time",
            timezone: "UTC",
            offset: "+0000",
            useDaylight: false
        },
        "Etc/Zulu": {
            name: "Coordinated Universal Time",
            timezone: "UTC",
            offset: "+0000",
            useDaylight: false
        },
        "Europe/Amsterdam": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Europe/Andorra": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Europe/Astrakhan": {
            name: "GMT+04:00",
            timezone: "GMT+04:00",
            offset: "+0400",
            useDaylight: false
        },
        "Europe/Athens": {
            name: "Eastern European Time",
            timezone: "OEZ",
            offset: "+0200",
            useDaylight: true
        },
        "Europe/Belfast": {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: true
        },
        "Europe/Belgrade": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Europe/Berlin": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Europe/Bratislava": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Europe/Brussels": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Europe/Bucharest": {
            name: "Eastern European Time",
            timezone: "OEZ",
            offset: "+0200",
            useDaylight: true
        },
        "Europe/Budapest": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Europe/Busingen": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Europe/Chisinau": {
            name: "Eastern European Time",
            timezone: "OEZ",
            offset: "+0200",
            useDaylight: true
        },
        "Europe/Copenhagen": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Europe/Dublin": {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: true
        },
        "Europe/Gibraltar": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Europe/Guernsey": {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: true
        },
        "Europe/Helsinki": {
            name: "Eastern European Time",
            timezone: "OEZ",
            offset: "+0200",
            useDaylight: true
        },
        "Europe/Isle_of_Man": {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: true
        },
        "Europe/Istanbul": {
            name: "Eastern European Time",
            timezone: "OEZ",
            offset: "+0300",
            useDaylight: false
        },
        "Europe/Jersey": {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: true
        },
        "Europe/Kaliningrad": {
            name: "Eastern European Time",
            timezone: "OEZ",
            offset: "+0200",
            useDaylight: false
        },
        "Europe/Kiev": {
            name: "Eastern European Time",
            timezone: "OEZ",
            offset: "+0200",
            useDaylight: true
        },
        "Europe/Kirov": {
            name: "GMT+03:00",
            timezone: "GMT+03:00",
            offset: "+0300",
            useDaylight: false
        },
        "Europe/Lisbon": {
            name: "Western European Time",
            timezone: "WEZ",
            offset: "+0000",
            useDaylight: true
        },
        "Europe/Ljubljana": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Europe/London": {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: true
        },
        "Europe/Luxembourg": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Europe/Madrid": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Europe/Malta": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Europe/Mariehamn": {
            name: "Eastern European Time",
            timezone: "OEZ",
            offset: "+0200",
            useDaylight: true
        },
        "Europe/Minsk": {
            name: "Moscow Standard Time",
            timezone: "MSK",
            offset: "+0300",
            useDaylight: false
        },
        "Europe/Monaco": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Europe/Moscow": {
            name: "Moscow Standard Time",
            timezone: "MSK",
            offset: "+0300",
            useDaylight: false
        },
        "Europe/Nicosia": {
            name: "Eastern European Time",
            timezone: "OEZ",
            offset: "+0200",
            useDaylight: true
        },
        "Europe/Oslo": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Europe/Paris": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Europe/Podgorica": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Europe/Prague": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Europe/Riga": {
            name: "Eastern European Time",
            timezone: "OEZ",
            offset: "+0200",
            useDaylight: true
        },
        "Europe/Rome": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Europe/Samara": {
            name: "Samara Time",
            timezone: "SAMT",
            offset: "+0400",
            useDaylight: false
        },
        "Europe/San_Marino": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Europe/Sarajevo": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Europe/Saratov": {
            name: "GMT+04:00",
            timezone: "GMT+04:00",
            offset: "+0400",
            useDaylight: false
        },
        "Europe/Simferopol": {
            name: "Moscow Standard Time",
            timezone: "MSK",
            offset: "+0300",
            useDaylight: false
        },
        "Europe/Skopje": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Europe/Sofia": {
            name: "Eastern European Time",
            timezone: "OEZ",
            offset: "+0200",
            useDaylight: true
        },
        "Europe/Stockholm": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Europe/Tallinn": {
            name: "Eastern European Time",
            timezone: "OEZ",
            offset: "+0200",
            useDaylight: true
        },
        "Europe/Tirane": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Europe/Tiraspol": {
            name: "Eastern European Time",
            timezone: "OEZ",
            offset: "+0200",
            useDaylight: true
        },
        "Europe/Ulyanovsk": {
            name: "GMT+04:00",
            timezone: "GMT+04:00",
            offset: "+0400",
            useDaylight: false
        },
        "Europe/Uzhgorod": {
            name: "Eastern European Time",
            timezone: "OEZ",
            offset: "+0200",
            useDaylight: true
        },
        "Europe/Vaduz": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Europe/Vatican": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Europe/Vienna": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Europe/Vilnius": {
            name: "Eastern European Time",
            timezone: "OEZ",
            offset: "+0200",
            useDaylight: true
        },
        "Europe/Volgograd": {
            name: "Moscow Standard Time",
            timezone: "MSK",
            offset: "+0300",
            useDaylight: false
        },
        "Europe/Warsaw": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Europe/Zagreb": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        "Europe/Zaporozhye": {
            name: "Eastern European Time",
            timezone: "OEZ",
            offset: "+0200",
            useDaylight: true
        },
        "Europe/Zurich": {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        GB: {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: true
        },
        "GB-Eire": {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: true
        },
        GMT: {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: false
        },
        GMT0: {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: false
        },
        Greenwich: {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: false
        },
        Hongkong: {
            name: "Hong Kong Time",
            timezone: "HKT",
            offset: "+0800",
            useDaylight: false
        },
        Iceland: {
            name: "Greenwich Mean Time",
            timezone: "GMT",
            offset: "+0000",
            useDaylight: false
        },
        "Indian/Antananarivo": {
            name: "Eastern African Time",
            timezone: "EAT",
            offset: "+0300",
            useDaylight: false
        },
        "Indian/Chagos": {
            name: "Indian Ocean Territory Time",
            timezone: "IOT",
            offset: "+0600",
            useDaylight: false
        },
        "Indian/Christmas": {
            name: "Christmas Island Time",
            timezone: "CXT",
            offset: "+0700",
            useDaylight: false
        },
        "Indian/Cocos": {
            name: "Cocos Islands Time",
            timezone: "CCT",
            offset: "+0630",
            useDaylight: false
        },
        "Indian/Comoro": {
            name: "Eastern African Time",
            timezone: "EAT",
            offset: "+0300",
            useDaylight: false
        },
        "Indian/Kerguelen": {
            name: "French Southern & Antarctic Lands Time",
            timezone: "TFT",
            offset: "+0500",
            useDaylight: false
        },
        "Indian/Mahe": {
            name: "Seychelles Time",
            timezone: "SCT",
            offset: "+0400",
            useDaylight: false
        },
        "Indian/Maldives": {
            name: "Maldives Time",
            timezone: "MVT",
            offset: "+0500",
            useDaylight: false
        },
        "Indian/Mauritius": {
            name: "Mauritius Time",
            timezone: "MUT",
            offset: "+0400",
            useDaylight: false
        },
        "Indian/Mayotte": {
            name: "Eastern African Time",
            timezone: "EAT",
            offset: "+0300",
            useDaylight: false
        },
        "Indian/Reunion": {
            name: "Reunion Time",
            timezone: "RET",
            offset: "+0400",
            useDaylight: false
        },
        Iran: {
            name: "Iran Standard Time",
            timezone: "IRST",
            offset: "+0330",
            useDaylight: true
        },
        Israel: {
            name: "Israel Standard Time",
            timezone: "IST",
            offset: "+0200",
            useDaylight: true
        },
        Jamaica: {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: false
        },
        Japan: {
            name: "Japan Standard Time",
            timezone: "JST",
            offset: "+0900",
            useDaylight: false
        },
        Kwajalein: {
            name: "Marshall Islands Time",
            timezone: "MHT",
            offset: "+1200",
            useDaylight: false
        },
        Libya: {
            name: "Eastern European Time",
            timezone: "OEZ",
            offset: "+0200",
            useDaylight: false
        },
        MET: {
            name: "Middle Europe Time",
            timezone: "MET",
            offset: "+0100",
            useDaylight: true
        },
        MST7MDT: {
            name: "Mountain Standard Time",
            timezone: "MST",
            offset: "-0700",
            useDaylight: true
        },
        "Mexico/BajaNorte": {
            name: "Pacific Standard Time",
            timezone: "PST",
            offset: "-0800",
            useDaylight: true
        },
        "Mexico/BajaSur": {
            name: "Mountain Standard Time",
            timezone: "MST",
            offset: "-0700",
            useDaylight: true
        },
        "Mexico/General": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: true
        },
        NZ: {
            name: "New Zealand Standard Time",
            timezone: "NZDT",
            offset: "+1300",
            useDaylight: true
        },
        "NZ-CHAT": {
            name: "Chatham Standard Time",
            timezone: "CHADT",
            offset: "+1345",
            useDaylight: true
        },
        Navajo: {
            name: "Mountain Standard Time",
            timezone: "MST",
            offset: "-0700",
            useDaylight: true
        },
        PRC: {
            name: "China Standard Time",
            timezone: "CST",
            offset: "+0800",
            useDaylight: false
        },
        PST8PDT: {
            name: "Pacific Standard Time",
            timezone: "PST",
            offset: "-0800",
            useDaylight: true
        },
        "Pacific/Apia": {
            name: "West Samoa Standard Time",
            timezone: "WSDT",
            offset: "+1400",
            useDaylight: true
        },
        "Pacific/Auckland": {
            name: "New Zealand Standard Time",
            timezone: "NZDT",
            offset: "+1300",
            useDaylight: true
        },
        "Pacific/Bougainville": {
            name: "Bougainville Standard Time",
            timezone: "BST",
            offset: "+1100",
            useDaylight: false
        },
        "Pacific/Chatham": {
            name: "Chatham Standard Time",
            timezone: "CHADT",
            offset: "+1345",
            useDaylight: true
        },
        "Pacific/Chuuk": {
            name: "Chuuk Time",
            timezone: "CHUT",
            offset: "+1000",
            useDaylight: false
        },
        "Pacific/Easter": {
            name: "Easter Is. Time",
            timezone: "EASST",
            offset: "-0500",
            useDaylight: true
        },
        "Pacific/Efate": {
            name: "Vanuatu Time",
            timezone: "VUT",
            offset: "+1100",
            useDaylight: false
        },
        "Pacific/Enderbury": {
            name: "Phoenix Is. Time",
            timezone: "PHOT",
            offset: "+1300",
            useDaylight: false
        },
        "Pacific/Fakaofo": {
            name: "Tokelau Time",
            timezone: "TKT",
            offset: "+1300",
            useDaylight: false
        },
        "Pacific/Fiji": {
            name: "Fiji Time",
            timezone: "FJST",
            offset: "+1300",
            useDaylight: true
        },
        "Pacific/Funafuti": {
            name: "Tuvalu Time",
            timezone: "TVT",
            offset: "+1200",
            useDaylight: false
        },
        "Pacific/Galapagos": {
            name: "Galapagos Time",
            timezone: "GALT",
            offset: "-0600",
            useDaylight: false
        },
        "Pacific/Gambier": {
            name: "Gambier Time",
            timezone: "GAMT",
            offset: "-0900",
            useDaylight: false
        },
        "Pacific/Guadalcanal": {
            name: "Solomon Is. Time",
            timezone: "SBT",
            offset: "+1100",
            useDaylight: false
        },
        "Pacific/Guam": {
            name: "Chamorro Standard Time",
            timezone: "ChST",
            offset: "+1000",
            useDaylight: false
        },
        "Pacific/Honolulu": {
            name: "Hawaii Standard Time",
            timezone: "HST",
            offset: "-1000",
            useDaylight: false
        },
        "Pacific/Johnston": {
            name: "Hawaii Standard Time",
            timezone: "HST",
            offset: "-1000",
            useDaylight: false
        },
        "Pacific/Kiritimati": {
            name: "Line Is. Time",
            timezone: "LINT",
            offset: "+1400",
            useDaylight: false
        },
        "Pacific/Kosrae": {
            name: "Kosrae Time",
            timezone: "KOST",
            offset: "+1100",
            useDaylight: false
        },
        "Pacific/Kwajalein": {
            name: "Marshall Islands Time",
            timezone: "MHT",
            offset: "+1200",
            useDaylight: false
        },
        "Pacific/Majuro": {
            name: "Marshall Islands Time",
            timezone: "MHT",
            offset: "+1200",
            useDaylight: false
        },
        "Pacific/Marquesas": {
            name: "Marquesas Time",
            timezone: "MART",
            offset: "-0930",
            useDaylight: false
        },
        "Pacific/Midway": {
            name: "Samoa Standard Time",
            timezone: "SST",
            offset: "-1100",
            useDaylight: false
        },
        "Pacific/Nauru": {
            name: "Nauru Time",
            timezone: "NRT",
            offset: "+1200",
            useDaylight: false
        },
        "Pacific/Niue": {
            name: "Niue Time",
            timezone: "NUT",
            offset: "-1100",
            useDaylight: false
        },
        "Pacific/Norfolk": {
            name: "Norfolk Time",
            timezone: "NFT",
            offset: "+1100",
            useDaylight: false
        },
        "Pacific/Noumea": {
            name: "New Caledonia Time",
            timezone: "NCT",
            offset: "+1100",
            useDaylight: false
        },
        "Pacific/Pago_Pago": {
            name: "Samoa Standard Time",
            timezone: "SST",
            offset: "-1100",
            useDaylight: false
        },
        "Pacific/Palau": {
            name: "Palau Time",
            timezone: "PWT",
            offset: "+0900",
            useDaylight: false
        },
        "Pacific/Pitcairn": {
            name: "Pitcairn Standard Time",
            timezone: "PST",
            offset: "-0800",
            useDaylight: false
        },
        "Pacific/Pohnpei": {
            name: "Pohnpei Time",
            timezone: "PONT",
            offset: "+1100",
            useDaylight: false
        },
        "Pacific/Ponape": {
            name: "Pohnpei Time",
            timezone: "PONT",
            offset: "+1100",
            useDaylight: false
        },
        "Pacific/Port_Moresby": {
            name: "Papua New Guinea Time",
            timezone: "PGT",
            offset: "+1000",
            useDaylight: false
        },
        "Pacific/Rarotonga": {
            name: "Cook Is. Time",
            timezone: "CKT",
            offset: "-1000",
            useDaylight: false
        },
        "Pacific/Saipan": {
            name: "Chamorro Standard Time",
            timezone: "ChST",
            offset: "+1000",
            useDaylight: false
        },
        "Pacific/Samoa": {
            name: "Samoa Standard Time",
            timezone: "SST",
            offset: "-1100",
            useDaylight: false
        },
        "Pacific/Tahiti": {
            name: "Tahiti Time",
            timezone: "TAHT",
            offset: "-1000",
            useDaylight: false
        },
        "Pacific/Tarawa": {
            name: "Gilbert Is. Time",
            timezone: "GILT",
            offset: "+1200",
            useDaylight: false
        },
        "Pacific/Tongatapu": {
            name: "Tonga Time",
            timezone: "TOST",
            offset: "+1400",
            useDaylight: true
        },
        "Pacific/Truk": {
            name: "Chuuk Time",
            timezone: "CHUT",
            offset: "+1000",
            useDaylight: false
        },
        "Pacific/Wake": {
            name: "Wake Time",
            timezone: "WAKT",
            offset: "+1200",
            useDaylight: false
        },
        "Pacific/Wallis": {
            name: "Wallis & Futuna Time",
            timezone: "WFT",
            offset: "+1200",
            useDaylight: false
        },
        "Pacific/Yap": {
            name: "Chuuk Time",
            timezone: "CHUT",
            offset: "+1000",
            useDaylight: false
        },
        Poland: {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        Portugal: {
            name: "Western European Time",
            timezone: "WEZ",
            offset: "+0000",
            useDaylight: true
        },
        ROK: {
            name: "Korea Standard Time",
            timezone: "KST",
            offset: "+0900",
            useDaylight: false
        },
        Singapore: {
            name: "Singapore Time",
            timezone: "SGT",
            offset: "+0800",
            useDaylight: false
        },
        "SystemV/AST4": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: false
        },
        "SystemV/AST4ADT": {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: true
        },
        "SystemV/CST6": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: false
        },
        "SystemV/CST6CDT": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: true
        },
        "SystemV/EST5": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: false
        },
        "SystemV/EST5EDT": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: true
        },
        "SystemV/HST10": {
            name: "Hawaii Standard Time",
            timezone: "HST",
            offset: "-1000",
            useDaylight: false
        },
        "SystemV/MST7": {
            name: "Mountain Standard Time",
            timezone: "MST",
            offset: "-0700",
            useDaylight: false
        },
        "SystemV/MST7MDT": {
            name: "Mountain Standard Time",
            timezone: "MST",
            offset: "-0700",
            useDaylight: true
        },
        "SystemV/PST8": {
            name: "Pacific Standard Time",
            timezone: "PST",
            offset: "-0800",
            useDaylight: false
        },
        "SystemV/PST8PDT": {
            name: "Pacific Standard Time",
            timezone: "PST",
            offset: "-0800",
            useDaylight: true
        },
        "SystemV/YST9": {
            name: "Alaska Standard Time",
            timezone: "AKST",
            offset: "-0900",
            useDaylight: false
        },
        "SystemV/YST9YDT": {
            name: "Alaska Standard Time",
            timezone: "AKST",
            offset: "-0900",
            useDaylight: true
        },
        Turkey: {
            name: "Eastern European Time",
            timezone: "OEZ",
            offset: "+0300",
            useDaylight: false
        },
        UCT: {
            name: "Coordinated Universal Time",
            timezone: "UTC",
            offset: "+0000",
            useDaylight: false
        },
        "US/Alaska": {
            name: "Alaska Standard Time",
            timezone: "AKST",
            offset: "-0900",
            useDaylight: true
        },
        "US/Aleutian": {
            name: "Hawaii Standard Time",
            timezone: "HST",
            offset: "-1000",
            useDaylight: true
        },
        "US/Arizona": {
            name: "Mountain Standard Time",
            timezone: "MST",
            offset: "-0700",
            useDaylight: false
        },
        "US/Central": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: true
        },
        "US/East-Indiana": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: true
        },
        "US/Eastern": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: true
        },
        "US/Hawaii": {
            name: "Hawaii Standard Time",
            timezone: "HST",
            offset: "-1000",
            useDaylight: false
        },
        "US/Indiana-Starke": {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: true
        },
        "US/Michigan": {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: true
        },
        "US/Mountain": {
            name: "Mountain Standard Time",
            timezone: "MST",
            offset: "-0700",
            useDaylight: true
        },
        "US/Pacific": {
            name: "Pacific Standard Time",
            timezone: "PST",
            offset: "-0800",
            useDaylight: true
        },
        "US/Pacific-New": {
            name: "Pacific Standard Time",
            timezone: "PST",
            offset: "-0800",
            useDaylight: true
        },
        "US/Samoa": {
            name: "Samoa Standard Time",
            timezone: "SST",
            offset: "-1100",
            useDaylight: false
        },
        UTC: {
            name: "Coordinated Universal Time",
            timezone: "UTC",
            offset: "+0000",
            useDaylight: false
        },
        Universal: {
            name: "Coordinated Universal Time",
            timezone: "UTC",
            offset: "+0000",
            useDaylight: false
        },
        "W-SU": {
            name: "Moscow Standard Time",
            timezone: "MSK",
            offset: "+0300",
            useDaylight: false
        },
        WET: {
            name: "Western European Time",
            timezone: "WEZ",
            offset: "+0000",
            useDaylight: true
        },
        Zulu: {
            name: "Coordinated Universal Time",
            timezone: "UTC",
            offset: "+0000",
            useDaylight: false
        },
        EST: {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: false
        },
        HST: {
            name: "Hawaii Standard Time",
            timezone: "HST",
            offset: "-1000",
            useDaylight: false
        },
        MST: {
            name: "Mountain Standard Time",
            timezone: "MST",
            offset: "-0700",
            useDaylight: false
        },
        ACT: {
            name: "Australian Central Standard Time (Northern Territory)",
            timezone: "ACST",
            offset: "+0930",
            useDaylight: false
        },
        AET: {
            name: "Australian Eastern Standard Time (New South Wales)",
            timezone: "AEDT",
            offset: "+1100",
            useDaylight: true
        },
        AGT: {
            name: "Argentine Time",
            timezone: "ART",
            offset: "-0300",
            useDaylight: false
        },
        ART: {
            name: "Eastern European Time",
            timezone: "OEZ",
            offset: "+0200",
            useDaylight: false
        },
        AST: {
            name: "Alaska Standard Time",
            timezone: "AKST",
            offset: "-0900",
            useDaylight: true
        },
        BET: {
            name: "Brasilia Time",
            timezone: "BRST",
            offset: "-0200",
            useDaylight: true
        },
        BST: {
            name: "Bangladesh Time",
            timezone: "BDT",
            offset: "+0600",
            useDaylight: false
        },
        CAT: {
            name: "Central African Time",
            timezone: "CAT",
            offset: "+0200",
            useDaylight: false
        },
        CNT: {
            name: "Newfoundland Standard Time",
            timezone: "NST",
            offset: "-0330",
            useDaylight: true
        },
        CST: {
            name: "Central Standard Time",
            timezone: "CST",
            offset: "-0600",
            useDaylight: true
        },
        CTT: {
            name: "China Standard Time",
            timezone: "CST",
            offset: "+0800",
            useDaylight: false
        },
        EAT: {
            name: "Eastern African Time",
            timezone: "EAT",
            offset: "+0300",
            useDaylight: false
        },
        ECT: {
            name: "Central European Time",
            timezone: "MEZ",
            offset: "+0100",
            useDaylight: true
        },
        IET: {
            name: "Eastern Standard Time",
            timezone: "EST",
            offset: "-0500",
            useDaylight: true
        },
        IST: {
            name: "India Standard Time",
            timezone: "IST",
            offset: "+0530",
            useDaylight: false
        },
        JST: {
            name: "Japan Standard Time",
            timezone: "JST",
            offset: "+0900",
            useDaylight: false
        },
        MIT: {
            name: "West Samoa Standard Time",
            timezone: "WSDT",
            offset: "+1400",
            useDaylight: true
        },
        NET: {
            name: "Armenia Time",
            timezone: "AMT",
            offset: "+0400",
            useDaylight: false
        },
        NST: {
            name: "New Zealand Standard Time",
            timezone: "NZDT",
            offset: "+1300",
            useDaylight: true
        },
        PLT: {
            name: "Pakistan Time",
            timezone: "PKT",
            offset: "+0500",
            useDaylight: false
        },
        PNT: {
            name: "Mountain Standard Time",
            timezone: "MST",
            offset: "-0700",
            useDaylight: false
        },
        PRT: {
            name: "Atlantic Standard Time",
            timezone: "AST",
            offset: "-0400",
            useDaylight: false
        },
        PST: {
            name: "Pacific Standard Time",
            timezone: "PST",
            offset: "-0800",
            useDaylight: true
        },
        SST: {
            name: "Solomon Is. Time",
            timezone: "SBT",
            offset: "+1100",
            useDaylight: false
        },
        VST: {
            name: "Indochina Time",
            timezone: "ICT",
            offset: "+0700",
            useDaylight: false
        }
    };
    this.getAvailableZoneIDs = function() {
        var ids = [], id;
        for (id in timezones) {
            ids.push(id);
        }
        return ids;
    };
    this.getTimeZoneInfo = function(tzid) {
        var info = timezones[tzid];
        return info ? J$VM.System.objectCopy(info, {
            id: tzid
        }) : null;
    };
    this.useDaylightTime = function(tzid) {
        var tz = this.getTimeZoneInfo(tzid);
        return tz ? tz.useDaylight : false;
    };
}();

$package("js.text");

js.text.DateFormatSymbols = function(symbols) {
    var CLASS = js.text.DateFormatSymbols, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, System = J$VM.System;
    CLASS.Default = {
        eras: [ "BC", "AD" ],
        lMonths: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
        sMonths: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ],
        lWeekdays: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
        sWeekdays: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
        ampm: [ "AM", "PM" ]
    };
    thi$.getEras = function() {
        return this.symbols.eras;
    };
    thi$.getMonths = function() {
        return this.symbols.lMonths;
    };
    thi$.getShortMonths = function() {
        return this.symbols.sMonths;
    };
    thi$.getWeekdays = function() {
        return this.symbols.lWeekdays;
    };
    thi$.getShortWeekdays = function() {
        return this.symbols.sWeekdays;
    };
    thi$.getAmPmStrings = function() {
        return this.symbols.ampm;
    };
    thi$._init = function(symbols) {
        var syb = System.objectCopy(CLASS.Default, null, true);
        syb = System.objectCopy(symbols || {}, syb, true);
        var _ = js.util.LinkedList;
        _.$decorate(syb.eras);
        _.$decorate(syb.lMonths);
        _.$decorate(syb.sMonths);
        _.$decorate(syb.lWeekdays);
        _.$decorate(syb.sWeekdays);
        _.$decorate(syb.ampm);
        this.symbols = syb;
    };
    this._init.apply(this, arguments);
};

$package("js.text");

js.text.NumberFormatSymbols = function(symbols) {
    var CLASS = js.text.NumberFormatSymbols, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, System = J$VM.System;
    CLASS.Default = {
        zero: "0",
        grouping: ",",
        decimal: ".",
        perMill: "‰",
        percent: "%",
        digit: "#",
        minus: "-",
        currency: "$",
        intlCurrency: "¤"
    };
    thi$.getZeroDigit = function() {
        return this.symbols.zero;
    };
    thi$.getGroupingSeparator = function() {
        return this.symbols.grouping;
    };
    thi$.getDecimalSeparator = function() {
        return this.symbols.decimal;
    };
    thi$.getPerMill = function() {
        return this.symbols.perMill;
    };
    thi$.getPercent = function() {
        return this.symbols.percent;
    };
    thi$.getDigit = function() {
        return this.symbols.digit;
    };
    thi$.getMinusSign = function() {
        return this.symbols.minus;
    };
    thi$.getCurrencySymbol = function() {
        return this.symbols.currency;
    };
    thi$.getInternationalCurrencySymbol = function() {
        return this.symbols.intlCurrency;
    };
    thi$._init = function(symbols) {
        var syb = System.objectCopy(CLASS.Default, null);
        syb = System.objectCopy(symbols || {}, syb);
        this.symbols = syb;
    };
    this._init.apply(this, arguments);
};

$package("js.text");

js.text.Format = function(pattern, symbols) {
    var CLASS = js.text.Format, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    thi$._pad = function(val, len) {
        val = "000" + String(val);
        return val.slice(val.length - (len || 2));
    };
    thi$.setPattern = function(pattern) {
        this.pattern = pattern;
    };
    thi$.setSymbols = function(symbols) {
        this.symbols = symbols;
    };
    thi$.format = function(value) {
        return value ? value.toString() : value;
    };
    thi$.parse = function(strValue) {
        return strValue;
    };
    thi$._init = function(pattern, symbols) {
        this.setSymbols(symbols);
        this.setPattern(pattern);
    };
    this._init.apply(this, arguments);
};

$package("js.text");

$import("js.text.Format");

js.text.YearFormat = function(pattern, symbols) {
    var CLASS = js.text.YearFormat, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    thi$.setPattern = function(pattern) {
        this.pattern = pattern || "yyyy";
    };
    thi$.format = function(value) {
        return this._pad(value, this.pattern.length);
    };
    this._init.apply(this, arguments);
}.$extend(js.text.Format);

$package("js.text");

$import("js.text.Format");

js.text.MonthFormat = function(pattern, symbols) {
    var CLASS = js.text.MonthFormat, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class;
    thi$.setPattern = function(pattern) {
        this.pattern = pattern || "MM";
    };
    thi$.setSymbols = function(symbols) {
        this.symbols = new (Class.forName("js.text.DateFormatSymbols"))(symbols);
    }.$override(this.setSymbols);
    thi$.format = function(value) {
        var ret;
        switch (this.pattern) {
          case "M":
            ret = value + 1 + "";
            break;

          case "MM":
            ret = this._pad(value + 1, 2);
            break;

          case "MMM":
            ret = this.symbols.getShortMonths()[value];
            break;

          default:
            ret = this.symbols.getMonths()[value];
            break;
        }
        return ret;
    };
    this._init.apply(this, arguments);
}.$extend(js.text.Format);

$package("js.text");

$import("js.text.Format");

js.text.HourFormat = function(pattern, symbols) {
    var CLASS = js.text.HourFormat, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    thi$.setPattern = function(pattern) {
        this.pattern = pattern || "HH";
    };
    thi$.format = function(value) {
        var ret;
        switch (this.pattern) {
          case "h":
            ret = (value % 12 || 12) + "";
            break;

          case "hh":
            ret = this._pad(value % 12 || 12, 2);
            break;

          case "H":
            ret = value + "";
            break;

          default:
            ret = this._pad(value, 2);
            break;
        }
        return ret;
    };
    this._init.apply(this, arguments);
}.$extend(js.text.Format);

$package("js.text");

$import("js.text.Format");

js.text.MinuteFormat = function(pattern, symbols) {
    var CLASS = js.text.MinuteFormat, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    thi$.setPattern = function(pattern) {
        this.pattern = pattern || "mm";
    };
    thi$.format = function(value) {
        var ret;
        switch (this.pattern) {
          case "m":
          case "s":
            ret = value + "";
            break;

          case "mm":
          case "ss":
            ret = this._pad(value, 2);
            break;
        }
        return ret;
    };
    this._init.apply(this, arguments);
}.$extend(js.text.Format);

$package("js.text");

$import("js.text.Format");

$import("js.util.LinkedList");

js.text.SimpleDateFormat = function(pattern, DateFormatSymbols) {
    var CLASS = js.text.SimpleDateFormat, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, System = J$VM.System, TimeZone = Class.forName("js.text.TimeZone");
    var TOKEN = /y{1,4}|M{1,}|d{1,2}|E{1,}|([Hhms])\1?|S(?:SS)?|z{1,}|Z{1,}|[aG]|"[^"]*"|'[^']*'/g;
    var Regx = {
        y: "(\\d{4})",
        yy: "(\\d{2})",
        yyy: "(\\d{4})",
        yyyy: "(\\d{4})",
        G: "([^\\d\\s].*)",
        M: "([1-9]|1[012])",
        MM: "(0[1-9]|1[012])",
        MMM: "(\\S+)",
        MMMM: "(\\S+)",
        d: "(3[01]|[12][0-9]|[1-9])",
        dd: "(0[1-9]|[12][0-9]|3[01])",
        E: "(\\S+)",
        EE: "(\\S+)",
        EEE: "(\\S+)",
        EEEE: "(\\S+)",
        H: "([0-9]|1[0-9]|2[0-3])",
        HH: "(0[0-9]|1[0-9]|2[0-3])",
        h: "([1-9]|1[012])",
        hh: "(0[1-9]|1[012])",
        a: "(\\S+)",
        m: "([0-9]|[1-5][0-9])",
        mm: "([0-5][0-9])",
        s: "([0-9]|[1-5][0-9])",
        ss: "([0-5][0-9])",
        S: "(\\d{1,3})",
        SSS: "(\\d{3})",
        zzzz: "(([a-zA-Z]{3,}[\\sa-zA-Z&.]*\\s+Time\\s*(\\([\\sa-zA-Z/]+\\))?)|([a-zA-Z]{3,5}[\\+\\-]\\d{2}:\\d{2}))",
        z: "([a-zA-Z]{3,5}[\\+\\-]\\d{2}:\\d{2}|[a-zA-Z]{3,5})",
        Z: "([\\-\\+]\\d{2,4})"
    };
    var SetterOrder = js.util.LinkedList.$decorate([ "y", "M", "d" ]);
    var Getter = new function() {
        var _pad = function(val, len) {
            val = "000" + String(val);
            return val.slice(val.length - (len || 2));
        };
        var _week = function(D, $, b) {
            return b ? D.getUTCDay() : D.getDay();
        };
        this.y = function(D, $, b) {
            return _pad(b ? D.getUTCFullYear() : D.getFullYear(), 4);
        };
        this.yy = function(D, $, b) {
            return _pad(this.yyyy(D, $, b), 2);
        };
        this.yyy = function(D, $, b) {
            return _pad(b ? D.getUTCFullYear() : D.getFullYear(), 4);
        };
        this.yyyy = function(D, $, b) {
            return _pad(b ? D.getUTCFullYear() : D.getFullYear(), 4);
        };
        this.M = function(D, $, b) {
            return (b ? D.getUTCMonth() : D.getMonth()) + 1;
        };
        this.MM = function(D, $, b) {
            return _pad(this.M(D, $, b), 2);
        };
        this.MMM = function(D, $, b) {
            return $.getShortMonths()[this.M(D, $, b) - 1];
        };
        this.MMMM = function(D, $, b) {
            return $.getMonths()[this.M(D, $, b) - 1];
        };
        this.d = function(D, $, b) {
            return b ? D.getUTCDate() : D.getDate();
        };
        this.dd = function(D, $, b) {
            return _pad(this.d(D, $, b), 2);
        };
        this.E = function(D, $, b) {
            return $.getShortWeekdays()[_week(D, $, b)];
        };
        this.EE = function(D, $, b) {
            return $.getShortWeekdays()[_week(D, $, b)];
        };
        this.EEE = function(D, $, b) {
            return $.getShortWeekdays()[_week(D, $, b)];
        };
        this.EEEE = function(D, $, b) {
            return $.getWeekdays()[_week(D, $, b)];
        };
        this.H = function(D, $, b) {
            return b ? D.getUTCHours() : D.getHours();
        };
        this.HH = function(D, $, b) {
            return _pad(this.H(D, $, b), 2);
        };
        this.h = function(D, $, b) {
            return this.H(D, $, b) % 12 || 12;
        };
        this.hh = function(D, $, b) {
            return _pad(this.h(D, $, b), 2);
        };
        this.m = function(D, $, b) {
            return b ? D.getUTCMinutes() : D.getMinutes();
        };
        this.mm = function(D, $, b) {
            return _pad(this.m(D, $, b), 2);
        };
        this.s = function(D, $, b) {
            return b ? D.getUTCSeconds() : D.getSeconds();
        };
        this.ss = function(D, $, b) {
            return _pad(this.s(D, $, b));
        };
        this.S = function(D, $, b) {
            return b ? D.getUTCMilliseconds() : D.getMilliseconds();
        };
        this.SSS = function(D, $, b) {
            return _pad(this.S(D, $, b), 3);
        };
        this.a = function(D, $, b) {
            return $.getAmPmStrings()[this.H(D, $, b) < 12 ? 0 : 1];
        };
        this.G = function(D, $, b) {
            return $.getEras()[parseInt(this.yyyy(D, $, b), 10) < 0 ? 0 : 1];
        };
        this.zzzz = function(D, $, b) {
            var tz = D.timezone || {};
            return b ? "UTC" : tz.name || "";
        };
        this.z = function(D, $, b) {
            var tz = D.timezone || {};
            return b ? "UTC" : tz.timezone || "";
        };
        this.Z = function(D, $, b) {
            var tz = D.timezone;
            if (tz && tz.offset) {
                return tz.offset;
            } else {
                var o = D.getTimezoneOffset(), ao = Math.abs(o);
                return (o > 0 ? "-" : "+") + _pad(Math.floor(ao / 60) * 100 + ao % 60, 4);
            }
        };
    }();
    var Setter = new function() {
        var _toFullYear = function(v) {
            v = parseInt(v, 10);
            if (isNaN(v) || v.toString().length > 2) {
                return v;
            }
            var d = new Date(), defaultCenturyStartYear = d.getFullYear() - 80, ambiguousTwoDigitYear = defaultCenturyStartYear % 100;
            v += parseInt(defaultCenturyStartYear / 100) * 100 + (v < ambiguousTwoDigitYear ? 100 : 0);
            return v;
        };
        this.y = function(D, v, $, b) {
            var y = parseInt(v, 10);
            D.y = y > 0 && D.bc ? 0 - y : y;
            b ? D.setUTCFullYear(D.y) : D.setFullYear(D.y);
            return D;
        };
        this.yy = function(D, v, $, b) {
            v = _toFullYear(v);
            return this.yyyy(D, v, $, b);
        };
        this.yyy = function(D, v, $, b) {
            var y = parseInt(v, 10);
            D.y = y > 0 && D.bc ? 0 - y : y;
            b ? D.setUTCFullYear(D.y) : D.setFullYear(D.y);
            return D;
        };
        this.yyyy = function(D, v, $, b) {
            var y = parseInt(v, 10);
            D.y = y > 0 && D.bc ? 0 - y : y;
            b ? D.setUTCFullYear(D.y) : D.setFullYear(D.y);
            return D;
        };
        this.M = function(D, v, $, b) {
            var M = parseInt(v, 10) - 1;
            b ? D.setUTCMonth(M) : D.setMonth(M);
            return D;
        };
        this.MM = function(D, v, $, b) {
            return this.M(D, v, $, b);
        };
        this.MMM = function(D, v, $, b) {
            var i = $.getShortMonths().indexOf(v);
            return i != -1 ? this.M(D, i + 1, $, b) : D;
        };
        this.MMMM = function(D, v, $, b) {
            var i = $.getMonths().indexOf(v);
            return i != -1 ? this.M(D, i + 1, $, b) : D;
        };
        this.d = function(D, v, $, b) {
            var d = parseInt(v, 10);
            b ? D.setUTCDate(d) : D.setDate(d);
            return D;
        };
        this.dd = function(D, v, $, b) {
            return this.d(D, v, $, b);
        };
        this.E = function(D, v, $, b) {
            return D;
        };
        this.EE = function(D, v, $, b) {
            return D;
        };
        this.EEE = function(D, v, $, b) {
            return D;
        };
        this.EEEE = function(D, v, $, b) {
            return D;
        };
        this.H = function(D, v, $, b) {
            var h = parseInt(v, 10);
            D.h = h < 12 && D.pm ? (h + 12) % 24 : h;
            b ? D.setUTCHours(D.h) : D.setHours(D.h);
            return D;
        };
        this.HH = function(D, v, $, b) {
            return this.H(D, v, $, b);
        };
        this.h = function(D, v, $, b) {
            return this.H(D, v, $, b);
        };
        this.hh = function(D, v, $, b) {
            return this.H(D, v, $, b);
        };
        this.m = function(D, v, $, b) {
            var m = parseInt(v, 10);
            b ? D.setUTCMinutes(m) : D.setMinutes(m);
            return D;
        };
        this.mm = function(D, v, $, b) {
            return this.m(D, v, $, b);
        };
        this.s = function(D, v, $, b) {
            var s = parseInt(v, 10);
            b ? D.setUTCSeconds(s) : D.setSeconds(s);
            return D;
        };
        this.ss = function(D, v, $, b) {
            return this.s(D, v, $, b);
        };
        this.S = function(D, v, $, b) {
            var S = parseInt(v, 10);
            b ? D.setUTCMilliseconds(S) : D.setMilliseconds(S);
            return D;
        };
        this.SSS = function(D, v, $, b) {
            return this.S(D, v, $, b);
        };
        this.a = function(D, v, $, b) {
            switch ($.getAmPmStrings().indexOf(v)) {
              case 0:
                D.am = true;
                return D.h && D.h == 12 ? this.H(D, 0, $, b) : D;

              case 1:
                D.pm = true;
                return D.h ? this.H(D, D.h, $, b) : D;
            }
            return D;
        }, this.G = function(D, v, $, b) {
            if ($.getEras().indexOf(v) === 0) {
                D.bc = true;
                return D.y ? this.yyyy(D, D.y, $, b) : D;
            }
            return D;
        };
        this.zzzz = function(D, v, $, b) {
            var tz = D.timezone = D.timezone || {};
            tz.name = v;
            return D;
        };
        this.z = function(D, v, $, b) {
            var tz = D.timezone = D.timezone || {};
            tz.timezone = v;
            return D;
        };
        this.Z = function(D, v, $, b) {
            var tz = D.timezone = D.timezone || {};
            tz.offset = v;
            return D;
        };
    }();
    thi$.setPattern = function(pattern) {
        pattern = this.pattern = pattern || "EEE MMM dd HH:mm:ss yyyy";
        CLASS.infos = CLASS.infos || {};
        var info = CLASS.infos[pattern], pIndex, str;
        if (info) {
            return;
        }
        info = CLASS.infos[pattern] = {};
        pIndex = info.pIndex = js.util.LinkedList.newInstance();
        pattern = js.lang.String.escapeRxMetaChars(pattern);
        str = pattern.replace(TOKEN, function($0) {
            var t = $0.charAt(0);
            switch (t) {
              case "M":
              case "E":
                $0 = $0.length > 4 ? $0.slice(0, 4) : $0;
                break;

              case "z":
                $0 = $0.length >= 4 ? $0.slice(0, 4) : "z";
                break;

              case "Z":
                $0 = "Z";
                break;

              default:
                break;
            }
            if (typeof Setter[$0] === "function") {
                pIndex.push($0);
                return Regx[$0];
            }
            if ($0.length >= 2) {
                $0 = $0.replace(/"|'/g, "");
            }
            return $0;
        });
        info.dPattern = new RegExp(str);
    }.$override(this.setPattern);
    thi$.setDateFormatSymbols = function(DateFormatSymbols) {
        this.symbols = DateFormatSymbols || new (Class.forName("js.text.DateFormatSymbols"))();
    };
    thi$.setSymbols = function(symbols) {
        this.symbols = symbols || new (Class.forName("js.text.DateFormatSymbols"))();
    }.$override(this.setSymbols);
    thi$.setTimeZone = function(tzid) {
        this.timezone = TimeZone.getTimeZoneInfo(tzid);
    };
    thi$.format = function(date, isUTC) {
        date = date ? date : new Date();
        if (!Class.isDate(date)) {
            return date;
        }
        if (this.timezone) {
            date.timezone = this.timezone;
        }
        var _symbols = this.symbols;
        return this.pattern.replace(TOKEN, function($0) {
            var t = $0.charAt(0);
            switch (t) {
              case "M":
              case "E":
                $0 = $0.length > 4 ? $0.slice(0, 4) : $0;
                break;

              case "z":
                $0 = $0.length >= 4 ? $0.slice(0, 4) : "z";
                break;

              case "Z":
                $0 = "Z";
                break;

              default:
                break;
            }
            return typeof Getter[$0] === "function" ? Getter[$0](date, _symbols, isUTC) : $0.slice(1, $0.length - 1);
        });
    }.$override(this.format);
    thi$.parse = function(datestr, strict, isUTC) {
        var info = CLASS.infos[this.pattern], pIndex = info.pIndex, _symbols = this.symbols, date, m = datestr.match(info.dPattern), $0, v, idx, mvs = [], i, len, obj;
        if (m) {
            date = new Date(1970, 0, 1);
            for (i = 1, len = m.length; i < len; i++) {
                $0 = pIndex[i - 1];
                v = m[i];
                if (!$0) {
                    continue;
                }
                idx = SetterOrder.indexOf($0.charAt(0));
                if (idx !== -1) {
                    mvs[idx] = [ $0, v ];
                } else {
                    date = Setter[$0](date, m[i], _symbols, isUTC);
                }
            }
            for (i = 0, len = mvs.length; i < len; i++) {
                obj = mvs[i];
                if (obj) {
                    date = Setter[obj[0]](date, obj[1], _symbols, isUTC);
                }
            }
            return date;
        }
        if (strict !== true) {
            try {
                date = new Date(Date.parse(datestr));
            } catch (x) {}
        }
        if (!Class.isDate(date)) {
            throw SyntaxError("Invalid date string");
        }
        return date;
    }.$override(this.parse);
    this._init.apply(this, arguments);
}.$extend(js.text.Format);

(function() {
    js.text.DefaultDateSymbols = new js.text.DateFormatSymbols();
    Date.SF = new js.text.SimpleDateFormat();
    Date.prototype.$format = function(pattern, isUTC) {
        if (pattern) {
            Date.SF.setPattern(pattern);
        }
        return Date.SF.format(this, isUTC);
    };
    Date.$parse = function(datestr, pattern, symbols, isUTC) {
        if (pattern) {
            Date.SF.setPattern(pattern);
        }
        if (symbols) {
            Date.SF.setSymbols(symbols);
        }
        return Date.SF.parse(datestr, isUTC);
    };
}).$boot();

$package("js.text");

$import("js.text.Format");

js.text.NumberFormat = function(pattern, symbols) {
    var CLASS = js.text.NumberFormat, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, System = J$VM.System;
    CLASS.DefaultFormatSymbols = new js.text.NumberFormatSymbols();
    thi$.setPattern = function(pattern) {
        var syb = this.symbols, grouping = ",", minus = syb.getMinusSign(), decimal = ".", percent = syb.getPercent(), permill = syb.getPerMill(), digit = syb.getDigit(), zero = syb.getZeroDigit(), buf = [];
        if (pattern) {
            var index = pattern.indexOf(";");
            if (index != -1) {
                pattern = pattern.substring(0, index);
            }
        }
        pattern = this.pattern = pattern || function() {
            buf.push(digit, grouping, digit, digit, digit, decimal, digit, digit);
            return buf.join("");
        };
        CLASS.infos = CLASS.infos || {};
        var info = CLASS.infos[pattern];
        if (info) {
            return;
        }
        info = CLASS.infos[pattern] = {};
        var phase = 0, prefix = info.prefix = [], surfix = info.surfix = [], integer = info.integer = [], fraction = info.fraction = [];
        for (var i = 0, len = pattern.length; i < len; i++) {
            var c = pattern.charAt(i);
            switch (c) {
              case digit:
              case zero:
              case grouping:
                if (phase == 0 || phase == 1) {
                    phase = 1;
                    integer.push(c);
                } else {
                    if (phase == 2) {
                        fraction.push(c);
                    } else {
                        throw "Malformed pattern " + pattern;
                    }
                }
                break;

              case decimal:
                if (phase == 1 || phase == 0) {
                    phase = 2;
                } else {
                    if (phase == 2) {
                        throw "Malformed pattern " + pattern;
                    }
                }
                break;

              case percent:
                if (phase == 1 || phase == 2) {
                    phase = 3;
                    info.percent = c;
                }
                surfix.push(c);
                break;

              case permill:
                if (phase == 1 || phase == 2) {
                    phase = 3;
                    info.permill = c;
                }
                surfix.push(c);
                break;

              default:
                if (phase == 0) {
                    prefix.push(c);
                } else {
                    phase = 3;
                    surfix.push(c);
                }
                break;
            }
        }
        for (i = integer.length - 1; i >= 0; i--) {
            if (integer[i] != grouping) {
                continue;
            } else {
                info.groupsize = integer.length - 1 - i;
                break;
            }
        }
    }.$override(this.setPattern);
    thi$.setSymbols = function(symbols) {
        this.symbols = symbols || new (Class.forName("js.text.NumberFormatSymbols"))();
    }.$override(this.setSymbols);
    thi$.format = function(value) {
        if (!Class.isNumber(value)) {
            return "NaN";
        }
        var info = CLASS.infos[this.pattern], syb = this.symbols, grouping = syb.getGroupingSeparator(), minus = syb.getMinusSign(), decimal = syb.getDecimalSeparator(), percent = syb.getPercent(), permill = syb.getPerMill(), digit = syb.getDigit(), zero = syb.getZeroDigit(), intl = syb.getInternationalCurrencySymbol(), buf = [], d = _parse.call(this, value.toString(), CLASS.DefaultFormatSymbols), f0 = d.fraction.length, f1 = info.fraction.length, i = parseInt(d.integer.join("")), s = d.sign, f = _digits2Number(d.fraction), b = Math.pow(10, f0), c;
        value = Math.abs(i) * b + f;
        value = info.percent ? value * 100 : info.permill ? value * 1e3 : value;
        if (f1 < f0) {
            value = Math.round(value / Math.pow(10, f0 - f1));
            value /= Math.pow(10, f1);
        } else {
            value /= b;
        }
        d = _parse.call(this, value.toString(), CLASS.DefaultFormatSymbols);
        var surfix = info.surfix;
        for (i = surfix.length - 1; i >= 0; i--) {
            c = surfix[i];
            buf.unshift(c);
        }
        b = buf.length;
        if (d.fraction.length >= 0) {
            for (i = info.fraction.length - 1; i >= 0; i--) {
                c = d.fraction[i];
                if (c) {
                    buf.unshift(c);
                } else {
                    c = info.fraction[i];
                    if (c != digit) {
                        buf.unshift(c);
                    }
                }
            }
        }
        if (buf.length > b) {
            buf.unshift(decimal);
        }
        b = info.groupsize || Number.MAX_VALUE;
        for (i = d.integer.length - 1; i >= 0; i--) {
            c = d.integer[i];
            buf.unshift(c);
            b--;
            if (b == 0 && i > 0) {
                buf.unshift(grouping);
                b = info.groupsize;
            }
        }
        var prefix = info.prefix;
        for (i = prefix.length - 1; i >= 0; i--) {
            c = prefix[i];
            if (c == intl) {
                buf.unshift(syb.getCurrencySymbol());
            } else {
                buf.unshift(c);
            }
        }
        buf.unshift(s == -1 ? minus : "");
        return buf.join("");
    }.$override(this.format);
    var _parse = function(str, syb) {
        syb = syb || this.symbols;
        var grouping = syb.getGroupingSeparator(), minus = syb.getMinusSign(), decimal = syb.getDecimalSeparator(), percent = syb.getPercent(), permill = syb.getPerMill(), ret = {
            isNaN: true,
            sign: 1,
            integer: [],
            fraction: []
        }, integer = ret.integer, fraction = ret.fraction, c, phase = 0;
        for (var i = 0, len = str.length; i < len; i++) {
            c = str.charAt(i);
            switch (c) {
              case "+":
              case minus:
                if (phase == 0 && integer.length == 0) {
                    if (c === minus) {
                        ret.sign = -1;
                    }
                } else {
                    return ret;
                }
                break;

              case "0":
              case "1":
              case "2":
              case "3":
              case "4":
              case "5":
              case "6":
              case "7":
              case "8":
              case "9":
                if (phase == 0) {
                    integer.push(c);
                } else {
                    if (phase == 1) {
                        fraction.push(c);
                    } else {
                        return ret;
                    }
                }
                break;

              case decimal:
                if (phase == 0) {
                    if (isNaN(parseInt(integer.join("")))) {
                        integer.push("0");
                    }
                    phase = 1;
                } else {
                    return ret;
                }
                break;

              case percent:
                if (phase != 2) {
                    ret.percent = c;
                    phase = 2;
                } else {
                    return ret;
                }
                break;

              case permill:
                if (phase != 2) {
                    ret.permill = c;
                    phase = 2;
                } else {
                    return ret;
                }
                break;

              case grouping:
                if (phase != 0) {
                    return ret;
                }
                break;

              default:
                return ret;
            }
        }
        if (ret.integer.length > 0 || ret.fraction.length > 0) {
            ret.isNaN = false;
        }
        return ret;
    };
    var _digits2Number = function(array) {
        var ret = 0;
        for (var i = 0, len = array.length; i < len; i++) {
            ret += array[i] * Math.pow(10, len - 1 - i);
        }
        return ret;
    };
    thi$.parse = function(str) {
        if (!Class.isString(str)) {
            return Number.NaN;
        }
        var d = _parse.call(this, str);
        if (d.isNaN) {
            return NaN;
        }
        var integerStr = d.integer.join(""), i = parseInt(integerStr), s = d.sign, f = _digits2Number(d.fraction), b = Math.pow(10, d.fraction.length);
        f = s * (Math.abs(i * b) + f) / b;
        f = d.percent ? f / 100 : d.permill ? f / 1e3 : f;
        return f;
    }.$override(this.parse);
    this._init.apply(this, arguments);
}.$extend(js.text.Format);

(function() {
    js.text.DefaultNumberSymbols = new js.text.NumberFormatSymbols();
    Number.DF = new js.text.NumberFormat();
    Number.prototype.$format = function(pattern) {
        if (pattern) {
            Number.DF.setPattern(pattern);
        }
        return Number.DF.format(this.valueOf());
    };
    Number.$parse = function(str, pattern, symbols) {
        if (symbols) {
            Number.DF.setSymbols(symbols);
        }
        if (pattern) {
            Number.DF.setPattern(pattern);
        }
        return Number.DF.parse(str);
    };
}).$boot();

(function() {
    js.lang.Object.$decorate(this);
    var ua = navigator.userAgent.toLowerCase(), ieTridents, trident, s, b;
    if (navigator.userAgent.toLowerCase().indexOf("trident") >= 0) {
        b = (s = ua.match(/msie ([\d.]+)/)) ? this.ierv = s[1] : (s = ua.match(/rv:([\d.]+)/)) ? this.ierv = s[1] : 0;
        ieTridents = {
            "trident/7.0": 11,
            "trident/6.0": 10,
            "trident/5.0": 9,
            "trident/4.0": 8
        };
        trident = (s = ua.match(/(trident\/[\d.]+)/)) ? s[1] : undefined;
        this.ie = ieTridents[trident] || this.ierv;
    } else {
        b = (s = ua.match(/firefox\/([\d.]+)/)) ? this.firefox = s[1] : (s = ua.match(/chrome\/([\d.]+)/)) ? this.chrome = s[1] : (s = ua.match(/opera.([\d.]+)/)) ? this.opera = s[1] : (s = ua.match(/version\/([\d.]+).*safari/)) ? this.safari = s[1] : 0;
        b = (s = ua.match(/edge\/([\d.]+)/)) ? this.edge = s[1] : 0;
    }
    this.ipad = ua.indexOf("ipad") != -1;
    this.mobile = !this.ipad && (ua.indexOf("mobile") != -1 || ua.indexOf("android") != -1 || ua.indexOf("iphone") != -1 || ua.indexOf("wpdesktop") != -1);
    var env = this.env, uri = env.uri = new js.net.URI(self.location.href), params = uri.params, value, tmp, p;
    for (p in params) {
        if (p.indexOf("j$vm_") == 0) {
            value = params[p], tmp = parseInt(value);
            value = isNaN(tmp) ? value === "true" ? true : value === "false" ? false : value : tmp;
            env[p] = value;
        }
    }
    this.System = new js.lang.System(env, this);
    $postMessage = J$VM.MQ.post;
    $sendMessage = J$VM.MQ.send;
    this.$attachEvent = js.util.Event.attachEvent;
    this.$detachEvent = js.util.Event.detachEvent;
    this.SPE1 = "RR2kfidRR";
    this.SPE2 = "RR3uiokRR";
    this.styles = {};
    var home = env.j$vm_home, file, libs = env.j$vm_classpath ? env.j$vm_classpath.split(";") : [];
    (function(file) {
        if (file.length === 0) {
            return;
        }
        this.Class.loadClass(home + file);
    }).$forEach(this, libs);
    this.boot();
}).call(self.J$VM);

(function(n) {
    self.__j$vmpkg = self.__j$vmpkg || {};
    self.__j$vmpkg[n] = 1;
})("jsre-ui");

$package("js.awt");

js.awt.State = function() {
    var CLASS = js.awt.State, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init0.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    CLASS.D = 1 << 0;
    CLASS.H = 1 << 1;
    CLASS.T = 1 << 2;
    CLASS.A = 1 << 3;
    CLASS.V = 1 << 4;
    CLASS.X = 1 << 5;
    CLASS.I = 1 << 6;
    var Class = js.lang.Class;
    thi$.isStateless = function() {
        return this.def.stateless || false;
    };
    thi$.getState = function() {
        return this.def.state;
    };
    thi$.setState = function(state, fire) {
        if (!this.isStateless()) {
            this.def.state = state & 127;
            if (fire !== false && Class.isFunction(this.onStateChanged)) {
                this.onStateChanged(this.getState());
            }
        }
    };
    thi$.isEnabled = function() {
        return (this.getState() & CLASS.D) == 0;
    };
    thi$.setEnabled = function(b) {
        if (!b) {
            _setHover.call(this, false, false);
        }
        var state = this.getState(), $ = CLASS.D;
        this.setState(b ? state & ~$ : state | $);
    };
    thi$.isHover = function() {
        return (this.getState() & CLASS.H) != 0;
    };
    var _setHover = function(b, fire) {
        var state = this.getState(), $ = CLASS.H;
        this.setState(b ? state | $ : state & ~$, fire);
    };
    thi$.setHover = function(b) {
        _setHover.call(this, b);
    };
    thi$.isActivated = function() {
        return (this.getState() & CLASS.A) != 0;
    };
    thi$.setActivated = function(b) {
        var state = this.getState(), $ = CLASS.A;
        this.setState(b ? state | $ : state & ~$);
    };
    thi$.isTriggered = function() {
        return (this.getState() & CLASS.T) != 0;
    };
    thi$.setTriggered = function(b) {
        var state = this.getState(), $ = CLASS.T;
        this.setState(b ? state | $ : state & ~$);
    };
    thi$.isVisible = function() {
        return (this.getState() & CLASS.V) == 0;
    };
    thi$.setVisible = function(b) {
        if (!b) {
            _setHover.call(this, false, false);
        }
        var state = this.getState(), $ = CLASS.V;
        this.setState(b ? state & ~$ : state | $);
    };
    thi$.isMaximized = function() {
        return (this.getState() & CLASS.X) != 0;
    };
    thi$.setMaximized = function(b) {
        var state = this.getState(), $ = CLASS.X;
        this.setState(b ? state | $ : state & ~$);
    };
    thi$.isMinimized = function() {
        return (this.getState() & CLASS.I) != 0;
    };
    thi$.setMinimized = function(b) {
        var state = this.getState(), $ = CLASS.I;
        this.setState(b ? state | $ : state & ~$);
    };
    if (this instanceof js.util.EventTarget) {
        this.declareEvent(Event.SYS_EVT_STATECHANGED);
    }
    thi$._init0 = function(def) {
        this.def = def || {};
    };
    this._init0.apply(this, arguments);
};

$package("js.awt");

js.awt.Editable = function() {
    var CLASS = js.awt.Editable, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        return;
    }
    var Class = js.lang.Class;
    thi$.getProperties = function(category) {
        return {};
    };
    thi$.apply = function(category, properties) {};
    thi$.getEditorDef = function() {};
    thi$.enterEdit = function(data) {
        var def = this.getEditorDef(), editor;
        if (!def) {
            return;
        }
        editor = new (Class.forName(def.classType))(def, this.Runtime());
        editor.initEdit(data, this);
        editor.show();
    };
};

$package("js.awt");

js.awt.Cover = function() {
    var CLASS = js.awt.Cover, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, DOM = J$VM.DOM;
    thi$.showCover = function(b, modify, className) {
        var view = this._coverView, selector, exts = [ "cover", modify ? "cover--" + modify : "" ];
        if (J$VM.ie >= 11 || J$VM.edge) {
            exts.push("cover--" + (modify || "") + "-iefix");
        }
        selector = DOM.combineClassName([ "jsvm_", className || this.className ].join(" "), exts);
        if (b) {
            if (!view) {
                _createView.call(this, selector);
            }
            this.adjustCover();
        } else {
            if (view && view.clazz === selector) {
                this.removeCover();
            }
        }
    };
    var _createView = function(selector) {
        var cview = this.view, view, uuid, tip;
        uuid = this.uuid();
        view = this._coverView = DOM.cloneElement(cview, false);
        view.uuid = [ uuid, "cover" ].join("-");
        view.id = [ this.getID(), "cover" ].join("-");
        view.className = view.clazz = selector;
        view.style.position = "absolute";
        view.style.zIndex = this.getZ() + 1;
        DOM.setAttribute(view, "isCover", true);
        if (cview === self.document.body) {
            cview.appendChild(view);
        } else {
            DOM.insertAfter(view, cview);
        }
        tip = this.def.tip;
        if (Class.isString(tip)) {
            DOM.setAttribute(view, "title", tip);
        }
    };
    thi$.showLoading = function(b, styleClass, iconic) {
        var modify = iconic !== false ? "loading" : "loading--noicon";
        this.showCover(b, modify, styleClass);
    };
    thi$.showMoveCover = function(b, styleClass) {
        this.showCover(b, "move", styleClass);
    };
    thi$.showMaskCover = function(b, styleClass) {
        this.showCover(b, "mask", styleClass);
    };
    thi$.showDisableCover = function(b, styleClass) {
        this.showCover(b, "disable", styleClass);
    };
    thi$.adjustCover = function(bounds) {
        var view = this.view, cview = this._coverView, ele, box, xy, x, y, className;
        if (!cview) {
            return;
        }
        bounds = bounds || this.getBounds();
        className = cview.clazz;
        if (!this.isVisible()) {
            className += " " + DOM.combineClassName(className, this.getState());
        }
        cview.className = className;
        if (view === document.body) {
            x = 0;
            y = 0;
        } else {
            x = bounds.offsetX;
            y = bounds.offsetY;
        }
        DOM.setBounds(cview, x, y, bounds.width, bounds.height);
    };
    thi$.setCoverZIndex = function(z) {
        var view = this._coverView;
        if (!view) {
            return;
        }
        view.style.zIndex = z + 1;
    };
    thi$.setCoverDisplay = function(show) {
        var view = this._coverView;
        if (!view) {
            return;
        }
        view.style.display = show;
    };
    thi$.removeCover = function() {
        var view = this._coverView;
        if (!view) {
            return;
        }
        DOM.remove(view, true);
        this._coverView = null;
    };
    thi$.isCovered = function() {
        var cover = this._coverView;
        return !!(cover && cover.parentNode);
    };
};

$package("js.awt");

js.awt.Shadow = function() {
    var CLASS = js.awt.Shadow, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, DOM = J$VM.DOM;
    thi$.showShadow = function(b, className) {
        var view = this._shadowView, selector;
        selector = DOM.combineClassName([ "jsvm_", className || this.className ].join(" "), [ "shadow" ]);
        if (b) {
            if (!view) {
                _createView.call(this, selector);
            }
            this.adjustShadow();
        } else {
            this.removeShadow();
        }
    };
    var _createView = function(selector) {
        var cview = this.view, view, uuid;
        if (cview === self.document.body) {
            return;
        }
        uuid = this.uuid();
        view = this._shadowView = DOM.createElement("DIV");
        view.uuid = uuid;
        view.id = [ this.getID(), "shadow" ].join("-");
        view.className = selector;
        view.style.position = "absolute";
        view.style.zIndex = this.getZ();
        DOM.insertBefore(view, cview);
    };
    thi$.adjustShadow = function(bounds) {
        var view = this.view, sview = this._shadowView, ele, box, xy, x, y;
        if (!sview || !DOM.isDOMElement(sview)) {
            return;
        }
        bounds = bounds || this.getBounds();
        if (view === document.body) {
            x = 0;
            y = 0;
        } else {
            x = bounds.offsetX;
            y = bounds.offsetY;
        }
        DOM.setBounds(sview, x, y, bounds.width, bounds.height);
    };
    thi$.setShadowZIndex = function(z) {
        var view = this._shadowView;
        if (!view) {
            return;
        }
        view.style.zIndex = z;
    };
    thi$.setShadowDisplay = function(show) {
        var view = this._shadowView;
        if (!view) {
            return;
        }
        view.style.display = show;
    };
    thi$.removeShadow = function() {
        var view = this._shadowView;
        if (!view) {
            return;
        }
        DOM.remove(view, true);
        delete this._shadowView;
    };
};

$package("js.awt");

js.awt.MoveObject = function() {
    var CLASS = js.awt.MoveObject, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        return;
    }
    CLASS.__defined__ = true;
    var DOM = J$VM.DOM;
    thi$.setMovingPeer = function(peer) {
        this.movingPeer = peer;
    };
    thi$.getMovingPeer = function() {
        return this.movingPeer;
    };
    thi$.getMovingData = function() {
        return this;
    };
    thi$.getMovingMsgType = function() {
        return "js.awt.event.MovingEvent";
    };
    thi$.getMovingMsgRecvs = function() {
        var peer = this.getMovingPeer();
        return this != peer && peer && peer.getMovingMsgRecvs ? peer.getMovingMsgRecvs() : null;
    };
    thi$.releaseMoveObject = function() {
        if (this != this.movingPeer) {
            this.movingPeer.moveObj = null;
            this.movingPeer = null;
            this.destroy();
        } else {
            this.movingPeer = null;
        }
    };
};

js.awt.Movable = function() {
    var CLASS = js.awt.Movable, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        return;
    }
    CLASS.__defined__ = true;
    CLASS.EVT_MOVE_START = "elementMoveStart";
    CLASS.EVT_MOVING = "elementMoving";
    CLASS.EVT_MOVE_END = "elementMoveEnd";
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ, max = Math.max, min = Math.min, ceil = Math.ceil, floor = Math.floor, round = Math.round;
    thi$.startMoving = function(e, i) {
        var moveObj = this.getMoveObject(e), ctx = moveObj.getMovingContext(), pounds = ctx.container.getBounds(), bounds = moveObj.getBounds(), r = ctx.range, mover = this.getMovingConstraints(), thip = ctx.container, p = thip.view;
        ctx.oXY = ctx.lXY = e.eventXY();
        ctx.minX = mover.bl >= 1 ? max(0, r[0]) : max(-65535, r[0]);
        ctx.minY = mover.bt >= 1 ? max(0, r[1]) : max(-65535, r[1]);
        ctx.maxX = mover.br >= 1 ? min(pounds.innerWidth - bounds.offsetWidth, r[2]) : min(65535, r[2]);
        ctx.maxY = mover.bb >= 1 ? min(pounds.innerHeight - bounds.offsetHeight, r[3]) : min(65535, r[3]);
        ctx.data = {
            event: e,
            dx: 0,
            dy: 0,
            Dx: 0,
            Dy: 0,
            ox: bounds.x,
            oy: bounds.y,
            oz: moveObj.getZ(),
            stage: 0
        };
        if (p.scrollLeft > 0 || p.scrollTop > 0) {
            if (p.scrollLeft == p.scrollWidth - p.clientWidth || p.scrollTop == p.scrollHeight - p.clientHeight) {
                var keeper = ctx.keeper = DOM.createElement("DIV");
                keeper.style.cssText = "position:absolute;width:1px;height:1px;";
                keeper.style.left = p.scrollWidth - 1 + "px";
                keeper.style.top = p.scrollHeight - 5 + "px";
                p.appendChild(keeper);
            }
        }
        moveObj._moveCtx = ctx;
        moveObj.setZ(DOM.getMaxZIndex(document.body) + 1);
        moveObj.showMoveCover(true);
        if (moveObj._coverView) {
            DOM.setDynamicCursor(moveObj._coverView, i);
        }
        MQ.register("releaseMoveObject", this, _release);
        this._moving = true;
        this.fireEvent(new Event(CLASS.EVT_MOVE_START, ctx.data, this), true);
    };
    thi$.processMoving = function(e) {
        var moveObj = this.getMoveObject(e), ctx = moveObj._moveCtx, bounds = moveObj.getBounds(), data = ctx.data, mover = this.getMovingConstraints(), grid = mover.grid, freedom = mover.freedom, thip = ctx.container, p = thip.view, xy = e.eventXY(), oxy = ctx.oXY, lxy = ctx.lXY, x = bounds.userX + (xy.x - oxy.x), y = bounds.userY + (xy.y - oxy.y), minX = ctx.minX, minY = ctx.minY, maxX = ctx.maxX, maxY = ctx.maxY, changed;
        x = x < minX ? minX : x > maxX ? maxX : x;
        y = y < minY ? minY : y > maxY ? maxY : y;
        if (x != bounds.x || y != bounds.y) {
            x = grid * round(x / grid);
            x = (freedom & 1) != 0 ? x : undefined;
            y = grid * round(y / grid);
            y = (freedom & 2) != 0 ? y : undefined;
            changed = moveObj.setPosition(x, y);
            data.nx = x;
            data.ny = y;
            ctx.moved = true;
        }
        data.event = e;
        data.dx = xy.x - lxy.x;
        data.dy = xy.y - lxy.y;
        data.Dx = xy.x - oxy.x;
        data.Dy = xy.y - oxy.y;
        data.stage = 1;
        ctx.lXY = xy;
        if (ctx.moved) {
            this.fireEvent(new Event(CLASS.EVT_MOVING, data, this), true);
        }
        var recvs = moveObj.getMovingMsgRecvs() || [];
        recvs.unshift(moveObj.getMovingPeer().uuid());
        e.setData(data);
        e.setEventTarget(moveObj);
        MQ.post(moveObj.getMovingMsgType(), e, recvs);
    };
    thi$.endMoving = function(e) {
        var moveObj = this.getMoveObject(e), ctx = moveObj._moveCtx, recvs = moveObj.getMovingMsgRecvs() || [], xy = e.eventXY(), oxy = ctx.oXY, lxy = ctx.lXY, x, y, data = ctx.data, changed;
        data.event = e;
        data.dx = xy.x - lxy.x;
        data.dy = xy.y - lxy.y;
        data.Dx = xy.x - oxy.x;
        data.Dy = xy.y - oxy.y;
        data.stage = 2;
        if (ctx.keeper) {
            DOM.remove(ctx.keeper);
            ctx.keeper = null;
        }
        moveObj.setZ(data.oz);
        moveObj.showMoveCover(false);
        if (ctx.moved) {
            x = moveObj.getX();
            y = moveObj.getY();
            data.nx = x;
            data.ny = y;
            data.moved = data.nx != data.ox || data.ny != data.oy;
            if (data.moved) {
                moveObj.setPosition(x, y, 15);
            }
        }
        this._moving = false;
        this.fireEvent(new Event(CLASS.EVT_MOVE_END, data, this), true);
        recvs.unshift(moveObj.getMovingPeer().uuid());
        e.setData(data);
        e.setEventTarget(moveObj);
        MQ.post(moveObj.getMovingMsgType(), e, recvs);
        MQ.post("releaseMoveObject", moveObj, [ this.uuid() ]);
        moveObj._moveCtx = null;
    };
    var _release = function(moveObj) {
        moveObj.releaseMoveObject();
        if (this.moveObj) {
            this.moveObj = null;
        }
        MQ.cancel("releaseMoveObject", this, _release);
    };
    thi$.isMoverSpot = function(ele, x, y) {
        return this._moveTarget && this._moveTarget.isMovable();
    };
    thi$.getMoveTarget = function() {
        return this._moveTarget || this;
    };
    thi$.setMoveTarget = function(target) {
        this._moveTarget = target;
    };
    thi$.getMoveObject = function(e) {
        var moveObj = this.moveObj, B;
        if (!moveObj) {
            moveObj = this.moveObj = this;
            moveObj.setMovingPeer(this);
            B = this.getBounds();
            moveObj.setBounds(B.x, B.y, B.width, B.height, 4);
        }
        return moveObj;
    };
    thi$.isMovable = function() {
        return !this.isCovered() && this.def.movable === true;
    };
    thi$.setMovable = function(b, mover) {
        var M = this.def;
        b = b || false;
        M.movable = b;
        if (Class.isObject(mover)) {
            M.mover = mover;
        }
        this.getMovingConstraints();
    };
    thi$.showMoveCapture = function(e) {
        return false;
    };
};

$package("js.awt");

js.awt.SizeObject = function() {
    var CLASS = js.awt.SizeObject, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        return;
    }
    CLASS.__defined__ = true;
    var DOM = J$VM.DOM;
    thi$.setSizingPeer = function(peer) {
        this.sizingPeer = peer;
    };
    thi$.getSizingPeer = function() {
        return this.sizingPeer;
    };
    thi$.getSizingData = function() {
        return {};
    };
    thi$.getSizingMsgType = function() {
        return "js.awt.event.SizingEvent";
    };
    thi$.getSizingMsgRecvs = function() {
        var peer = this.getSizingPeer();
        return this != peer && peer && peer.getSizingMsgRecvs ? peer.getSizingMsgRecvs() : null;
    };
    thi$.releaseSizeObject = function() {
        if (this != this.sizingPeer) {
            this.sizingPeer.sizeObj = null;
            this.sizingPeer = null;
            this.destroy();
        } else {
            this.sizingPeer = null;
        }
    };
};

js.awt.Resizable = function() {
    var CLASS = js.awt.Resizable, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        return;
    }
    CLASS.__defined__ = true;
    CLASS.EVT_RESIZE_START = "elementResizeStart";
    CLASS.EVT_RESIZING = "elementResizing";
    CLASS.EVT_RESIZE_END = "elementResizeEnd";
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ, max = Math.max, min = Math.min, abs = Math.abs, ceil = Math.ceil, floor = Math.floor, round = Math.round;
    thi$.startSizing = function(e, i) {
        var moveObj = this.getSizeObject(e), ctx = moveObj.getMovingContext(), bounds = moveObj.getBounds();
        ctx.eventXY = e.eventXY();
        ctx.data = {
            event: e,
            ox: bounds.x,
            oy: bounds.y,
            oz: moveObj.getZ(),
            ow: bounds.width,
            oh: bounds.height,
            stage: 0
        };
        ctx.offsetbounds = DOM.getBounds(moveObj.getOffsetParent());
        moveObj._moveCtx = ctx;
        moveObj.setZ(DOM.getMaxZIndex(document.body) + 1);
        if (ctx.outline) {
            var peer = moveObj.getSizingPeer();
            moveObj.showOutline(true, peer._outlineClassName);
            peer.showOutline(false);
        }
        MQ.register("releaseSizeObject", this, _release);
        DOM.setDynamicCursor(moveObj.view, i);
        this.fireEvent(new Event(CLASS.EVT_RESIZE_START, ctx.data, this), true);
    };
    thi$.processSizing = function(e, i) {
        var sizeObj = this.getSizeObject(), ctx = sizeObj._moveCtx, thip = ctx.container, pounds = ctx.pounds, bounds = sizeObj.getBounds(), oounds = ctx.offsetbounds, mover = this.getMovingConstraints(), grid = mover.grid, minSize = sizeObj.getMinimumSize(), maxSize = sizeObj.getMaximumSize(), xy = e.eventXY(), minV, maxV, v0, v1, x, y, w, h, data = ctx.data, changed;
        x = oounds.absX + oounds.MBP.borderLeftWidth + bounds.userX;
        y = oounds.absY + oounds.MBP.borderTopWidth + bounds.userY;
        w = bounds.userW;
        h = bounds.userH;
        switch (i) {
          case 0:
          case 1:
          case 2:
            v1 = x + bounds.userW;
            var start = pounds.absX + pounds.MBP.borderLeftWidth || 0;
            minV = mover.bl < 1 ? v1 - maxSize.width : max(start, v1 - maxSize.width);
            maxV = v1 - max(minSize.width, bounds.MBP.BW + 1);
            x = xy.x;
            x = x < minV ? minV : x > maxV ? maxV : x;
            w = grid * ceil((v1 - x) / grid);
            x = start + grid * floor((v1 - w - start) / grid);
            break;

          case 4:
          case 5:
          case 6:
            v0 = x;
            minV = grid * ceil(max(bounds.MBP.BW + 1, minSize.width) / grid);
            maxV = grid * floor((mover.br < 1 ? min(maxSize.width, ctx.range[2]) : pounds.absX + pounds.MBP.borderLeftWidth + pounds.offsetWidth - v0) / grid);
            w = grid * floor((xy.x - v0) / grid);
            w = w < minV ? minV : w > maxV ? maxV : w;
            break;
        }
        switch (i) {
          case 0:
          case 7:
          case 6:
            v1 = y + bounds.userH;
            minV = grid * ceil((mover.bt < 1 ? v1 - maxSize.height : max(pounds.absY + pounds.MBP.borderTopWidth, v1 - maxSize.height)) / grid);
            maxV = grid * floor((v1 - max(minSize.height, bounds.MBP.BH + 1)) / grid);
            y = xy.y;
            y = y < minV ? minV : y > maxV ? maxV : y;
            h = grid * ceil((v1 - y) / grid);
            y = grid * ceil((v1 - h) / grid);
            break;

          case 2:
          case 3:
          case 4:
            v0 = y;
            minV = grid * ceil(max(bounds.MBP.BH + 1, minSize.height) / grid);
            maxV = grid * floor((mover.bb < 1 ? min(maxSize.height, ctx.range[3]) : pounds.absY + pounds.MBP.borderTopWidth + pounds.offsetHeight - v0) / grid);
            h = grid * floor((xy.y - v0) / grid);
            h = h < minV ? minV : h > maxV ? maxV : h;
            break;
        }
        if (x != bounds.absX || y != bounds.absY) {
            xy = DOM.relative(x, y, oounds);
            changed = sizeObj.setPosition(xy.x, xy.y);
            ctx.moved = true;
            xy = DOM.relative(x, y, pounds);
            data.nx = xy.x;
            data.ny = xy.y;
        }
        if (w != bounds.width || h != bounds.height) {
            changed = sizeObj.setSize(w, h);
            ctx.sized = true;
            data.nw = w;
            data.nh = h;
        }
        data.event = e;
        data.stage = 1;
        if (ctx.moved || ctx.sized) {
            this.fireEvent(new Event(CLASS.EVT_RESIZING, data, this), true);
        }
        var recvs = sizeObj.getSizingMsgRecvs() || [];
        recvs.unshift(sizeObj.getSizingPeer().uuid());
        e.setData(data);
        e.setEventTarget(sizeObj);
        MQ.post(sizeObj.getSizingMsgType(), e, recvs);
    };
    thi$.endSizing = function(e, i) {
        var sizeObj = this.getSizeObject(e), ctx = sizeObj._moveCtx, thip = ctx.container, pounds = thip.getBounds(), bounds = sizeObj.getBounds(), data = ctx.data, xy, recvs = sizeObj.getSizingMsgRecvs() || [];
        data.event = e;
        data.stage = 2;
        sizeObj.setZ(data.oz);
        if (ctx.outline) {
            this.showOutline(true, this._outlineClassName);
            sizeObj.showOutline(false);
        }
        if (ctx.sized) {
            data.nw = bounds.width;
            data.nh = bounds.height;
            data.sized = data.nw != data.ow || data.nh != data.oh;
            if (data.sized && ctx.syncchange) {
                this.setSize(bounds.width, bounds.height, 15);
            }
        }
        if (ctx.moved) {
            MQ.send("js.awt.event.SizingDir", i);
            xy = DOM.relative(bounds.absX, bounds.absY, pounds);
            data.nx = xy.x;
            data.ny = xy.y;
            data.moved = data.nx != data.ox || data.ny != data.oy;
            if (data.moved && ctx.syncchange) {
                this.setPosition(xy.x, xy.y, 15);
            }
        }
        this.fireEvent(new Event(CLASS.EVT_RESIZE_END, data, this), true);
        recvs.unshift(sizeObj.getSizingPeer().uuid());
        e.setData(data);
        e.setEventTarget(sizeObj);
        MQ.post(sizeObj.getSizingMsgType(), e, recvs);
        MQ.post("releaseSizeObject", sizeObj, [ this.uuid() ]);
    };
    var _release = function(sizeObj) {
        sizeObj.releaseSizeObject();
        if (this.sizeObj) {
            this.sizeObj = null;
        }
        MQ.cancel("releaseSizeObject", this, _release);
    };
    thi$.getSizeObject = function() {
        var sizeObj = this.sizeObj, bounds, def;
        if (!sizeObj) {
            bounds = this.getBounds();
            def = {
                id: "resizer",
                classType: "js.awt.Component",
                className: DOM.combineClassName([ "jsvm_", this.def.resizeClassName || "" ].join(" "), [ "cover", "cover--resize" ]),
                css: "position:absolute;",
                stateless: true,
                z: DOM.LM_ZBASE,
                resizable: true,
                resizer: this.def.resizer,
                prefSize: this.getPreferredSize(),
                miniSize: this.getMinimumSize(),
                maxiSize: this.getMaximumSize()
            };
            sizeObj = this.sizeObj = new js.awt.Component(def, this.Runtime());
            sizeObj.appendTo(document.body);
            sizeObj.setSizingPeer(this);
            sizeObj.setBounds(bounds.absX, bounds.absY, bounds.width, bounds.height, 4);
            sizeObj.getMovingContext = this.getMovingContext.$bind(this);
            sizeObj.getMovingConstraints = this.getMovingConstraints.$bind(this);
        }
        return sizeObj;
    };
    thi$.isResizable = function(idx) {
        var b = !this.isCovered() && this.def.resizable === true, resizer = this.def.resizer;
        if (b && Class.isNumber(idx)) {
            resizer = Class.isNumber(resizer) ? resizer : 255;
            b = b && (resizer & 1 << idx) !== 0;
        }
        return b;
    };
    thi$.setResizable = function(b, resizer) {
        var M = this.def;
        b = b || false;
        resizer = Class.isNumber(resizer) ? resizer & 255 : 255;
        M.resizable = b;
        M.resizer = resizer;
        this.getMovingConstraints();
    };
    var RS = 5, RS2 = RS * 2, RS4 = RS2 * 2;
    var resizerBounds = [ function(bounds) {
        return {
            x: bounds.absX - RS,
            y: bounds.absY - RS,
            width: RS2,
            height: RS2
        };
    }, function(bounds) {
        return {
            x: bounds.absX - RS,
            y: bounds.absY + RS,
            width: RS2,
            height: bounds.height - RS2
        };
    }, function(bounds) {
        return {
            x: bounds.absX - RS,
            y: bounds.absY + bounds.height - RS,
            width: RS2,
            height: RS2
        };
    }, function(bounds) {
        return {
            x: bounds.absX + RS,
            y: bounds.absY + bounds.height - RS,
            width: bounds.width - RS2,
            height: RS2
        };
    }, function(bounds) {
        return {
            x: bounds.absX + bounds.width - RS,
            y: bounds.absY + bounds.height - RS,
            width: RS2,
            height: RS2
        };
    }, function(bounds) {
        return {
            x: bounds.absX + bounds.width - RS,
            y: bounds.absY + RS,
            width: RS2,
            height: bounds.height - RS2
        };
    }, function(bounds) {
        return {
            x: bounds.absX + bounds.width - RS,
            y: bounds.absY - RS,
            width: RS2,
            height: RS2
        };
    }, function(bounds) {
        return {
            x: bounds.absX + RS,
            y: bounds.absY - RS,
            width: bounds.width - RS2,
            height: RS2
        };
    } ];
    thi$.showResizeCapture = function(e) {
        var xy = e.eventXY(), bounds = this.getBounds(), idxes = DOM.offsetIndexes(xy.x, xy.y, bounds), idx = idxes[2], ret = false;
        idx = idx < 8 ? this.isResizable(idx) ? idx : -1 : -1;
        if (idx >= 0) {
            DOM.showMouseCapturer(resizerBounds[idx](bounds), this.uuid(), idx);
            ret = true;
        }
        return ret;
    };
};

$package("js.awt");

js.awt.Outline = function() {
    var CLASS = js.awt.Outline, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, DOM = J$VM.DOM, LINES = [ "top", "right", "bottom", "left", "nw", "w", "sw", "s", "se", "e", "ne", "n" ];
    var _createView = function(i, lines, selector) {
        var cview = this._coverView || this.view, view, uuid;
        uuid = this.uuid();
        view = DOM.createElement("DIV");
        DOM.setAttribute(view, "noncomp", "true");
        view.uuid = uuid;
        view.id = [ this.getID(), LINES[i] ].join("-");
        view.className = selector;
        view.style.position = "absolute";
        view.style.zIndex = this.getZ();
        view.style.display = cview.style.display;
        if (cview === self.document.body) {
            cview.appendChild(view);
        } else {
            DOM.insertAfter(view, cview);
        }
        lines.push(view);
    };
    thi$.showOutline = function(b, className) {
        var views = this._outlineView, clazz, ext, selector, bounds;
        if (b) {
            if (!views) {
                bounds = this.getBounds();
                views = this._outlineView = [];
                if (className) {
                    this._outlineClassName = className;
                }
                clazz = [ "jsvm_", className || "" ].join(" ");
                for (var i = 0; i < 12; i++) {
                    if (i < 4 || this.isResizable(i - 4)) {
                        ext = [ "outline" ];
                        if (i < 4) {
                            ext.push([ "outline", LINES[i] ].join("--"));
                        } else {
                            ext.push("outline-resizer", [ "outline-resizer", LINES[i] ].join("--"));
                        }
                        selector = DOM.combineClassName(clazz, ext);
                        _createView.call(this, i, views, selector);
                    }
                }
            }
            this.adjustOutline(bounds);
        } else {
            this.removeOutline();
        }
    };
    var SETBOUNDS = {
        top: function(line, lbounds, bounds) {
            DOM.setBounds(line, bounds.x, bounds.y, bounds.width, lbounds.height, lbounds);
        },
        right: function(line, lbounds, bounds) {
            DOM.setBounds(line, bounds.x + bounds.width - lbounds.width, bounds.y, lbounds.width, bounds.height, lbounds);
        },
        bottom: function(line, lbounds, bounds) {
            DOM.setBounds(line, bounds.x, bounds.y + bounds.height - lbounds.height, bounds.width, lbounds.height, lbounds);
        },
        left: function(line, lbounds, bounds) {
            DOM.setBounds(line, bounds.x, bounds.y, lbounds.width, bounds.height, lbounds);
        },
        nw: function(line, lbounds, bounds) {
            DOM.setBounds(line, bounds.x, bounds.y, lbounds.width, lbounds.height, lbounds);
        },
        w: function(line, lbounds, bounds) {
            if (bounds.height <= 24) {
                line.style.visibility = "hidden";
            } else {
                DOM.setBounds(line, bounds.x, Math.round(bounds.y + bounds.height / 2 - lbounds.height / 2), lbounds.width, lbounds.height, lbounds);
                line.style.visibility = "visible";
            }
        },
        sw: function(line, lbounds, bounds) {
            DOM.setBounds(line, bounds.x, bounds.y + bounds.height - lbounds.height, lbounds.width, lbounds.height, lbounds);
        },
        s: function(line, lbounds, bounds) {
            if (bounds.width <= 24) {
                line.style.visibility = "hidden";
            } else {
                DOM.setBounds(line, Math.round(bounds.x + bounds.width / 2 - lbounds.width / 2), bounds.y + bounds.height - lbounds.height, lbounds.width, lbounds.height, lbounds);
                line.style.visibility = "visible";
            }
        },
        se: function(line, lbounds, bounds) {
            DOM.setBounds(line, bounds.x + bounds.width - lbounds.width, bounds.y + bounds.height - lbounds.height, lbounds.width, lbounds.height, lbounds);
        },
        e: function(line, lbounds, bounds) {
            if (bounds.height <= 24) {
                line.style.visibility = "hidden";
            } else {
                DOM.setBounds(line, bounds.x + bounds.width - lbounds.width, Math.round(bounds.y + bounds.height / 2 - lbounds.height / 2), lbounds.width, lbounds.height, lbounds);
                line.style.visibility = "visible";
            }
        },
        ne: function(line, lbounds, bounds) {
            DOM.setBounds(line, bounds.x + bounds.width - lbounds.width, bounds.y, lbounds.width, lbounds.height, lbounds);
        },
        n: function(line, lbounds, bounds) {
            if (bounds.width <= 24) {
                line.style.visibility = "hidden";
            } else {
                DOM.setBounds(line, Math.round(bounds.x + bounds.width / 2 - lbounds.width / 2), bounds.y, lbounds.width, lbounds.height, lbounds);
                line.style.visibility = "visible";
            }
        }
    };
    thi$.adjustOutline = function(bounds) {
        var views = this._outlineView, i, len, line, id, ele, box, lbounds, xy, x, y;
        if (!views || this.view.style.display === "none") {
            return;
        }
        bounds = bounds || this.getBounds();
        if (this.view === document.body) {
            x = 0;
            y = 0;
        } else {
            x = bounds.offsetX;
            y = bounds.offsetY;
        }
        bounds = {
            x: x,
            y: y,
            width: bounds.width,
            height: bounds.height
        };
        for (i = 0, len = views.length; i < len; i++) {
            line = views[i];
            lbounds = DOM.getBounds(line);
            id = line.id.split("-");
            id = id[id.length - 1];
            SETBOUNDS[id](line, lbounds, bounds);
        }
    };
    thi$.setOutlineZIndex = function(z) {
        var views = this._outlineView;
        if (!views) {
            return;
        }
        for (var i = 0, len = views.length; i < len; i++) {
            views[i].style.zIndex = z;
        }
    };
    thi$.setOutlineDisplay = function(show) {
        var views = this._outlineView;
        if (!views) {
            return;
        }
        for (var i = 0, len = views.length; i < len; i++) {
            views[i].style.display = show;
        }
    };
    thi$.removeOutline = function() {
        var views = this._outlineView;
        if (!views) {
            return;
        }
        while (views.length > 0) {
            DOM.remove(views.shift(), true);
        }
        this._outlineView = null;
    };
    thi$.isOutlineShown = function() {
        var views = this._outlineView;
        return views && views[0].style.display != "none";
    };
};

$package("js.awt");

js.awt.PopupLayer = function() {
    var CLASS = js.awt.PopupLayer, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ, EvtFlagMap = {
        mousedown: CLASS.F_BODYMOUSEDOWN,
        click: CLASS.F_BODYCLICK,
        mousewheel: CLASS.F_BODYMOUSEWHEEL,
        DOMMouseScroll: CLASS.F_BODYMOUSEWHEEL,
        blur: CLASS.F_FOCUSBOXBLUR,
        timeout: CLASS.F_TIMEOUT
    };
    thi$.setFloating = function(b) {
        b = b || false;
        this.def.isfloating = b;
        if (b === true) {
            this.setPMFlag(this.def.PMFlag);
        } else {
            this.setPMFlag(0);
        }
        this._local.floatingSettled = true;
    };
    thi$.floatingSettled = function() {
        return this._local.floatingSettled;
    };
    thi$.rootLayer = function(root) {
        if (root) {
            this._local.root = root;
        }
        return this._local.root || this;
    };
    thi$.onLayerAppended = function() {};
    thi$.setAdjustPosToFit = function(b) {
        this._local.adjustPosToFit = b;
    };
    thi$.isAdjustPosToFit = function() {
        return this._local.adjustPosToFit !== false;
    };
    thi$.setCallback = function(bounds, area, nofly) {};
    thi$.beforeRemoveLayer = function(e) {
        var peer = this.getPeerComponent();
        if (this == this.rootLayer() && peer) {
            MQ.post("js.awt.event.LayerEvent", new Event("beforeRemoveLayer", e || "", this), [ peer.uuid() ]);
        }
    };
    thi$.afterRemoveLayer = function(e) {
        var peer = this.getPeerComponent();
        if (this == this.rootLayer() && peer) {
            MQ.post("js.awt.event.LayerEvent", new Event("afterRemoveLayer", e || "", this), [ peer.uuid() ]);
        }
    };
    thi$.onFocusBoxBlur = function(e) {
        if ((this._local.LMFlag & CLASS.F_AUTO) !== 0 && this.focusBox == this.focusItem) {
            this.LM().onHide(e);
        }
    };
    thi$.setPMFlag = function(flag, timeout) {
        flag = Class.isNumber(flag) ? flag & 127 : 39;
        timeout = Class.isNumber(timeout) ? timeout : 2e3;
        this._local.LMFlag = flag;
        this._local.LMTimeout = timeout;
        if ((this._local.LMFlag & CLASS.F_TIMEOUT) != 0) {
            this.attachEvent("mouseover", 4, this, this.timeoutMouseover);
            this.attachEvent("mouseout", 4, this, this.timeoutMouseout);
        } else {
            this.detachEvent("mouseover", 4, this, this.timeoutMouseover);
            this.detachEvent("mouseout", 4, this, this.timeoutMouseout);
        }
        if ((this._local.LMFlag & CLASS.F_FOCUSBOXBLUR) != 0) {
            if (this.focusBox == undefined) {
                _createFocusBox.$bind(this)();
                DOM.appendTo(this.focusBox, this.view);
                Event.attachEvent(this.focusBox, "blur", 1, this, this.onFocusBoxBlur);
            }
            this.focusItem = this.focusBox;
            this.focusBox.focus();
        } else {
            if (this.focusItem == this.focusBox) {
                this.focusItem = null;
            }
            if (this.focusBox != undefined) {
                Event.detachEvent(this.focusBox, "blur", 1, this, this.onFocusBoxBlur);
                DOM.remove(this.focusBox, true);
            }
            this.focusBox = null;
        }
    };
    thi$.getPMFlag = function() {
        return this._local.LMFlag;
    };
    thi$.isHideOnMouseDown = function() {
        return (this.getPMFlag() & CLASS.F_BODYMOUSEDOWN) != 0;
    };
    thi$.setHideOnMouseDown = function(b) {
        var flag = this.getPMFlag(), $ = CLASS.F_BODYMOUSEDOWN;
        this.setPMFlag(b ? flag | $ : flag & ~$);
    };
    thi$.isHideOnClick = function(b) {
        return (this.getPMFlag() & CLASS.F_BODYCLICK) != 0;
    };
    thi$.setHideOnClick = function(b) {
        var flag = this.getPMFlag(), $ = CLASS.F_BODYCLICK;
        this.setPMFlag(b ? flag | $ : flag & ~$);
    };
    thi$.isHideOnMouseWheel = function() {
        return (this.getPMFlag() & CLASS.F_BODYMOUSEWHEEL) != 0;
    };
    thi$.setHideOnMouseWheel = function(b) {
        var flag = this.getPMFlag(), $ = CLASS.F_BODYMOUSEWHEEL;
        this.setPMFlag(b ? flag | $ : flag & ~$);
    };
    thi$.isHideOnBlur = function() {
        return (this.getPMFlag() & CLASS.F_FOCUSBOXBLUR) != 0;
    };
    thi$.setHideOnBlur = function(b) {
        var flag = this.getPMFlag(), $ = CLASS.F_FOCUSBOXBLUR;
        this.setPMFlag(b ? flag | $ : flag & ~$);
    };
    thi$.isHideOnTimeout = function() {
        return (this.getPMFlag() & CLASS.F_TIMEOUT) != 0;
    };
    thi$.setHideOnTimeout = function(b, timeout) {
        var flag = this.getPMFlag(), $ = CLASS.F_TIMEOUT;
        this.setPMFlag(b ? flag | $ : flag & ~$, timeout);
    };
    thi$.setAutoHide = function(b) {
        var flag = this.getPMFlag(), $ = CLASS.F_AUTO;
        this.setPMFlag(b ? flag | $ : flag & ~$);
    };
    thi$.canHide = function(e) {
        var type = e.getType(), el, f, b = true;
        switch (type) {
          case "mousewheel":
          case "DOMMouseScroll":
          case "mousedown":
            el = e.srcElement;
            if (el && this.view && DOM.contains(this.view, el, true)) {
                b = false;
            } else {
                f = EvtFlagMap[type];
            }
            break;

          case "click":
          case "blur":
          case "timeout":
            f = EvtFlagMap[type];
            break;

          case "hide":
            b = (this._local.LMFlag & CLASS.F_AUTO) == 0;
            break;

          case "message":
          case "resize":
            b = true;
            break;
        }
        if (f) {
            b = (f & this._local.LMFlag) !== 0;
        }
        return b;
    };
    thi$.isShown = function() {
        return this.LM().indexOf(this) !== -1;
    };
    thi$.showAt = function(x, y, v, m) {
        this.LM().showAt(this, x, y, v, m);
    };
    thi$.showBy = function(by, v, m) {
        this.LM().showBy(this, by, v, m);
    };
    thi$.hide = function(type) {
        this.setAutoHide(false);
        var arg = arguments ? arguments[1] : undefined, evt = new Event(type || "hide", arg, this);
        this.LM().onHide(evt);
    };
    thi$.hideOthers = function(type) {
        var arg = arguments ? arguments[1] : undefined, evt = new Event(type || "hide", arg, this);
        this.LM().clearStack(evt);
    };
    var _createFocusBox = function() {
        if (this.focusBox == undefined) {
            var focusBox = this.focusBox = document.createElement("input");
            focusBox.type = "text";
            focusBox.style.cssText = "position:absolute;left:-1px;top:-2000px;" + "width:1px;height:1px;";
        }
    };
    thi$.startTimeout = function() {
        var LM = this.LM();
        if ((this._local.LMFlag & CLASS.F_TIMEOUT) != 0) {
            this.lmtimer = LM.onHide.$delay(LM, this._local.LMTimeout, new Event("timeout"));
            System.log.println("Create timer: " + this.lmtimer);
        }
    };
    thi$.timeoutMouseout = function(e) {
        if (DOM.contains(this.view, e.toElement, true)) {
            return;
        }
        this.startTimeout();
    };
    thi$.timeoutMouseover = function(e) {
        if (!DOM.contains(this.view, e.toElement, true)) {
            return;
        }
        var LM = this.LM();
        if (LM.onHide.$clearTimer(this.lmtimer)) {
            System.log.println("Delete timer: " + this.lmtimer);
            delete this.lmtimer;
        }
    };
    thi$.LM = function() {
        return this.Runtime().getDesktop().LM;
    };
};

(function() {
    var CLASS = js.awt.PopupLayer;
    CLASS.F_BODYMOUSEDOWN = 1 << 0;
    CLASS.F_BODYCLICK = 1 << 1;
    CLASS.F_BODYMOUSEWHEEL = 1 << 2;
    CLASS.F_FOCUSBOXBLUR = 1 << 3;
    CLASS.F_TIMEOUT = 1 << 4;
    CLASS.F_AUTO = 1 << 5;
})();

$package("js.awt");

js.awt.ToolTip = function() {
    var CLASS = js.awt.ToolTip, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ;
    thi$.setTipObject = function(tipObj, gc) {
        var U = this._local, tip = this.getTipLayer();
        U.tipObj = tipObj;
        if (!tip) {
            return;
        }
        tip.setTipObject(tipObj, gc);
    };
    thi$.getTipObject = function(e) {
        var U = this._local;
        return U.tipObj;
    };
    thi$.setTipObjByDef = function(def) {
        var tipObj;
        if (!Class.isObject(def) || !def.classType) {
            return;
        }
        def.stateless = true;
        def.NUCG = true;
        tipObj = new (Class.forName(def.classType))(def, this.Runtime());
        this.setTipObject(tipObj, true);
    };
    thi$.setTipLabel = function(labelText, styles, extDef) {
        var tipObj = this.getTipObject(), objDef;
        if (!tipObj || !(tipObj instanceof js.awt.Label)) {
            objDef = {
                classType: "js.awt.Label",
                className: "jsvm_tipLabel"
            };
            if (Class.isObject(extDef)) {
                System.objectCopy(extDef, objDef);
            }
            this.setTipObjByDef(objDef);
        }
        tipObj = this.getTipObject();
        if (Class.isObject(styles)) {
            tipObj.applyStyles(styles);
        }
        tipObj.setText(labelText);
    };
    thi$.getTipLayer = function() {
        return this.tipLayer;
    };
    var _createTipLayer = function(tipDef) {
        var M = this.def, tip;
        tip = this.tipLayer;
        if (tip) {
            return;
        }
        if (Class.isObject(tipDef)) {
            tipDef = System.objectCopy(tipDef, {}, true);
        } else {
            tipDef = {
                shadow: true
            };
        }
        M.tipDef = tipDef;
        tipDef.classType = tipDef.classType || "js.awt.TipLayer";
        tipDef.id = tipDef.id || [ this.getID(), "tip" ].join("-");
        tipDef.uuid = tipDef.uuid || [ this.uuid(), "tip" ].join("-");
        tipDef.isfloating = true;
        tipDef.stateless = true;
        tip = this.tipLayer = new (Class.forName(tipDef.classType))(tipDef, this.Runtime());
        this.attachEvent("mouseover", 4, this, _onhover);
        this.attachEvent("mouseout", 4, this, _onhover);
        this.attachEvent("mousemove", 4, this, _onhover);
    };
    thi$.removeTipLayer = function() {
        var tip = this.tipLayer;
        if (!tip) {
            return;
        }
        this.detachEvent("mouseover", 4, this, _onhover);
        this.detachEvent("mouseout", 4, this, _onhover);
        this.detachEvent("mousemove", 4, this, _onhover);
        tip.destroy();
        delete this.tipLayer;
    };
    thi$.showTipLayer = function(b, e) {
        var tip, xy;
        b = b || false;
        tip = this.getTipLayer();
        if (!tip) {
            return;
        }
        if (b) {
            xy = e.eventXY();
            tip.setTipObject(this.getTipObject(e));
            tip.showAt(xy.x - 2, xy.y + 18, true);
        } else {
            tip.hide(e);
        }
    };
    var _onhover = function(e) {
        if (e.getType() === Event.W3C_EVT_MOUSE_OUT) {
            this.showTipLayer(false);
        } else {
            this.showTipLayer(true, e);
        }
        return true;
    };
    thi$.setUserDefinedTip = function(b, tipDef) {
        var M = this.def, U = this._local, tip;
        b = b || false;
        M.useUserDefinedTip = b;
        if (b) {
            U.tipText = M.tip;
            this.rmvTipText();
            _createTipLayer.call(this, tipDef || M.tipDef);
        } else {
            this.setTipText(U.tipText);
            this.removeTipLayer();
        }
    };
    thi$.setTipText = function(text) {
        text = Class.isString(text) ? text.trim() : undefined;
        if (!text) {
            return;
        }
        this.def.tip = text;
        DOM.setAttribute(this.view, "title", text);
        DOM.setAttribute(this._coverView, "title", text);
    };
    thi$.rmvTipText = function() {
        this.def.tip = undefined;
        DOM.removeAttribute(this.view, "title");
        DOM.removeAttribute(this._coverView, "title");
    };
    thi$.setToolTipText = function(s) {
        this.setTipText(s);
    };
    thi$.delToolTipText = function() {
        this.rmvTipText();
    };
};

$package("js.awt");

js.awt.ZOrderManager = function() {
    var CLASS = js.awt.ZOrderManager, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        return;
    }
    CLASS.__defined__ = true;
    thi$.isZOrder = function() {
        return this.def.zorder || false;
    };
    thi$.setZOrder = function(b) {
        this.def.zorder = b || false;
    };
    thi$.bringCompForward = function(comp, fire) {
        var stack = this.def.items, comps = _allComps.call(this), compN;
        for (var i = 0, len = comps.length; i < len && len > 2; i++) {
            if (comp === comps[i]) {
                compN = comps[i + 1];
                if (compN != undefined && (!comp.isAlwaysOnTop() && !compN.isAlwaysOnTop() || comp.isAlwaysOnTop() && compN.isAlwaysOnTop())) {
                    var b = stack.splice(i, 1)[0];
                    stack.splice(i + 1, 0, b);
                    this.zOrderAdjust(fire);
                    return;
                }
            }
        }
    };
    thi$.bringCompToFront = function(comp, fire) {
        var stack = this.def.items, b = _findComp.call(this, comp, stack);
        if (comp.isAlwaysOnTop()) {
            stack.push(b);
        } else {
            var comps = _allComps.call(this);
            if (comps.length == 0) {
                stack.push(b);
            } else {
                for (var i = comps.length - 1; i >= 0; i--) {
                    if (!comps[i].isAlwaysOnTop()) {
                        stack.splice(i + 1, 0, b);
                        break;
                    } else {
                        if (i == 0) {
                            stack.unshift(b);
                        }
                    }
                }
            }
        }
        this.zOrderAdjust(fire);
    };
    thi$.sendCompBackward = function(comp, fire) {
        var stack = this.def.items, comps = _allComps.call(this), compN;
        for (var len = comps.length, i = len - 1; i >= 0 && len > 2; i--) {
            if (comp === comps[i]) {
                compN = comps[i - 1];
                if (compN != undefined && (!comp.isAlwaysOnTop() && !compN.isAlwaysOnTop() || comp.isAlwaysOnTop() && compN.isAlwaysOnTop())) {
                    var b = stack.splice(i, 1)[0];
                    stack.splice(i - 1, 0, b);
                    this.zOrderAdjust(fire);
                    return;
                }
            }
        }
    };
    thi$.sendCompToBack = function(comp, fire) {
        var stack = this.def.items, b = _findComp.call(this, comp, stack);
        if (!comp.isAlwaysOnTop()) {
            stack.unshift(b);
        } else {
            var comps = _allComps.call(this);
            for (var i = comps.length - 1; i >= 0; i--) {
                if (!comps[i].isAlwaysOnTop()) {
                    stack.splice(i + 1, 0, b);
                    break;
                }
            }
        }
        this.zOrderAdjust(fire);
    };
    thi$.setCompAlwaysOnTop = function(comp, alwaysOnTop, fire) {
        if (comp.isAlwaysOnTop() === alwaysOnTop) {
            return;
        }
        if (alwaysOnTop) {
            comp.def.alwaysOnTop = true;
            this.bringCompToFront(comp, fire);
        } else {
            this.sendCompToBack(comp, fire);
            comp.def.alwaysOnTop = false;
        }
        this.zOrderAdjust(fire);
    };
    thi$.zOrderAdjust = function(fire) {
        if (this.isZOrder()) {
            var stack = this.items(), zbase = this.def.zbase || 0;
            for (var i = stack.length - 1; i >= 0; i--) {
                this.getElementById(stack[i]).setZ(zbase + i - stack.length, fire);
            }
        }
    };
    var _findComp = function(comp, comps) {
        var stack = this.def.items, b;
        for (var i = 0, len = comps.length; i < len && len >= 1; i++) {
            if (comp.id === comps[i]) {
                b = stack.splice(i, 1)[0];
                break;
            }
        }
        return b;
    };
    var _allComps = function() {
        var ret = [];
        (function(id) {
            ret.push(this.getElementById(id));
        }).$forEach(this, this.def.items);
        return ret;
    };
};

$package("js.awt");

js.awt.LayoutManager = function(def) {
    var CLASS = js.awt.LayoutManager, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System;
    thi$.getLayoutInfo = function() {
        return this.def;
    };
    thi$.getLayoutComponents = function(container) {
        var ret = [];
        _filter.$forEach(this, container.getLayoutComponents(), container, ret);
        return ret;
    };
    var _filter = function(container, array, id) {
        var comp = container.getComponent(id);
        if (comp && comp.isVisible()) {
            array.push(comp);
        }
    };
    thi$.layoutContainer = function(container, force) {
        _doLayout.$forEach(this, this.getLayoutComponents(container), force);
    };
    var _doLayout = function(force, comp) {
        comp.doLayout(force);
    };
    thi$.invalidateLayout = function(container) {};
    thi$.getLayoutSize = function(container, fn) {
        var comps = this.getLayoutComponents(container), bounds = container.getBounds(), ret, w = 0, h = 0;
        if (comps.length > 0) {
            ret = {
                x0: undefined,
                y0: undefined,
                x1: 0,
                y1: 0
            };
            _calcSize.$forEach(this, comps, fn, ret);
            w = ret.x1 - ret.x0;
            h = ret.y1 - ret.y0;
        }
        w += bounds.MBP.BPW;
        h += bounds.MBP.BPH;
        return {
            width: w,
            height: h
        };
    };
    var _calcSize = function(fn, ret, comp) {
        var d = comp[fn](), xy = comp.absXY(), x = xy.x, y = xy.y;
        ret.x0 = Class.isNumber(ret.x0) ? Math.min(ret.x0, x) : x;
        ret.y0 = Class.isNumber(ret.y0) ? Math.min(ret.y0, y) : y;
        ret.x1 = Math.max(ret.x1, x + d.width);
        ret.y1 = Math.max(ret.y1, y + d.height);
    };
    thi$.preferredLayoutSize = function(container) {
        return this.getLayoutSize(container, "getPreferredSize");
    };
    thi$.minimumLayoutSize = function(container) {
        return this.getLayoutSize(container, "getMinimumSize");
    };
    thi$.maximumLayoutSize = function(container) {
        return this.getLayoutSize(container, "getMaximumSize");
    };
    thi$.getLayoutAlignmentX = function() {
        var align = this.def.align_x;
        return Class.isNumber(align) ? align : .5;
    };
    thi$.getLayoutAlignmentY = function() {
        var align = this.def.align_y;
        return Class.isNumber(align) ? align : .5;
    };
    thi$.destroy = function() {
        this.def = null;
        $super(this);
    }.$override(this.destroy);
    thi$._init = function(def) {
        this.def = def || {};
        this.def.classType = "js.awt.LayoutManager";
    };
    this._init.apply(this, arguments);
}.$extend(js.lang.Object);

$package("js.awt");

$import("js.awt.LayoutManager");

js.awt.AbsoluteLayout = function(def) {
    var CLASS = js.awt.AbsoluteLayout, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM;
    thi$._init = function(def) {
        this.def = def || {};
        this.def.classType = this.def.classType || "js.awt.AbsoluteLayout";
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.LayoutManager);

$package("js.awt");

js.awt.BorderLayout = function(def) {
    var CLASS = js.awt.BorderLayout, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System;
    thi$.layoutContainer = function(container, force) {
        var items = this.getLayoutComponents(container), comps = {}, comp;
        for (var i = 0, len = items.length; i < len; i++) {
            comp = items[i];
            comps[comp.def.constraints] = comp;
        }
        switch (this.def.mode) {
          case 0:
            _mode0Layout.call(this, container, comps, force);
            break;

          case 1:
            _mode1Layout.call(this, container, comps, force);
            break;

          case 2:
            _mode2Layout.call(this, container, comps, force);
            break;

          case 3:
            _mode3Layout.call(this, container, comps, force);
            break;

          case 4:
            _mode4Layout.call(this, container, comps, force);
            break;

          case 5:
            _mode5Layout.call(this, container, comps, force);
            break;

          case 10:
            _mode10Layout.call(this, container, comps, force);
            break;

          default:
            throw "Unsupport layout mode " + this.def.mode;
            break;
        }
    }.$override(this.layoutContainer);
    var _mode0Layout = function(container, comps, force) {
        var setting = this.def, bounds = container.getBounds(), vgap = setting.vgap || 0, hgap = setting.hgap || 0, xbase = bounds.MBP.paddingLeft, left = 0, ybase = bounds.MBP.paddingTop, top = 0, right = bounds.innerWidth, bottom = bounds.innerHeight, d, comp;
        if (comp = comps["north"]) {
            comp.setWidth(bounds.innerWidth, 3);
            d = comp.getBounds();
            comp.setPosition(xbase + left, ybase + top, 3);
            top += d.height + vgap;
        }
        if (comp = comps["south"]) {
            comp.setWidth(bounds.innerWidth, 3);
            d = comp.getBounds();
            comp.setPosition(xbase + left, ybase + bounds.innerHeight - d.height, 3);
            bottom -= d.height + vgap;
        }
        if (comp = comps["east"]) {
            comp.setHeight(bottom - top, 3);
            d = comp.getBounds();
            comp.setPosition(xbase + right - d.width, ybase + top, 3);
            right -= d.width + hgap;
        }
        if (comp = comps["west"]) {
            comp.setHeight(bottom - top, 3);
            d = comp.getBounds();
            comp.setPosition(xbase + left, ybase + top, 3);
            left += d.width + hgap;
        }
        if (comp = comps["center"]) {
            var fire = force === true ? 15 : 7;
            comp.setSize(right - left, bottom - top, fire);
            comp.setPosition(xbase + left, ybase + top, fire);
        }
    };
    var _mode1Layout = function(container, comps, force) {
        var setting = this.def, bounds = container.getBounds(), vgap = setting.vgap || 0, hgap = setting.hgap || 0, xbase = bounds.MBP.paddingLeft, left = 0, ybase = bounds.MBP.paddingTop, top = 0, right = bounds.innerWidth, bottom = bounds.innerHeight, d, comp;
        if (comp = comps["west"]) {
            comp.setHeight(bounds.innerHeight, 3);
            d = comp.getBounds();
            comp.setPosition(xbase + left, ybase + top, 3);
            left += d.width + hgap;
        }
        if (comp = comps["east"]) {
            comp.setHeight(bounds.innerHeight, 3);
            d = comp.getBounds();
            comp.setPosition(xbase + bounds.innerWidth - d.width, ybase + top, 3);
            right -= d.width + hgap;
        }
        if (comp = comps["south"]) {
            comp.setWidth(right - left, 3);
            d = comp.getBounds();
            comp.setPosition(xbase + left, ybase + bounds.innerHeight - d.height, 3);
            bottom -= d.height + vgap;
        }
        if (comp = comps["north"]) {
            comp.setWidth(right - left, 3);
            d = comp.getBounds();
            comp.setPosition(xbase + left, ybase + top, 3);
            top += d.height + vgap;
        }
        if (comp = comps["center"]) {
            var fire = force === true ? 15 : 7;
            comp.setSize(right - left, bottom - top, fire);
            comp.setPosition(xbase + left, ybase + top, fire);
        }
    };
    var _mode2Layout = function(container, comps, force) {
        var setting = this.def, bounds = container.getBounds(), vgap = setting.vgap || 0, hgap = setting.hgap || 0, xbase = bounds.MBP.paddingLeft, left = 0, ybase = bounds.MBP.paddingTop, top = 0, right = bounds.innerWidth, bottom = bounds.innerHeight, d, comp;
        if (comp = comps["west"]) {
            comp.setHeight(bounds.innerHeight, 3);
            d = comp.getBounds();
            comp.setPosition(xbase + left, ybase + top, 3);
            left += d.width + hgap;
        }
        if (comp = comps["center"]) {
            comp.setHeight(bounds.innerHeight, 3);
            d = comp.getBounds();
            comp.setPosition(xbase + left, ybase + top, 3);
            left += d.width + hgap;
        }
        if (comp = comps["north"]) {
            comp.setWidth(right - left, 3);
            d = comp.getBounds();
            comp.setPosition(xbase + left, ybase + top, 3);
            top += d.height + vgap;
        }
        if (comp = comps["south"]) {
            comp.setWidth(right - left, 3);
            d = comp.getBounds();
            comp.setPosition(xbase + left, ybase + bounds.innerHeight - d.height, 3);
            bottom -= d.height + vgap;
        }
        if (comp = comps["east"]) {
            var fire = force === true ? 15 : 7;
            comp.setBounds(xbase + left, ybase + top, right - left, bottom - top, fire);
        }
    };
    var _mode3Layout = function(container, comps, force) {
        var setting = this.def, bounds = container.getBounds(), vgap = setting.vgap || 0, hgap = setting.hgap || 0, xbase = bounds.MBP.paddingLeft, left = 0, ybase = bounds.MBP.paddingTop, top = 0, right = bounds.innerWidth, bottom = bounds.innerHeight, d, comp;
        if (comp = comps["west"]) {
            comp.setHeight(bounds.innerHeight, 3);
            d = comp.getBounds();
            comp.setPosition(xbase + left, ybase + top, 3);
            left += d.width + hgap;
        }
        if (comp = comps["north"]) {
            comp.setWidth(right - left, 3);
            d = comp.getBounds();
            comp.setPosition(xbase + left, ybase + top, 3);
            top += d.height + vgap;
        }
        if (comp = comps["south"]) {
            comp.setWidth(right - left, 3);
            d = comp.getBounds();
            comp.setPosition(xbase + left, ybase + bounds.innerHeight - d.height, 3);
            bottom -= d.height + vgap;
        }
        if (comp = comps["center"]) {
            comp.setHeight(bottom - top, 3);
            d = comp.getBounds();
            comp.setPosition(xbase + left, ybase + top, 3);
            left += d.width + hgap;
        }
        if (comp = comps["east"]) {
            var fire = force === true ? 15 : 7;
            comp.setBounds(xbase + left, ybase + top, right - left, bottom - top, fire);
        }
    };
    var _mode4Layout = function(container, comps, force) {
        var setting = this.def, bounds = container.getBounds(), vgap = setting.vgap || 0, hgap = setting.hgap || 0, xbase = bounds.MBP.paddingLeft, left = 0, ybase = bounds.MBP.paddingTop, top = 0, right = bounds.innerWidth, bottom = bounds.innerHeight, d, comp;
        if (comp = comps["west"]) {
            comp.setHeight(bounds.innerHeight, 3);
            d = comp.getBounds();
            comp.setPosition(xbase + left, ybase + top, 3);
            left += d.width + hgap;
        }
        if (comp = comps["east"]) {
            comp.setHeight(bounds.innerHeight, 3);
            d = comp.getBounds();
            comp.setPosition(xbase + bounds.innerWidth - d.width, ybase + top, 3);
            right -= d.width + hgap;
        }
        if (comp = comps["north"]) {
            comp.setWidth(right - left, 3);
            d = comp.getBounds();
            comp.setPosition(xbase + left, ybase + top, 3);
            top += d.height + vgap;
        }
        if (comp = comps["center"]) {
            comp.setWidth(right - left, 3);
            d = comp.getBounds();
            comp.setPosition(xbase + left, ybase + top, 3);
            top += d.height + vgap;
        }
        if (comp = comps["south"]) {
            var fire = force === true ? 15 : 7;
            comp.setSize(right - left, bottom - top, fire);
            comp.setPosition(xbase + left, ybase + top, fire);
        }
    };
    var _mode5Layout = function(container, comps, force) {
        var setting = this.def, bounds = container.getBounds(), vgap = setting.vgap || 0, hgap = setting.hgap || 0, xbase = bounds.MBP.paddingLeft, left = 0, ybase = bounds.MBP.paddingTop, top = 0, right = bounds.innerWidth, bottom = bounds.innerHeight, d, comp;
        if (comp = comps["north"]) {
            comp.setWidth(bounds.innerWidth, 3);
            d = comp.getBounds();
            comp.setPosition(xbase + left, ybase + top, 3);
            top += d.height + vgap;
        }
        if (comp = comps["center"]) {
            comp.setWidth(bounds.innerWidth, 3);
            d = comp.getBounds();
            comp.setPosition(xbase + left, ybase + top, 3);
            top += d.height + vgap;
        }
        if (comp = comps["west"]) {
            comp.setHeight(bottom - top, 3);
            d = comp.getBounds();
            comp.setPosition(xbase + left, ybase + top, 3);
            left += d.width + hgap;
        }
        if (comp = comps["east"]) {
            comp.setHeight(bottom - top, 3);
            d = comp.getBounds();
            comp.setPosition(xbase + right - d.width, ybase + top, 3);
            right -= d.width + hgap;
        }
        if (comp = comps["south"]) {
            var fire = force === true ? 15 : 7;
            comp.setSize(right - left, bottom - top, fire);
            comp.setPosition(xbase + left, ybase + top, fire);
        }
    };
    var _mode10Layout = function(container, comps, force) {
        var setting = this.def, bounds = container.getBounds(), vgap = setting.vgap || 0, hgap = setting.hgap || 0, xbase = bounds.MBP.paddingLeft, left = 0, ybase = bounds.MBP.paddingTop, top = 0, right = bounds.innerWidth, bottom = bounds.innerHeight, d, comp;
        if (comp = comps["west"]) {
            comp.setHeight(bounds.innerHeight, 3);
            d = comp.getBounds();
            comp.setPosition(xbase + left, ybase + top, 3);
            left += d.width + hgap;
        }
        if (comp = comps["center"]) {
            comp.setHeight(bounds.innerHeight, 3);
            d = comp.getBounds();
            comp.setPosition(xbase + left, ybase + top, 3);
            left += d.width + hgap;
        }
        if (comp = comps["east"]) {
            comp.setHeight(bounds.innerHeight, 3);
            d = comp.getBounds();
            comp.setPosition(xbase + right - d.width, ybase + top, 3);
            right -= d.width + hgap;
        }
        if (comp = comps["north"]) {
            comp.setWidth(right - left, 3);
            d = comp.getBounds();
            comp.setPosition(xbase + left, ybase + top, 3);
            top += d.height + vgap;
        }
        if (comp = comps["south"]) {
            var fire = force === true ? 15 : 7;
            comp.setSize(right - left, bottom - top, fire);
            comp.setPosition(xbase + left, ybase + top, fire);
        }
    };
    thi$._init = function(def) {
        def = def || {};
        def.classType = "js.awt.BorderLayout";
        def.mode = def.mode || 0;
        def.hgap = def.hgap || 0;
        def.vgap = def.vgap || 0;
        $super(this);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.AbsoluteLayout);

(function() {
    var CLASS = js.awt.BorderLayout;
    CLASS.NORTH = "north";
    CLASS.SOUTH = "south";
    CLASS.EAST = "east";
    CLASS.WEST = "west";
    CLASS.CENTER = "center";
})();

$package("js.awt");

js.awt.BoxLayout = function(def) {
    var CLASS = js.awt.BoxLayout, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class;
    thi$.layoutContainer = function(container) {
        var setting = this.def, bounds = container.getBounds(), gap = setting.gap || 0, axis = setting.axis || 0, space = axis == 0 ? bounds.innerWidth : bounds.innerHeight, xbase = bounds.MBP.paddingLeft, left = 0, ybase = bounds.MBP.paddingTop, top = 0, comps = this.getLayoutComponents(container), comp, rects = [], d, r, c = 0;
        for (var i = 0, len = comps.length; i < len; i++) {
            comp = comps[i];
            d = comp.getPreferredSize();
            r = {};
            if (axis == 0) {
                r.top = (bounds.innerHeight - d.height) * this.getLayoutAlignmentY();
                if (!comp.isRigidHeight()) {
                    r.top = 0;
                    r.height = bounds.innerHeight;
                } else {
                    r.height = d.height;
                }
                r.width = comp.isRigidWidth() ? d.width : null;
                if (r.width != null) {
                    space -= r.width;
                } else {
                    c += 1;
                }
            } else {
                r.left = (bounds.innerWidth - d.width) * this.getLayoutAlignmentX();
                if (!comp.isRigidWidth()) {
                    r.left = 0;
                    r.width = bounds.innerWidth;
                } else {
                    r.width = d.width;
                }
                r.height = comp.isRigidHeight() ? d.height : null;
                if (r.height != null) {
                    space -= r.height;
                } else {
                    c += 1;
                }
            }
            r.comp = comp;
            rects.push(r);
        }
        if (rects.length > 1) {
            space -= (rects.length - 1) * gap;
        }
        if (c > 1) {
            space = Math.round(space / c);
        }
        if (c == 0) {
            if (axis == 0) {
                left = Math.round(space * this.getLayoutAlignmentX());
            } else {
                top = Math.round(space * this.getLayoutAlignmentY());
            }
        }
        for (i = 0, len = rects.length; i < len; i++) {
            r = rects[i];
            comp = r.comp;
            if (axis == 0) {
                if (r.width == null) {
                    r.width = space;
                }
                comp.setBounds(xbase + left, ybase + r.top, r.width, r.height, 3);
                left += r.width + gap;
            } else {
                if (r.height == null) {
                    r.height = space;
                }
                comp.setBounds(xbase + r.left, ybase + top, r.width, r.height, 3);
                top += r.height + gap;
            }
        }
    };
    thi$._init = function(def) {
        def = def || {};
        def.classType = "js.awt.BoxLayout";
        def.axis = def.axis || 0;
        def.gap = def.gap || 0;
        $super(this, def);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.AbsoluteLayout);

$package("js.awt");

$import("js.awt.AbsoluteLayout");

js.awt.BrickLayout = function(def) {
    var CLASS = js.awt.BrickLayout, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MAX_W = 65536, MAX_H = 65536, MIN_G = 10, BREAK = 1, SCALE_W = 1600, SCALE_H = 1e3;
    thi$.layoutContainer = function(container, force, vbounds) {
        var items, rects, def = this.def, info = this.info, view = container.view, vw, vh, scaleW, scrollw = J$VM.supports.vscrollbar, ratio;
        vbounds = vbounds || DOM.getBounds(container.view.offsetParent);
        vw = vbounds.innerWidth - (def.gap << 1);
        if (!info) {
            if (view) {
                view.style.transform = "";
            }
            items = this.getLayoutComponents(container);
            rects = _getrects(items);
            this.baseinfo = _baseInfo(rects);
            info = this.info = _gridding(rects, def);
            info.container = container;
            info.vw = vw - (info.w > vw ? scrollw : 0);
            info.ideal = info.w <= info.vw;
            if (info.ideal) {
                _setBounds(container, info, 7);
                return true;
            }
        }
        info.vw = vw - (info.w > vw ? scrollw : 0);
        if (info.ideal && info.w <= info.vw) {
            _setBounds(container, info, 4);
            return false;
        }
        info.ideal = info.w <= info.vw;
        if (!info.ideal) {
            info = _relayout.call(this, info.clone(), info.vw);
        }
        _setBounds(container, info, 7);
        return true;
    };
    thi$.layoutContainer0 = function(container, info) {
        _setBounds(container, info, 7);
        return true;
    };
    var _baseInfo = function(rects) {
        var ret = new Rect(), maxW = 0, maxH = 0, max = Math.max;
        ret.gap = 0;
        ret.rects = [];
        rects.forEach(function(rect) {
            ret.rects.push(rect.clone());
            maxW = max(rect.r, maxW);
            maxH = max(rect.b, maxH);
        });
        ret.w = maxW;
        ret.h = maxH;
        return ret;
    };
    var _gridding = function(rects, def) {
        var max = Math.max, round = Math.round, floor = Math.floor, ceil = Math.ceil, info = new Rect(), gw = def.gw, gh = def.gh;
        info.gap = def.gap;
        if (!gw) {
            gw = MIN_G;
        }
        if (!gh) {
            gh = MIN_G;
        }
        info.grouping(rects, Scanner.VSCAN);
        info.gridding(gw, gh);
        var ovs, w = 0, h = 0;
        ovs = Rect.SCANNER[Scanner.HSCAN].overlaps(rects);
        w = ovs.maxv;
        ovs = Rect.SCANNER[Scanner.VSCAN].overlaps(rects);
        h = ovs.maxv;
        info.layout(0, 0, w, h, rects);
        info.grouping(rects, Scanner.VSCAN);
        info.rects = rects;
        return info;
    };
    var _relayout = function(info, vw) {
        var min = Math.min, round = Math.round, floor = Math.floor, ceil = Math.ceil, gwc, ghc, gw, gh;
        if (vw >= info.w * this.def.compress) {
            info.w = vw;
        } else {
            info.breakat(vw);
        }
        info.vw = info.w;
        info.rects = info.leaves();
        return info;
    };
    var _setBounds = function(container, info, fire) {
        var gap = info.gap, rects = info.rects, item;
        if (container.view) {
            container.view.style.transform = "";
        }
        rects.forEach(function(rect) {
            item = container.getOBJ(rect.id);
            item.setBounds(rect.x + gap, rect.y + gap, rect.w, rect.h, fire);
        });
        container.setSize(info.vw, info.h + gap, fire);
        if (info.ideal && Class.isFunction(container.waitScale)) {
            container.waitScale(_scale.$bind(info));
        }
    };
    var _scale = function() {};
    var _getrects = function(items) {
        var minW = MAX_W, minH = MAX_H, min = Math.min, rects = [], rect;
        items.forEach(function(item, i) {
            rect = rects[i] = _comp2rect(item);
            minW = min(minW, rect.w);
            minH = min(minH, rect.h);
        });
        rects.minw = minW;
        rects.minh = minH;
        return rects;
    };
    var _comp2rect = function(item) {
        var rect, d;
        d = item.getBounds();
        rect = new Rect(d.x, d.y, d.width, d.height);
        rect.id = item.id;
        d = item.getMinimumSize();
        rect.minW = d.width || 0;
        rect.minH = d.height || 0;
        return rect;
    };
    var _gcd = function(rects, gap, v) {
        var floor = Math.floor, max = Math.max, mg = rects["min" + v] + gap, ming = MIN_G + gap, to, i, j, len = rects.length, mod, tmp, mods = [];
        if (mg <= 2 * ming) {
            return Math.min(mg, ming);
        }
        to = mg >> 1;
        if (to <= 2 * ming) {
            return to;
        }
        for (i = to >> 1; i <= to; i++) {
            mod = 0;
            for (j = 0; j < len; j++) {
                tmp = (rects[j][v] + gap) / i;
                mod += tmp - floor(tmp);
            }
            mods[mods.length] = [ mod, i ];
        }
        mods.sort(function(a, b) {
            return a[0] - b[0];
        });
        mod = mods.length > 0 ? mods[0][1] : 1;
        return mod;
    };
    var Rect = function(x, y, w, h) {
        var CLASS = Rect, thi$ = CLASS.prototype;
        if (CLASS.__defined__) {
            return this._init.apply(this, arguments);
        }
        CLASS.__defined__ = "Rect";
        var CELL = CLASS.CELL = 0, COL = CLASS.COL = 1, ROW = CLASS.ROW = 2, OTH = CLASS.OTH = 3;
        var floor = Math.floor, ceil = Math.ceil, round = Math.round;
        Object.defineProperties(thi$, {
            __type: {
                value: CELL,
                writable: true
            },
            type: {
                get: function() {
                    return this.__type;
                },
                set: function(v) {
                    this.__type = v || CELL;
                    this.nodes = this.__type != CELL ? [] : null;
                }
            },
            id: {
                value: null,
                enumerable: true,
                writable: true
            },
            __x: {
                value: 0,
                writable: true
            },
            x: {
                get: function() {
                    return this.__x;
                },
                set: function(v) {
                    var t = this.__type, nodes = this.nodes, l = nodes ? nodes.length : 0, e = v - this.__x;
                    this.__x = v;
                    if (t == CELL || e == 0 || l == 0) {
                        return;
                    }
                    if (t == COL) {
                        nodes.forEach(function(rect) {
                            rect.x = v;
                        });
                    } else {
                        nodes.forEach(function(rect) {
                            rect.x += e;
                        });
                    }
                }
            },
            __y: {
                value: 0,
                writable: true
            },
            y: {
                get: function() {
                    return this.__y;
                },
                set: function(v) {
                    var t = this.__type, nodes = this.nodes, l = nodes ? nodes.length : 0, e = v - this.__y;
                    this.__y = v;
                    if (t == CELL || e == 0 || l == 0) {
                        return;
                    }
                    if (t == ROW) {
                        nodes.forEach(function(rect) {
                            rect.y = v;
                        });
                    } else {
                        nodes.forEach(function(rect) {
                            rect.y += e;
                        });
                    }
                }
            },
            __w: {
                value: 0,
                writable: true
            },
            w: {
                get: function() {
                    return this.__w;
                },
                set: function(v) {
                    var t = this.__type, nodes = this.nodes, l = nodes ? nodes.length : 0, k = v / this.__w, round = Math.floor, e, x, r;
                    e = v - round(this.__w * k);
                    this.__w = v;
                    if (t == CELL || k == 1 || l == 0) {
                        return;
                    }
                    x = this.__x;
                    r = this.r;
                    if (t == COL) {
                        nodes.forEach(function(rect) {
                            rect.w = v;
                        });
                    } else {
                        nodes.forEach(function(rect, i) {
                            var rm = t == OTH ? rect.r < r ? 0 : e : i < l - 1 ? 0 : e;
                            rect.w = round(rect.__w * k) + rm;
                            rect.x = x + round((rect.__x - x) * k);
                        });
                    }
                }
            },
            r: {
                get: function() {
                    return this.__x + this.__w;
                },
                set: function(v) {
                    this.w = v - this.__x;
                }
            },
            __h: {
                value: 0,
                writable: true
            },
            h: {
                get: function() {
                    return this.__h;
                },
                set: function(v) {
                    var t = this.__type, nodes = this.nodes, l = nodes ? nodes.length : 0, k = v / this.__h, round = Math.floor, e, y, b;
                    e = v - round(this.__h * k);
                    this.__h = v;
                    if (t == CELL || k == 1 || l == 0) {
                        return;
                    }
                    y = this.__y;
                    b = this.b;
                    if (t == ROW) {
                        nodes.forEach(function(rect) {
                            rect.h = v;
                        });
                    } else {
                        nodes.forEach(function(rect, i) {
                            var rm = t == OTH ? rect.b < b ? 0 : e : i < l - 1 ? 0 : e;
                            rect.h = round(rect.__h * k) + rm;
                            rect.y = y + round((rect.__y - y) * k);
                        });
                    }
                }
            },
            b: {
                get: function() {
                    return this.__y + this.__h;
                },
                set: function(v) {
                    this.h = v - this.__y;
                }
            },
            left: {
                get: function() {
                    return {
                        rect: this,
                        flag: 0,
                        v: this.x,
                        v0: this.x,
                        v1: this.r,
                        s0: this.y,
                        s1: this.b
                    };
                }
            },
            right: {
                get: function() {
                    return {
                        rect: this,
                        flag: 1,
                        v: this.r,
                        v0: this.x,
                        v1: this.r,
                        s0: this.y,
                        s1: this.b
                    };
                }
            },
            top: {
                get: function() {
                    return {
                        rect: this,
                        flag: 0,
                        v: this.y,
                        v0: this.y,
                        v1: this.b,
                        s0: this.x,
                        s1: this.r
                    };
                }
            },
            bottom: {
                get: function() {
                    return {
                        rect: this,
                        flag: 1,
                        v: this.b,
                        v0: this.y,
                        v1: this.b,
                        s0: this.x,
                        s1: this.r
                    };
                }
            },
            gw: {
                value: 1,
                enumerable: true,
                writable: true
            },
            gh: {
                value: 1,
                enumerable: true,
                writable: true
            },
            gx: {
                get: function() {
                    return floor(this.__x / this.gw);
                },
                set: function(v) {
                    this.x = v * this.gw;
                }
            },
            gy: {
                get: function() {
                    return floor(this.__y / this.gh);
                },
                set: function(v) {
                    this.y = v * this.gh;
                }
            },
            cspan: {
                get: function() {
                    return round(this.__w / this.gw) || 1;
                },
                set: function(v) {
                    this.w = v * this.gw;
                }
            },
            rspan: {
                get: function() {
                    return round(this.__h / this.gh) || 1;
                },
                set: function(v) {
                    this.h = v * this.gh;
                }
            },
            area: {
                get: function() {
                    return this.__w * this.__h;
                }
            },
            nodes: {
                value: null,
                enumerable: true,
                writable: true
            },
            length: {
                get: function() {
                    return this.__type != CELL ? this.nodes.length : 0;
                }
            }
        });
        thi$.get = function(i) {
            return this.__type == CELL ? this : this.nodes[i];
        };
        thi$.push = function(rect, update) {
            var t = this.__type, nodes = this.nodes, first, max = Math.max;
            if (t == CELL || !rect) {
                return this;
            }
            first = nodes.length == 0;
            nodes.push(rect);
            this.hasg |= rect.type != CELL;
            if (!update) {
                return this;
            }
            if (first) {
                this.__x = rect.x;
                this.__y = rect.y;
                this.__w = t == COL ? rect.w : 0;
                this.__h = t == ROW ? rect.h : 0;
            } else {
                switch (t) {
                  case ROW:
                    rect.x = this.r;
                    rect.y = this.y;
                    break;

                  case COL:
                    rect.x = this.x;
                    rect.y = this.b;
                    break;

                  case OTH:
                    break;
                }
            }
            this.__w = max(this.r, rect.r) - this.x;
            this.__h = max(this.b, rect.b) - this.y;
            return this;
        };
        thi$.overlaps = function(rect) {
            return this.x < rect.r && this.r > rect.x && this.y < rect.b && this.b > rect.y;
        };
        thi$.contains = function(rect) {
            return this.x <= rect.x && this.y <= rect.y && this.r >= rect.r && this.b >= rect.b;
        };
        thi$.fitness = function(rect) {
            return rect.w <= this.w && rect.h <= this.h;
        };
        thi$.slice = function(rect) {
            var ret = [];
            if (!this.overlaps(rect)) {
                return ret;
            }
            if (rect.x > this.x) {
                ret.push(new Rect(this.x, this.y, rect.x - this.x, this.h));
            }
            if (rect.y > this.y) {
                ret.push(new Rect(this.x, this.y, this.w, rect.y - this.y));
            }
            if (this.r > rect.r) {
                ret.push(new Rect(rect.r, this.y, this.r - rect.r, this.h));
            }
            if (this.b > rect.b) {
                ret.push(new Rect(this.x, rect.b, this.w, this.b - rect.b));
            }
            return ret.length > 0 ? ret : null;
        };
        thi$.distance = function(rect) {
            var pow = Math.pow;
            return Math.sqrt(pow(rect.x - this.x, 2) + pow(rect.y - this.y, 2));
        };
        var _compareZ = function(a, b) {
            return (a.y << 16 | a.x) - (b.y << 16 | b.x);
        };
        var _lookup = function(spaces, rect, first) {
            var sps = [];
            spaces.forEach(function(sp) {
                if (sp.fitness(rect)) {
                    sps[sps.length] = sp;
                }
            });
            sps.sort(function(a, b) {
                return a.distance(rect) - b.distance(rect);
            });
            return sps.length > 0 ? sps[0] : null;
        };
        var _slice = function(spaces, rect) {
            var newsps = [], sp, rs, i, len;
            for (i = 0, len = spaces.length; i < len; i++) {
                sp = spaces[i];
                rs = sp.slice(rect);
                if (!rs) {
                    continue;
                }
                if (rs.length > 0) {
                    newsps = newsps.concat(rs);
                } else {
                    newsps.push(sp);
                }
            }
            return _redundant(newsps);
        };
        var _redundant = function(rects) {
            var i = rects.length, j, a, b;
            while (i--) {
                a = rects[i];
                j = rects.length;
                while (j--) {
                    b = rects[j];
                    if (i !== j && b.contains(a)) {
                        rects.splice(i, 1);
                        break;
                    }
                }
            }
            return rects.sort(_compareZ);
        };
        thi$.layout = function(x, y, w, h, rects) {
            var max = Math.max, min = Math.min, spaces = [ new Rect(x, y, w, h) ], sp, r = 0, b = 0;
            rects.sort(_compareZ);
            rects.forEach(function(rect) {
                sp = _lookup(spaces, rect);
                if (!sp) {
                    sp = new Rect(x, b, w, rect.h);
                    spaces = [ sp ];
                }
                rect.x = sp.x;
                rect.y = sp.y;
                rect.w = min(rect.w, sp.w);
                spaces = _slice(spaces, rect);
                r = max(r, rect.r);
                b = max(b, rect.b);
            });
            rects.sort(_compareZ);
            this.__x = x;
            this.__y = y;
            this.__w = r - x;
            this.__h = b - y;
            return this;
        };
        thi$.gridding = function(gw, gh) {
            var min = Math.min, max = Math.max, host, v;
            host = this;
            switch (this.__type) {
              case CELL:
                _cellgridding.call(this, gw, gh);
                break;

              case ROW:
                this.nodes.forEach(function(rect, i) {
                    if (i == 0) {
                        rect = rect.gridding(gw, gh);
                        host.__x = rect.x;
                        host.__y = rect.y;
                        host.__h = rect.h;
                        v = rect.r;
                    } else {
                        rect.x = v;
                        rect.h = host.h;
                        rect = rect.gridding(gw, gh);
                        v = rect.r;
                    }
                });
                this.__w = v - this.__x;
                break;

              case COL:
                this.nodes.forEach(function(rect, i) {
                    if (i == 0) {
                        rect = rect.gridding(gw, gh);
                        host.__x = rect.x;
                        host.__y = rect.y;
                        host.__w = rect.w;
                        v = rect.b;
                    } else {
                        rect.y = v;
                        rect.w = host.w;
                        rect = rect.gridding(gw, gh);
                        v = rect.b;
                    }
                });
                this.__h = v - this.__y;
                break;

              case OTH:
                this.nodes.forEach(function(rect, i) {
                    rect = rect.gridding(gw, gh);
                    if (i == 0) {
                        host.__x = rect.x;
                        host.__y = rect.y;
                    }
                });
                var rects = this.nodes;
                v = SCANNER[Scanner.HSCAN].overlaps(rects);
                this.layout(this.x, this.y, v.maxv, MAX_H, rects);
                break;
            }
            this.gw = gw;
            this.gh = gh;
            return this;
        };
        var _cellgridding = function(gw, gh) {
            if (this.gw == 1) {
                this.__x = floor(this.__x / gw) * gw;
                this.__w = (ceil(this.__w / gw) || 1) * gw;
            } else {
                if (this.gw != gw) {
                    this.__x = this.gx * gw;
                    this.__w = this.cspan * gw;
                }
            }
            if (this.gh == 1) {
                this.__y = floor(this.__y / gh) * gh;
                this.__h = (ceil(this.__h / gh) || 1) * gh;
            } else {
                if (this.gh != gh) {
                    this.__y = this.gy * gh;
                    this.__h = this.rspan * gh;
                }
            }
        };
        var SCANNER = CLASS.SCANNER = [ new Scanner(0), new Scanner(1) ];
        thi$.grouping = function(rects, dir, level) {
            level = level || 0;
            this.type = dir == Scanner.VSCAN ? COL : ROW;
            var gs = SCANNER[dir].grouping(rects), g;
            if (gs.length == 1) {
                if (rects.length == 1) {
                    _forEach(this, rects, function(rect) {
                        return rect;
                    });
                } else {
                    var hasg = SCANNER[dir ^ 1].grouping(rects);
                    if (hasg.length == 1) {
                        g = level == 0 ? new Rect() : this;
                        g.type = OTH;
                        _forEach(g, rects.sort(_compareZ), function(rect) {
                            return rect;
                        });
                        var v = SCANNER[Scanner.HSCAN].overlaps(rects);
                        if (v.count > 0) {
                            g.layout(g.x, g.y, v.maxv, MAX_H, rects);
                            g.grouping(rects, dir, 1);
                        }
                        if (level == 0) {
                            this.push(g, true);
                        }
                    } else {
                        _forEach(this, gs, function(g) {
                            return g.length == 1 ? g[0] : new Rect().grouping(g, dir ^ 1, level + 1);
                        });
                    }
                }
            } else {
                _forEach(this, gs, function(g) {
                    return g.length == 1 ? g[0] : new Rect().grouping(g, dir ^ 1, level + 1);
                });
            }
            var v;
            switch (this.type) {
              case ROW:
                v = this.h;
                this.nodes.forEach(function(rect) {
                    rect.h = v;
                });
                break;

              case COL:
                v = this.w;
                this.nodes.forEach(function(rect) {
                    rect.w = v;
                });
                break;

              case OTH:
                v = SCANNER[Scanner.HSCAN].overlaps(rects);
                if (v.count > 0) {
                    this.layout(this.x, this.y, v.maxv, MAX_H, rects);
                    return this.grouping(rects, dir, 1);
                }
                break;
            }
            return this;
        };
        var _forEach = function(root, rects, fn) {
            rects.forEach(function(rect) {
                root.push(fn(rect), true);
            });
        };
        thi$.breakat = function(w) {
            var rows = new Rect(0, 0, 0, 0, COL);
            rows.remaing = 0;
            rows.curIdx = 0;
            var _breakto = function(rows, rect) {
                var i = rows.curIdx, r = rows.remaing, row = rows.get(i);
                if (rect.w <= r && rect.h == row.h) {
                    row.push(rect, true);
                    rows.remaing = r -= rect.w;
                    rows.curIdx = r <= 0 ? rows.length : rows.length - 1;
                } else {
                    _expandLast(rows);
                    row = new Rect(0, 0, 0, 0, ROW);
                    if (rect.type == CELL || rect.w <= w) {
                        rect.w = Math.min(rect.w, w);
                        row.push(rect, true);
                        rows.push(row, false);
                        rows.remaing = r = w - rect.w;
                        rows.curIdx = r <= 0 ? rows.length : rows.length - 1;
                    } else {
                        rect.nodes.forEach(function(rect) {
                            _breakto(rows, rect);
                        });
                    }
                }
            };
            var _expandLast = function(rows) {
                var row = rows.get(rows.length - 1);
                if (!row || row.w >= w) {
                    return;
                }
                if (row.hasg && w - row.w >= row.w) {
                    var rects = row.leaves();
                    rects = _alignH(rects).sort(_compareZ);
                    row.type = ROW;
                    row.hasg = false;
                    row.h = rects[0].h;
                    rows.remaing = w;
                    rows.curIdx = rows.length - 1;
                    rects.forEach(function(rect) {
                        _breakto(rows, rect);
                    });
                }
                rows.get(rows.length - 1).w = w;
            };
            this.nodes.forEach(function(rect) {
                if (rect.type == ROW) {
                    rect.nodes.forEach(function(rect) {
                        _breakto(rows, rect);
                    });
                } else {
                    _breakto(rows, rect);
                }
            });
            _expandLast(rows);
            this.nodes = rows.nodes;
            var max = Math.max, x = this.x, b = this.y, r = 0;
            this.nodes.forEach(function(row) {
                row.x = x;
                row.y = b;
                b += row.h;
                r = max(r, row.w);
            });
            this.__w = r - this.x;
            this.__h = b - this.y;
            return this;
        };
        var _alignH = function(rects) {
            var h = 0, gh = rects[0].gh;
            rects.forEach(function(rect) {
                h += rect.h;
            });
            h = Math.ceil(h / rects.length / gh) * gh;
            rects.forEach(function(rect) {
                rect.h = h;
            });
            return rects;
        };
        thi$.clone = function() {
            var rect = new Rect(this.x, this.y, this.w, this.h);
            rect.id = this.id;
            rect.type = this.type;
            rect.minW = this.minW;
            rect.minH = this.minH;
            rect.maxW = this.maxW;
            rect.maxH = this.maxH;
            rect.gw = this.gw;
            rect.gh = this.gh;
            rect.gap = this.gap;
            if (this.__type != CELL) {
                this.nodes.forEach(function(node) {
                    rect.push(node.clone(), true);
                });
            }
            return rect;
        };
        thi$.leaves = function(rects) {
            rects = rects || [];
            if (this.type != CELL) {
                this.nodes.forEach(function(rect) {
                    rect.leaves(rects);
                });
            } else {
                rects[rects.length] = this;
            }
            return rects;
        };
        thi$._init = function(x, y, w, h, type) {
            this.__x = x || 0;
            this.__y = y || 0;
            this.__w = w || 0;
            this.__h = h || 0;
            this.type = type;
            return this;
        };
        return this._init.apply(this, arguments);
    };
    var Scanner = function(dir) {
        var CLASS = Scanner, thi$ = CLASS.prototype;
        if (CLASS.__defined__) {
            return this._init.apply(this, arguments);
        }
        CLASS.__defined__ = "Scanner";
        var VSCAN = CLASS.VSCAN = 0, HSCAN = CLASS.HSCAN = 1;
        thi$.scan = function(rects, enter, leave) {
            var es = _makeEdges(rects, this.dir), set = [], r;
            es.forEach(function(edge, i) {
                r = edge.rect;
                if (edge.flag == 0) {
                    if (enter) {
                        enter(set, edge, i, es);
                    }
                    set[set.length] = r;
                } else {
                    if (leave) {
                        leave(set, edge, i, es);
                    }
                    set = _remove(set, r);
                }
            });
        };
        var _remove = function(set, rect) {
            for (var i = 0, len = set.length; i < len; i++) {
                if (set[i] === rect) {
                    set.splice(i, 1);
                    break;
                }
            }
            return set;
        };
        thi$.overlaps = function(rects) {
            var ovs = {
                count: 0,
                maxv: 0
            }, e0 = {
                v: 0
            };
            this.scan(rects, function(set, edge) {
                ovs.maxv += (edge.v - e0.v) * set.length;
                e0 = edge;
                var r1 = edge.rect, id = r1.id;
                set.forEach(function(r0) {
                    if (r0.overlaps(r1) && !ovs[id]) {
                        ovs[id] = r1;
                        ovs.count++;
                    }
                });
            }, function(set, edge) {
                ovs.maxv += (edge.v - e0.v) * set.length;
                e0 = edge;
            });
            return ovs;
        };
        thi$.grouping = function(rects) {
            var group = [], g, max = Math.max;
            this.scan(rects, function(set, edge) {
                if (set.length == 0) {
                    g = group[group.length] = [];
                }
                g[g.length] = edge.rect;
            });
            return group;
        };
        thi$.gap = function(rects, gap) {
            var v = this.dir == VSCAN;
            this.scan(rects, null, function(set, edge, i, es) {
                if (v) {
                    edge.rect.b += gap;
                    _vgap(edge, es.slice(i + 1), gap);
                } else {
                    edge.rect.r += gap;
                    _hgap(edge, es.slice(i + 1), gap);
                }
            });
        };
        var _vgap = function(edge, es, gap) {
            var k = [ "v", edge.v ].join("");
            es.forEach(function(e) {
                if (e[k]) {
                    return;
                }
                e[k] = true;
                if (e.flag == 0) {
                    e.rect.y += gap;
                } else {
                    if (e.v0 < edge.v && e.v > edge.v) {
                        e.rect.b += gap;
                    }
                }
            });
        };
        var _hgap = function(edge, es, gap) {
            var k = [ "h", edge.v ].join("");
            es.forEach(function(e) {
                if (e[k]) {
                    return;
                }
                e[k] = true;
                if (e.flag == 0) {
                    e.rect.x += gap;
                } else {
                    if (e.v0 < edge.v && e.v > edge.v) {
                        e.rect.r += gap;
                    }
                }
            });
        };
        var _makeEdges = function(rects, dir) {
            var es = [], i, v = dir == VSCAN;
            rects.forEach(function(rect) {
                i = es.length;
                if (v) {
                    es[i + 0] = rect.top;
                    es[i + 1] = rect.bottom;
                } else {
                    es[i + 0] = rect.left;
                    es[i + 1] = rect.right;
                }
            });
            return es.sort(_compare);
        };
        var _compare = function(a, b) {
            return (a.v << 1 | a.flag ^ 1) - (b.v << 1 | b.flag ^ 1);
        };
        thi$._init = function(dir) {
            this.dir = dir;
        };
        return this._init.apply(this, arguments);
    };
    thi$.invalidateLayout = function() {
        this.info = null;
    };
    thi$._init = function(def) {
        def = def || {};
        def.classType = "js.awt.BrickLayout";
        def.gap = def.gap || 0;
        def.gw = def.gz || def.gw;
        def.gh = def.gz || def.gh;
        BREAK = def.compress || 1;
        BREAK = BREAK > 1 ? 1 : BREAK;
        BREAK = BREAK < .5 ? .5 : BREAK;
        def.compress = BREAK;
        $super(this, def);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.AbsoluteLayout);

$package("js.awt");

js.awt.CardLayout = function(def) {
    var CLASS = js.awt.CardLayout, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System;
    thi$.layoutContainer = function(container) {
        var comps = container.items(), bounds = container.getBounds(), MBP = bounds.MBP, comp, i, len;
        for (i = 0, len = comps.length; i < len; i++) {
            comp = container[comps[i]];
            comp.setBounds(MBP.paddingLeft, MBP.paddingTop, bounds.innerWidth, bounds.innerHeight, 3);
        }
        if (!this._hasDisp) {
            comp = container[comps[this.def.status.index]];
            if (comp) {
                this.show(container, this.def.status.index);
            }
            this._hasDisp = true;
        }
    };
    thi$.first = function(container) {
        var items = container.items0(), index = this.def.status.index = 0;
        this.show(container, index);
    };
    thi$.next = function(container) {
        var items = container.items0(), index;
        if (items.length > 0) {
            index = (this.def.status.index + 1) % items.length;
            this.def.status.index = index;
            this.show(container, index);
        }
    };
    thi$.previous = function(container) {
        var items = container.items0(), index;
        if (items.length > 0) {
            index = this.def.status.index - 1;
            index = index < 0 ? items.length - 1 : index;
            this.def.status.index = index;
            this.show(container, index);
        }
    };
    thi$.last = function(container) {
        var items = container.items0(), index = this.def.status.index = items.length - 1;
        this.show(container, index);
    };
    thi$.show = function(container, index) {
        if (!Class.isNumber(index)) {
            return null;
        }
        var items = container.items0(), compid = items[index], item, comp;
        this.def.status.index = index;
        items = container.items();
        (function(id, i) {
            if (id == compid) {
                item = items.splice(i, 1)[0];
                throw F.EOF;
            }
        }).$forEach(this, items);
        if (item) {
            items.push(item);
            for (var i = items.length - 1; i >= 0; i--) {
                compid = items[i];
                comp = container.getComponent(compid);
                comp.setZ(i - items.length);
                if (item == compid) {
                    comp.setVisible(true);
                } else {
                    comp.setVisible(false);
                }
            }
        }
        return item;
    };
    thi$.getShownIndex = function() {
        return this.def.status.index;
    };
    thi$.getShownComp = function(container) {
        var items = container.items0(), index = this.def.status.index, compid = items[index];
        return container.getComponent(compid);
    };
    thi$._init = function(def) {
        def = def || {};
        def.classType = "js.awt.CardLayout";
        def.mode = def.mode || 0;
        def.status = def.status || {};
        def.status.index = def.status.index || 0;
        $super(this);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.AbsoluteLayout);

$package("js.awt");

js.awt.FlowLayout = function(def) {
    var CLASS = js.awt.FlowLayout, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System;
    thi$.layoutContainer = function(container) {
        var setting = this.def;
        switch (setting.axis) {
          case 0:
            _axis0Layout.call(this, container);
            break;

          case 1:
            _axis1Layout.call(this, container);
            break;

          case 2:
            _axis2Layout.call(this, container);
            break;

          case 3:
            _axis3Layout.call(this, container);
            break;

          default:
            throw "Unsupport axis " + setting.axis;
            break;
        }
    }.$override(this.layoutContainer);
    var _axis0Layout = function(container) {
        var setting = this.def, bounds = container.getBounds(), gap = setting.hgap, comps = container.items0(), xbase = bounds.MBP.paddingLeft, left = 0, ybase = bounds.MBP.paddingTop, top = 0, rigid = container.isRigidWidth(), comp, i, len, d = _axis0Size.call(this, container, bounds, "getPreferredSize");
        left = xbase + (rigid ? (bounds.innerWidth - d.width) * this.getLayoutAlignmentX() : 0);
        for (i = 0, len = comps.length; i < len; i++) {
            comp = container[comps[i]];
            if (!comp.isVisible()) {
                continue;
            }
            rigid = comp.isRigidHeight();
            d = comp.getPreferredSize();
            top = ybase + (rigid ? (bounds.innerHeight - d.height) * this.getLayoutAlignmentY() : 0);
            comp.setBounds(left, top, d.width, rigid ? d.height : bounds.innerHeight, 3);
            left += d.width + gap;
        }
    };
    var _axis1Layout = function(container) {
        var setting = this.def, bounds = container.getBounds(), gap = setting.vgap, comps = container.items0(), xbase = bounds.MBP.paddingLeft, left = 0, ybase = bounds.MBP.paddingTop, top = 0, rigid = container.isRigidHeight(), comp, i, len, d = _axis1Size.call(this, container, bounds, "getPreferredSize");
        top = ybase + (rigid ? (bounds.innerHeight - d.height) * this.getLayoutAlignmentY() : 0);
        for (i = 0, len = comps.length; i < len; i++) {
            comp = container[comps[i]];
            if (!comp.isVisible()) {
                continue;
            }
            rigid = comp.isRigidWidth();
            d = comp.getPreferredSize();
            left = xbase + (rigid ? (bounds.innerWidth - d.width) * this.getLayoutAlignmentX() : 0);
            comp.setBounds(left, top, rigid ? d.width : bounds.innerWidth, d.height, 3);
            top += d.height + gap;
        }
    };
    var _axis2Layout = function(container) {};
    var _axis3Layout = function(container) {};
    thi$.getAverageWidth = function(container) {
        var d = _axis0Size.call(this, container, null, "getPreferredSize");
        return d.count > 0 ? d.width / d.count : 0;
    };
    thi$.getAverageHeight = function(container) {
        var d = _axis1Size.call(this, container, null, "getPreferredSize");
        return d.count > 0 ? d.height / d.count : 0;
    };
    var _axis0Size = function(container, bounds, fn) {
        var setting = this.def, gap = setting.hgap, comps = container.items0(), d, w = 0, h = 0, n = 0, comp, i, len;
        for (i = 0, len = comps.length; i < len; i++) {
            comp = container[comps[i]];
            if (!comp.isVisible()) {
                continue;
            }
            n++;
            d = comp[fn]();
            w += d.width + gap;
            h = Math.max(h, d.height);
        }
        w -= gap;
        return {
            width: w,
            height: h,
            count: n
        };
    };
    var _axis1Size = function(container, bounds, fn) {
        var setting = this.def, gap = setting.vgap, comps = container.items0(), d, w = 0, h = 0, n = 0, comp, i, len;
        for (i = 0, len = comps.length; i < len; i++) {
            comp = container[comps[i]];
            if (!comp.isVisible()) {
                continue;
            }
            n++;
            d = comp[fn]();
            h += d.height + gap;
            w = Math.max(w, d.width);
        }
        h -= gap;
        return {
            width: w,
            height: h,
            count: n
        };
    };
    var _axis2Size = function(container, bounds, fn) {
        return {
            width: 0,
            height: 0
        };
    };
    var _axis3Size = function(container, bounds, fn) {
        return {
            width: 0,
            height: 0
        };
    };
    thi$._init = function(def) {
        def = def || {};
        def.classType = "js.awt.FlowLayout";
        def.axis = def.axis || 0;
        def.hgap = def.hgap || 0;
        def.vgap = def.vgap || 0;
        def.align_x = def.align_x || 0;
        def.align_y = def.align_y || 0;
        $super(this, def);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.AbsoluteLayout);

$package("js.awt");

js.awt.GridLayout = function(def) {
    var CLASS = js.awt.GridLayout, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System;
    thi$.getCompAt = function(container, rowIndex, colIndex) {
        var items = container.items0(), comp, constraints;
        for (var i = 0, len = items.length; i < len; i++) {
            comp = container[items[i]];
            constraints = comp.def.constraints || {};
            if (constraints.rowIndex == rowIndex && constraints.colIndex == colIndex) {
                break;
            } else {
                comp = null;
            }
        }
        return comp;
    };
    thi$.layoutContainer = function(container) {
        var bounds = container.getBounds(), MBP = bounds.MBP, grid = this.grid, items = container.items0(), comp, constraints, rIdx, cIdx, cell, x, y, w, h, compz;
        grid.layout(MBP.paddingLeft, MBP.paddingTop, bounds.innerWidth, bounds.innerHeight);
        for (var i = 0, len = items.length; i < len; i++) {
            comp = container[items[i]];
            if (!comp.isVisible()) {
                continue;
            }
            constraints = comp.def.constraints;
            cell = grid.cell(constraints.rowIndex, constraints.colIndex);
            if (cell && cell.visible) {
                compz = comp.getPreferredSize();
                x = cell.x + cell.paddingLeft;
                y = cell.y + cell.paddingTop;
                if (comp.isRigidWidth()) {
                    x += (cell.innerWidth - compz.width) * comp.getAlignmentX();
                    w = compz.width;
                } else {
                    w = cell.innerWidth;
                }
                if (comp.isRigidHeight()) {
                    y += (cell.innerHeight - compz.height) * comp.getAlignmentY();
                    h = compz.height;
                } else {
                    h = cell.innerHeight;
                }
                comp.setBounds(x, y, w, h, 3);
            } else {
                comp.display(false);
            }
        }
    };
    thi$._init = function(def) {
        def = def || {};
        def.classType = "js.awt.GridLayout";
        $super(this);
        def.gridClass = def.gridClass || "js.awt.Grid";
        this.grid = new (Class.forName(def.gridClass))(def);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.AbsoluteLayout);

$package("js.awt");

js.awt.SuffuseLayout = function(def) {
    var CLASS = js.awt.SuffuseLayout, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System;
    thi$.layoutContainer = function(container) {
        var comps = this.getLayoutComponents(container), comp, bounds = container.getBounds(), MBP = bounds.MBP, i, len;
        for (i = 0, len = comps.length; i < len; i++) {
            comp = comps[i];
            comp.setBounds(MBP.paddingLeft, MBP.paddingTop, bounds.innerWidth, bounds.innerHeight, 3);
        }
    }.$override(this.layoutContainer);
    thi$._init = function(def) {
        def = def || {};
        def.classType = "js.awt.SuffuseLayout";
        $super(this);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.AbsoluteLayout);

$package("js.awt");

$import("js.util.EventTarget");

$import("js.awt.State");

$import("js.awt.Shadow");

$import("js.awt.Cover");

$import("js.awt.Movable");

$import("js.awt.Resizable");

$import("js.awt.Outline");

$import("js.awt.ToolTip");

js.awt.Element = function(def, Runtime) {
    var CLASS = js.awt.Element, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ;
    thi$.getX = function() {
        var r = this.def.x;
        return Class.isNumber(r) ? r : 0;
    };
    thi$.setX = function(x, fire) {
        return this.setPosition(x, null, fire);
    };
    thi$.getY = function() {
        var r = this.def.y;
        return Class.isNumber(r) ? r : 0;
    };
    thi$.setY = function(y, fire) {
        return this.setPosition(null, y, fire);
    };
    thi$.getPosition = function() {
        return {
            x: this.getX(),
            y: this.getY()
        };
    };
    thi$.setPosition = function(x, y, fire) {
        var M = this.def, bounds, changed = false;
        if (this.view) {
            bounds = DOM.setPosition(this.view, x, y);
        } else {
            bounds = {
                x: x,
                y: y
            };
        }
        changed = _updateCoords.call(this, M, bounds, fire);
        if (changed) {
            this.adjustLayers("coord", bounds);
        }
        return changed;
    };
    var _updateCoords = function(M, bounds, fire) {
        var U = this._local, changed = false;
        if (M.x !== bounds.x || M.y !== bounds.y) {
            M.x = bounds.x;
            M.y = bounds.y;
            changed = true;
        }
        if (fire & 4) {
            U.userX = M.x;
            U.userY = M.y;
        }
        return changed;
    };
    thi$.getZ = function() {
        var r = this.def.z;
        return Class.isNumber(r) ? r : 0;
    };
    thi$.setZ = function(z, fire) {
        var M = this.def, bounds, changed = false;
        if (this.view) {
            bounds = DOM.setZ(this.view, z);
        } else {
            bounds = {
                MBP: {
                    zIndex: z
                }
            };
        }
        changed = _updateZ.call(this, M, bounds, fire);
        if (changed) {
            this.adjustLayers("zorder", bounds);
        }
        return changed;
    };
    var _updateZ = function(M, bounds, fire) {
        var U = this._local, changed = false;
        if (M.z !== bounds.MBP.zIndex) {
            M.z = bounds.MBP.zIndex;
            changed = true;
        }
        if (fire & 4) {
            U.userZ = M.z;
        }
        return changed;
    };
    thi$.getWidth = function() {
        var r = this.def.width;
        return Class.isNumber(r) ? r : 0;
    };
    thi$.setWidth = function(w, fire) {
        return this.setSize(w, null, fire);
    };
    thi$.getHeight = function() {
        var r = this.def.height;
        return Class.isNumber(r) ? r : 0;
    };
    thi$.setHeight = function(h, fire) {
        return this.setSize(null, h, fire);
    };
    thi$.getSize = function() {
        return {
            width: this.getWidth(),
            height: this.getHeight()
        };
    };
    thi$.setSize = function(w, h, fire) {
        var M = this.def, bounds, changed = false;
        if (this.view) {
            bounds = DOM.setSize(this.view, w, h);
        } else {
            bounds = {
                width: w,
                height: h
            };
        }
        changed = _updateSize.call(this, M, bounds, fire);
        if (changed) {
            this.adjustLayers("sized", bounds);
        }
        if (fire & 1) {
            this.doLayout(true, bounds, fire);
        }
        return changed;
    };
    var _updateSize = function(M, bounds, fire) {
        var U = this._local, changed = false;
        if (M.width !== bounds.width || M.height !== bounds.height) {
            M.width = bounds.width;
            M.height = bounds.height;
            changed = true;
        }
        if (fire & 4) {
            U.userW = M.width;
            U.userH = M.height;
        }
        return changed;
    };
    thi$.absXY = function() {
        var bounds = this.getBounds();
        return {
            x: bounds.absX,
            y: bounds.absY
        };
    };
    thi$.getBounds = function(nocache) {
        var U = this._local, bounds;
        if (this.view) {
            bounds = DOM.getBounds(this.view, nocache);
        } else {
            bounds = {
                MBP: {
                    zIndex: this.getZ()
                },
                absX: 0,
                absY: 0,
                x: this.getX(),
                y: this.getY(),
                width: this.getWidth(),
                height: this.getHeight()
            };
            bounds.styleW = bounds.width;
            bounds.styleH = bounds.height;
        }
        bounds.userX = U.userX;
        bounds.userY = U.userY;
        bounds.userZ = U.userZ;
        bounds.userW = U.userW;
        bounds.userH = U.userH;
        return bounds;
    };
    thi$.setBounds = function(x, y, w, h, fire) {
        var M = this.def, bounds, coord, sized;
        if (this.view) {
            bounds = DOM.setBounds(this.view, x, y, w, h);
        } else {
            bounds = {
                x: x,
                y: y,
                width: w,
                height: h
            };
        }
        coord = _updateCoords.call(this, M, bounds, fire);
        sized = _updateSize.call(this, M, bounds, fire);
        if (coord || sized) {
            this.adjustLayers("geom", bounds);
        }
        if (fire & 1) {
            this.doLayout(true, bounds, fire);
        }
        return coord || sized;
    };
    thi$.getPreferredSize = function() {
        var size = this.def.prefSize, bounds = this.getBounds();
        if (!size) {
            return {
                width: bounds.width,
                height: bounds.height
            };
        } else {
            return checkSize0(size, bounds.width, bounds.height);
        }
    };
    thi$.setPreferredSize = function(w, h) {
        var M = this.def, size = M.prefSize = M.prefSize || {};
        return checkSize1(size, w, h);
    };
    thi$.getMinimumSize = function() {
        var size = this.def.miniSize, bounds = this.getBounds();
        if (!size) {
            return {
                width: bounds.MBP.BPW + 1,
                height: bounds.MBP.BPH + 1
            };
        } else {
            return checkSize0(size, bounds.MBP.BPW + 1, bounds.MBP.BPH + 1);
        }
    };
    thi$.setMinimumSize = function(w, h) {
        var M = this.def, size = M.miniSize = M.miniSize || {};
        return checkSize1(size, w, h);
    };
    thi$.getMaximumSize = function(nocache) {
        var size = this.def.maxiSize, bounds = this.getBounds();
        if (!size) {
            return {
                width: 65535,
                height: 65535
            };
        } else {
            return checkSize0(size, 65535, 65535);
        }
    };
    thi$.setMaximumSize = function(w, h) {
        var M = this.def, size = M.maxiSize = M.maxiSize || {};
        return checkSize1(size, w, h);
    };
    var checkSize0 = function(size, w, h) {
        if (!Class.isNumber(size.width)) {
            size.width = w;
        }
        if (!Class.isNumber(size.height)) {
            size.height = h;
        }
        return size;
    };
    var checkSize1 = function(size, w, h) {
        if (Class.isNumber(w)) {
            size.width = w;
        }
        if (Class.isNumber(h)) {
            size.height = h;
        }
        return size;
    };
    thi$.getStyle = function(sp) {
        if (!this.view) {
            return null;
        }
        return DOM.currentStyles(this.view)[DOM.camelName(sp)];
    };
    thi$.getStyles = function(sps) {
        if (!this.view) {
            return {};
        }
        var styles = DOM.currentStyles(this.view), i, len, sp, ret = {};
        for (i = 0, len = sps.length; i < len; i++) {
            sp = DOM.camelName(sps[i]);
            ret[sp] = styles[sp];
        }
        return ret;
    };
    thi$.applyStyles = function(styles) {
        var M = this.def, coord, sized, fire = 15, bounds = DOM.applyStyles(this.view, styles);
        if (this.isDOMElement() && this.view && !DOM.getAttribute(this.view, "noncomp")) {
            coord = _updateCoords.call(this, M, bounds, fire);
            sized = _updateSize.call(this, M, bounds, fire);
            if (coord || sized) {
                this.adjustLayers("geom", bounds);
                if (sized && fire & 1) {
                    this.doLayout(true, bounds);
                }
            }
        }
    };
    thi$.defAttr = function(key, val) {
        var M = this.getDef();
        if (Class.isValid(val)) {
            M[key] = val;
        }
        return M[key];
    };
    thi$.getDef = function() {
        return this.def;
    };
    thi$.getID = function(ele) {
        var id;
        switch (Class.typeOf(ele)) {
          case "string":
            id = ele;
            break;

          case "object":
            id = ele.id;
            break;

          default:
            id = this.id;
        }
        return id;
    };
    thi$.getOBJ = function(ele) {
        var obj;
        switch (Class.typeOf(ele)) {
          case "string":
            obj = this[ele];
            break;

          case "object":
            obj = ele;
            break;

          default:
            obj = this;
        }
        return obj;
    };
    thi$.appendTo = function(parent) {
        if (this.view) {
            DOM.appendTo(this.view, parent);
        } else {
            if (parent.appendChild) {
                parent.appendChild(this);
            }
        }
        this.adjustLayers("append");
    };
    thi$.removeFrom = function(parent) {
        if (this.view) {
            DOM.removeFrom(this.view, parent);
        } else {
            if (parent.removeChild) {
                parent.removeChild(this);
            }
        }
        this.adjustLayers("remove");
    };
    thi$.insertBefore = function(ref) {
        if (this.view) {
            DOM.insertBefore(this.view, ref);
        } else {
            if (ref.getContainer()) {
                ref.getContainer().insertChildBefore(this, ref);
            }
        }
        this.adjustLayers("append");
    };
    thi$.insertAfter = function(ref) {
        if (this.view) {
            DOM.insertAfter(this.view, ref);
        } else {
            if (ref.getContainer()) {
                ref.getContainer().insertChildAfter(this, ref);
            }
        }
        this.adjustLayers("append");
    };
    thi$.contains = function(ele, containSelf) {
        var id = this.getID(ele), obj = this.getOBJ(ele), o = this[id];
        return o === obj || (containSelf ? this === obj : false);
    };
    thi$.inside = function(x, y) {
        return DOM.inside(x, y, this.getBounds());
    };
    thi$.relative = function(point) {
        return DOM.relative(point.x, point.y, this.getBounds());
    };
    thi$.isRigidWidth = function() {
        var v = this.def.rigid_w;
        return v === false ? false : true;
    };
    thi$.isRigidHeight = function() {
        var v = this.def.rigid_h;
        return v === false ? false : true;
    };
    thi$.getAlignmentX = function() {
        var v = this.def.align_x;
        return Class.isNumber(v) ? v : 0;
    };
    thi$.getAlignmentY = function() {
        var v = this.def.align_y;
        return Class.isNumber(v) ? v : 0;
    };
    thi$.isAlwaysOnTop = function() {
        return this.def.alwaysOnTop || false;
    };
    thi$.setAlwaysOnTop = function(b) {
        b = b || false;
        var ZM = this.getContainer();
        if (ZM) {
            ZM.setCompAlwaysOnTop(this, b);
        }
    };
    thi$.bringForward = function() {
        var ZM = this.getContainer();
        if (ZM) {
            ZM.bringCompForward(this);
        }
    };
    thi$.bringToFront = function() {
        var ZM = this.getContainer();
        if (ZM) {
            ZM.bringCompToFront(this);
        }
    };
    thi$.sendBackward = function() {
        var ZM = this.getContainer();
        if (ZM) {
            ZM.sendCompBackward(this);
        }
    };
    thi$.sendToBack = function() {
        var ZM = this.getContainer();
        if (ZM) {
            ZM.sendCompToBack(this);
        }
    };
    thi$.setPeerComponent = function(peer) {
        this.peer = peer;
    };
    thi$.getPeerComponent = function() {
        return this.peer;
    };
    thi$.notifyPeer = function(msgId, event, sync) {
        var peer = this.getPeerComponent();
        if (peer) {
            _notify.call(this, peer, msgId, event, sync);
        }
    };
    thi$.setContainer = function(container) {
        this.container = container;
        if (!this.view) {
            this.parentNode = container.view || container;
        }
    };
    thi$.getContainer = function() {
        var container = this.container;
        if (!container && this.view && this.view.parentNode) {
            container = DOM.getComponent(this.view.parentNode);
        }
        return container;
    };
    thi$.notifyContainer = function(msgId, event, sync) {
        var comp = this.getContainer();
        if (comp) {
            _notify.call(this, comp, msgId, event, sync);
        }
    };
    var _notify = function(comp, msgId, event, sync) {
        sync = sync === undefined ? this.isSynchronizedNotify() : sync || false;
        if (sync) {
            MQ.send(msgId, event, [ comp.uuid() ]);
        } else {
            MQ.post(msgId, event, [ comp.uuid() ]);
        }
    };
    thi$.setSynchronizedNotify = function(b) {
        this.def.sync = b || false;
    };
    thi$.isSynchronizedNotify = function() {
        return this.def.sync || false;
    };
    var DISPLAYS = [ "none", "block", "inline" ];
    thi$.display = function(show) {
        var disp;
        show = Class.isBoolean(show) ? show ? 1 : 0 : Class.isNumber(show) ? show : 0;
        this.setVisible(show !== 0);
        if (this.view) {
            disp = DISPLAYS[show];
            this.view.style.display = disp;
            this.adjustLayers("display", null, disp);
        }
    };
    thi$.getAttribute = function(attr) {
        return DOM.getAttribute(this.view, attr);
    };
    thi$.setAttribute = function(attr, value) {
        DOM.setAttribute(this.view, attr, value);
    };
    thi$.removeAttribute = function(attr) {
        DOM.removeAttribute(this.view, attr);
    };
    thi$.isDOMElement = function() {
        return DOM.isDOMElement(this.view);
    };
    thi$.doLayout = function(force, bounds) {
        var U = this._local, ret = true;
        if (!this.needLayout(force)) {
            ret = false;
        } else {
            ret = U.didLayout = true;
        }
        return ret;
    };
    thi$.needLayout = function(force) {
        var U = this._local, ret = false;
        if (this.isDOMElement()) {
            ret = !U.didLayout || force;
        }
        return ret;
    };
    thi$.forceLayout = function() {
        this._local.didLayout = false;
    };
    var _elementChanged = function(cmd) {
        var container = this.getContainer() || DOM.getComponent(this.view.parentNode);
        if (container && container.fireEvent) {
            container.fireEvent(new Event("childrenchanged", {
                cmd: cmd
            }, this));
        }
    };
    thi$.adjustLayers = function(cmd, bounds, show) {
        var doo = false;
        switch (cmd) {
          case "coord":
          case "sized":
          case "geom":
            bounds = bounds || this.getBounds();
            this.adjustShadow(bounds);
            this.adjustCover(bounds);
            this.adjustOutline(bounds);
            doo = true;
            break;

          case "zorder":
            var z = this.getZ();
            this.setShadowZIndex(z);
            this.setCoverZIndex(z);
            this.setOutlineZIndex(z);
            break;

          case "display":
            if (show != "none") {
                bounds = bounds || this.getBounds();
                this.adjustShadow(bounds);
                this.adjustCover(bounds);
                this.adjustOutline(bounds);
            }
            this.setShadowDisplay(show);
            this.setCoverDisplay(show);
            this.setOutlineDisplay(show);
            break;

          case "remove":
            this.removeShadow();
            this.removeCover();
            this.removeOutline();
            this.removeTipLayer();
            doo = true;
            break;

          case "append":
            doo = true;
            break;
        }
        if (doo) {
            _elementChanged.call(this, cmd);
        }
    };
    thi$.spotIndex = function(ele, xy, dragObj) {
        if (DOM.isMouseCapture(ele) || ele.spot) {
            return parseInt(ele.spot);
        }
        return this.isMovable() && !DOM.isInScrollbar(xy.x, xy.y, ele) ? 8 : -1;
    };
    thi$.elementFromPoint = function(x, y, nothese) {
        return !nothese || !nothese.$contains(this) ? this.inside(x, y) ? this : null : null;
    };
    thi$.elementsFromPoint = function(x, y, nothese, result) {
        result = result || [];
        var ele = this.elementFromPoint(x, y, nothese);
        if (ele) {
            result.push(ele);
        }
        return result;
    };
    thi$.isDropable = function(x, y, data) {
        return this.def.dropable || false;
    };
    thi$.getDropableTarget = function(x, y, data) {
        var target;
        if (this.isDropable(x, y, data)) {
            target = this;
        } else {
            var container = this.getContainer();
            if (container) {
                target = container.getDropableTarget(x, y, data);
            }
        }
        return target;
    };
    thi$.getCursor = function() {
        return this.view ? this.view.style.cursor : null;
    };
    thi$.setCursor = function(cursor) {
        DOM.setCursor(this.view, cursor);
    };
    thi$.getOffsetParent = function() {
        return DOM.getOffsetParent(this.view);
    };
    thi$.getMovingConstraints = function() {
        var mover = this.def.mover;
        if (!mover) {
            mover = this.def.mover = {
                bt: 1,
                br: 0,
                bb: 0,
                bl: 1,
                grid: 1,
                freedom: 3,
                longpress: 10
            };
        } else {
            mover.bt = Class.isNumber(mover.bt) ? mover.bt : 1;
            mover.br = Class.isNumber(mover.br) ? mover.br : 0;
            mover.bb = Class.isNumber(mover.bb) ? mover.bb : 0;
            mover.bl = Class.isNumber(mover.bl) ? mover.bl : 1;
            mover.grid = Class.isNumber(mover.grid) ? mover.grid : 1;
            mover.freedom = Class.isNumber(mover.freedom) ? mover.freedom : 3;
            mover.longpress = Class.isNumber(mover.longpress) ? mover.longpress : 10;
        }
        return mover;
    };
    var isScroll = {
        auto: true,
        visible: true,
        scroll: true
    };
    thi$.getMovingContext = function() {
        var thip = DOM.getComponent(this.getOffsetParent(), true, this.Runtime());
        return {
            container: thip,
            pounds: thip.getBounds(),
            outline: this.isOutlineShown(),
            range: [ -65535, -65535, 65535, 65535 ],
            syncchange: true
        };
    };
    thi$.checkCaptures = function(e) {
        var b;
        if (this.isMovable()) {
            b = this.showMoveCapture(e);
        }
        if (!b && this.isResizable()) {
            b = this.showResizeCapture(e);
        }
        return b;
    };
    var _onmousemove = function(e) {
        var b = this.checkCaptures(e);
        if (b) {
            e.cancelBubble();
        }
    };
    thi$.destroy = function() {
        if (this.destroied) {
            return;
        }
        this.removeOutline();
        this.removeCover();
        this.removeShadow();
        this.removeTipLayer();
        this.peer = null;
        this.container = null;
        $super(this);
    }.$override(this.destroy);
    thi$.classType = function() {
        return this.def.classType;
    };
    thi$._init = function(def, Runtime, view) {
        if (!Class.isObject(def)) {
            return;
        }
        def.classType = def.classType || "js.awt.Element";
        var id = this.uuid(def.uuid);
        this.id = def.id || (view ? view.id || id : id);
        $super(this);
        var M = this.def, U = this._local;
        this.__buf__ = new js.lang.StringBuffer();
        CLASS.count++;
        if (!this.isStateless()) {
            if (!Class.isNumber(M.state)) {
                M.state = 0;
            }
        }
        if (M.movable) {
            this.setMovable(true);
        }
        if (M.resizable) {
            this.setResizable(true, M.resizer);
        }
        this.attachEvent(Event.W3C_EVT_MOUSE_MOVE, 4, this, _onmousemove);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.util.EventTarget).$implements(js.awt.State, js.awt.Shadow, js.awt.Cover, js.awt.Movable, js.awt.MoveObject, js.awt.Resizable, js.awt.SizeObject, js.awt.Outline, js.awt.ToolTip);

js.awt.Element.count = 0;

$package("js.awt");

$import("js.util.Observer");

$import("js.awt.Element");

$import("js.awt.Editable");

$import("js.awt.PopupLayer");

js.awt.Component = function(def, Runtime, view) {
    var CLASS = js.awt.Component, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ;
    thi$.setPosition = function(x, y, fire) {
        var changed = $super(this);
        if (fire & 1) {
            this.onMoved(fire);
        }
        return changed;
    }.$override(this.setPosition);
    thi$.setZ = function(z, fire) {
        if ($super(this) && fire & 1) {
            this.onZOrderChanged(fire);
        }
    }.$override(this.setZ);
    thi$.setSize = function(w, h, fire) {
        var changed = $super(this);
        if (changed && fire & 1) {
            this.onResized(fire);
        }
        return changed;
    }.$override(this.setSize);
    thi$.setBounds = function(x, y, w, h, fire) {
        var changed = $super(this);
        if (changed && fire & 1) {
            this.onGeomChanged(fire);
        }
        return changed;
    }.$override(this.setBounds);
    thi$.hasScrollbar = function() {
        return DOM.hasScrollbar(this.view);
    };
    thi$.activate = function() {
        var container = this.getContainer();
        if (container && container.activateComponent) {
            container.activateComponent(this);
        }
    };
    thi$.openDialog = function(className, rect, dialogObj, handler) {
        var dialog = J$VM.Factory.createComponent(className, rect, this.Runtime());
        dialog.setPeerComponent(this);
        dialog.setDialogObject(dialogObj, handler);
        if (!dialogObj.def["__contextid__"]) {
            dialogObj.setContextID(this.uuid());
        }
        dialog.show();
        return dialog;
    };
    thi$.openConfirm = function(className, rect, def, handler) {
        def = def || {};
        def.className = def.className || "jmsgbox msgbox $jmsgbox $msgbox";
        def.stateless = true;
        def.model = def.model || {};
        def.model.msgType = def.model.msgType || "confirm";
        return this.openDialog(className, rect, new js.awt.MessageBox(def, this.Runtime()), handler);
    };
    thi$.contains = function(child, containSelf) {
        return DOM.contains(this.view, child, containSelf);
    }.$override(this.contains);
    thi$.setController = function(ctrl) {
        this.controller = ctrl;
        this.controller.setContainer(this);
    };
    thi$.delController = function() {
        var ctrl = this.controller;
        if (ctrl) {
            ctrl.removeFrom(this.view);
            delete ctrl.container;
            delete this.controller;
        }
        return ctrl;
    };
    thi$.adjustController = function(bounds) {
        var ctrl = this.controller, counds, x, y, w, h;
        if (!ctrl) {
            return;
        }
        ctrl.appendTo(this.view);
        bounds = bounds || this.getBounds();
        counds = ctrl.getBounds();
        w = ctrl.isRigidWidth() ? counds.width : bounds.innerWidth;
        h = ctrl.isRigidHeight() ? counds.height : bounds.innerHeight;
        x = bounds.MBP.paddingLeft + (bounds.innerWidth - w) * ctrl.getAlignmentX();
        y = bounds.MBP.paddingTop + (bounds.innerHeight - h) * ctrl.getAlignmentY();
        ctrl.setBounds(x, y, w, h, 7);
    };
    var _onLayoutDirty = function(cmd) {
        var container = this.getContainer();
        if (container && Class.isFunction(container.onLayoutDirty)) {
            container.onLayoutDirty(this, cmd);
        }
    };
    thi$.onMoved = function(fire) {
        _onLayoutDirty.call(this, "move");
    };
    thi$.onResized = function(fire) {
        _onLayoutDirty.call(this, "resize");
    };
    thi$.onZOrderChanged = function(fire) {};
    thi$.onGeomChanged = function(fire) {
        _onLayoutDirty.call(this, "geomchanged");
    };
    thi$.appendStyleClass = function(className) {
        if (Class.isString(className)) {
            var names = this._local.styles;
            if (!names) {
                names = [ this.className ];
            }
            names = names.concat(className.split(" "));
            this._local.styles = names;
            this.view.className = names.join(" ");
        }
    };
    thi$.removeStyleClass = function(className) {
        var names = this._local.styles, e;
        if (Class.isArray(names)) {
            for (var i = 0, len = names.length; i < len; i++) {
                e = names[i];
                if (e == className) {
                    names.splice(i, 1);
                    break;
                }
            }
            this.view.className = names.join(" ");
        }
    };
    thi$.hasStyleClass = function(className) {
        var names = this._local.styles, e, ret = false;
        if (Class.isArray(names)) {
            for (var i = 0, len = names.length; i < len; i++) {
                e = names[i];
                if (e == className) {
                    ret = true;
                    break;
                }
            }
        }
        return ret;
    };
    thi$.clearStyleClass = function(apply) {
        var names = this._local.styles = [ this.className ];
        if (apply === true) {
            this.view.className = names.join(" ");
        }
    };
    thi$.isStyleByState = function() {
        return !this.isStateless() && this.def.styleByState !== false;
    };
    thi$.onStateChanged = function(e) {
        var M = this.def, clazz;
        if (this.isStyleByState()) {
            clazz = DOM.stateClassName(M.className || this.className, this.getState());
            DOM.setClassName(this.view, clazz, M.classPrefix);
        }
        if (this.isDOMElement()) {
            this.showDisableCover(!this.isEnabled(), M.disableClassName);
        }
    };
    thi$.cloneView = function() {
        var view = DOM.cloneElement(this.view, true);
        DOM.removeAttribute(view, "id");
        DOM.removeAttribute(view, "title");
        return view;
    };
    thi$.MBP = function() {
        return DOM.BMP(this.view);
    };
    thi$.invalidateBounds = function() {
        J$VM.System.out.println('The "invalidateBounds" has been discarded.');
    };
    thi$.repaint = function() {
        var ret = false;
        if (this.isDOMElement()) {
            ret = _repaint.call(this);
        }
        return ret;
    };
    thi$.doLayout = function(force, bounds) {
        var ret = false, container;
        bounds = bounds || this.getBounds();
        if (!bounds.valid) {
            if (!this.repaint()) {
                return false;
            }
        }
        if ($super(this)) {
            this.adjustController(bounds);
            ret = true;
        }
        return ret;
    }.$override(this.doLayout);
    thi$.onresize = function(e) {
        var U = this._local, M = this.def, bounds = this.getBounds();
        if (U.userW !== bounds.width || U.userH !== bounds.height) {
            this.doLayout(true, bounds);
            U.userW = M.width = bounds.width;
            U.userH = M.height = bounds.height;
        }
    };
    var _repaint = function() {
        var M = this.def, U = this._local, bounds;
        bounds = this._geometric ? this._geometric() : this.getBounds();
        if (!bounds.valid) {
            return false;
        }
        U.userX = bounds.x;
        U.userY = bounds.y;
        U.userZ = bounds.MBP.zIndex;
        U.userW = bounds.width;
        U.userH = bounds.height;
        if (M.isfloating) {
            this.setFloating(true);
        }
        if (!this.isEnabled()) {
            this.showDisableCover(true, M.disableClassName);
        }
        if (M.outline) {
            this.showOutline(true, M.outlineClassName);
        }
        if (M.shadow) {
            this.showShadow(true, M.shadowClassName);
        }
        if (M.useUserDefinedTip) {
            this.setUserDefinedTip(true, M.tipDef);
        }
        this.setTipText(M.tip);
        return true;
    };
    var _geometric = function(isNative) {
        var M = this.def, U = this._local, ele = this.view, z, bounds;
        bounds = DOM.getBounds(ele);
        z = parseInt(DOM.currentStyles(ele).zIndex);
        bounds.MBP.zIndex = isNaN(z) ? 0 : z;
        if (bounds.valid) {
            if (!isNative) {
                M.x = !Class.isNumber(M.x) ? bounds.x : M.x;
                M.y = !Class.isNumber(M.y) ? bounds.y : M.y;
                M.z = !Class.isNumber(M.z) ? bounds.MBP.zIndex : M.z;
                M.width = !Class.isNumber(M.width) ? bounds.styleW : M.width;
                M.height = !Class.isNumber(M.height) ? bounds.styleH : M.height;
            } else {
                M.x = bounds.x;
                M.y = bounds.y;
                M.z = bounds.MBP.zIndex;
                M.width = bounds.width;
                M.height = bounds.height;
            }
            bounds = DOM.setBounds(ele, M.x, M.y, M.width, M.height, bounds);
            DOM.setZ(ele, M.z, bounds);
            U.userX = bounds.userX = M.x = bounds.x;
            U.userY = bounds.userY = M.y = bounds.y;
            U.userZ = bounds.userZ = M.z = bounds.MBP.zIndex;
            U.userW = bounds.userW = M.width = bounds.width;
            U.userH = bounds.userH = M.height = bounds.height;
        }
        return bounds;
    };
    thi$.onelementappend = function(e) {
        if (e && e.srcElement !== this.view) {
            return;
        }
        if (this.repaint()) {
            this.doLayout(true);
        }
    };
    thi$.onmousedown = function(e) {};
    thi$.onmouseup = function(e) {};
    thi$.onmouseover = function(e) {};
    thi$.onmouseout = function(e) {};
    thi$.destroy = function() {
        if (this.destroied) {
            return;
        }
        var obj = this.controller, view;
        if (obj) {
            delete this.controller;
            obj.destroy();
        }
        obj = this.getContainer();
        if (obj && obj instanceof js.awt.Container) {
            obj.removeComponent(this);
        }
        this.container = null;
        this.peer = null;
        view = this.view;
        this.view = null;
        if (view.refCnt == 1) {
            DOM.remove(view, true);
        } else {
            view.refCnt -= 1;
        }
        $super(this);
    }.$override(this.destroy);
    thi$.setClassName = function(className, force) {
        var M = this.def, view = this.view, clazz;
        if (!Class.isString(className) || className.length == 0 || !force && this.viewSettled && !view.cloned) {
            return;
        }
        view.clazz = M.className = className;
        this.className = DOM.extractDOMClassName(className);
        if (this.isStyleByState()) {
            clazz = DOM.stateClassName(M.className, this.getState());
        } else {
            clazz = this.className;
        }
        DOM.setClassName(view, clazz, M.classPrefix);
        if (view.bounds) {
            view.bounds = null;
        }
        if (view.MBP) {
            view.MBP = null;
        }
    };
    thi$._init = function(def, Runtime, view) {
        if (!Class.isObject(def)) {
            return;
        }
        def.classType = def.classType || "js.awt.Component";
        $super(this);
        var preView = this.viewSettled = Class.isHtmlElement(view), clazz;
        if (!preView || view && view.cloned) {
            this.view = view = view || DOM.createElement(def.viewType || "DIV");
            view.id = this.id;
            view.refCnt = 1;
            if (def.css) {
                view.style.cssText = view.style.cssText + def.css;
            }
            def.className = def.className || "jsvm__element";
        } else {
            if (!Class.isNumber(view.refCnt)) {
                view.refCnt = 1;
            }
            view.refCnt += 1;
            this.view = view;
            def.className = view.clazz || view.className;
        }
        this.setClassName(def.className, false);
        if (!view.uuid || view.cloned) {
            view.uuid = this.uuid();
        }
        if (this.isDOMElement()) {
            if (view !== document.body) {
                _geometric.call(this, true);
            }
        } else {
            this._geometric = function() {
                var bounds = _geometric.call(this);
                if (bounds.valid) {
                    this._geometric = null;
                }
                return bounds;
            };
        }
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Element).$implements(js.util.Observer, js.awt.Editable, js.awt.PopupLayer);

$package("js.awt");

js.awt.Containable = function() {
    var CLASS = js.awt.Containable, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ, List = js.util.LinkedList;
    var _check = function() {
        var M = this.def, U = this._local;
        M.items = M.items || [];
        if (!M.items.remove0) {
            List.$decorate(M.items);
        }
        U.items = U.items || [];
        if (!U.items.remove0) {
            List.$decorate(U.items);
        }
    };
    thi$.appendChild = function(ele) {
        _check.call(this);
        var M = this.def, U = this._local, id = ele.id, index = M.items.length, index0 = U.items.length;
        return this._insert(M, U, index, index0, id, ele, null);
    };
    thi$.insertChildBefore = function(ele, ref) {
        _check.call(this);
        var M = this.def, U = this._local, id = ele.id, rid = this.getID(ref), index = M.items.indexOf(rid), index0 = U.items.indexOf(rid);
        ref = this[rid];
        index = index > 0 ? index : 0;
        index0 = index0 > 0 ? index0 : 0;
        return this._insert(M, U, index, index0, id, ele, ref);
    };
    thi$.insertChildAfter = function(ele, ref) {
        _check.call(this);
        var M = this.def, U = this._local, id = ele.id, rid = this.getID(ref), index = M.items.indexOf(rid), index0 = U.items.indexOf(rid);
        ref = this[M.items[index + 1]];
        if (ref && ref.isAlwaysOnTop() && index === M.items.length - 1) {
            throw "Reference child [" + rid + "] is always on top";
        }
        index = index > 0 ? index + 1 : M.items.length;
        index0 = index0 > 0 ? index0 + 1 : U.items.length;
        return this._insert(M, U, index, index0, id, ele, ref);
    };
    thi$._insert = function(M, U, index, index0, id, ele, ref) {
        M.items.add(index, id);
        M[id] = ele.def;
        U.items.add(index0, id);
        this[id] = ele;
        ele.setContainer(this);
        var eleDef = ele.def;
        if (!eleDef["__contextid__"]) {
            ele.setContextID(this.uuid());
        }
        if (Class.isHtmlElement(ele.view)) {
            if (ref && ref.view) {
                ele.insertBefore(ref.view, this.view);
            } else {
                ele.appendTo(this.view);
            }
        }
        return ele;
    };
    thi$.removeChild = function(ele) {
        _check.call(this);
        var M = this.def, U = this._local, id = this.getID(ele), view;
        ele = this[id];
        if (ele === undefined) {
            return undefined;
        }
        M.items.remove(id);
        delete M[id];
        U.items.remove(id);
        delete this[id];
        delete ele.container;
        view = ele.view;
        if (Class.isHtmlElement(view) && view.parentNode) {
            ele.removeFrom(this.view);
        }
        return ele;
    };
    thi$.getElementById = function(id) {
        return this[id];
    };
    thi$.replaceElementId = function(id, newid) {
        _check.call(this);
        var ele = this[id];
        delete this[id];
        this[newid] = ele;
        if (ele) {
            if (ele.id) {
                ele.id = newid;
            }
            if (ele.view) {
                ele.view.id = newid;
            }
        }
        this.def.items.replace(id, newid);
        this._local.items.replace(id, newid);
    };
    thi$.getElements = function(filter) {
        filter = filter || function(ele) {
            return true;
        };
        var ret = [], items = this.items0(), ele;
        for (var i = 0, len = items.length; i < len; i++) {
            ele = this[items[i]];
            if (filter(ele)) {
                ret.push(ele);
            }
        }
        return ret;
    };
    thi$.getElementsCount = function() {
        return this.def.items.length;
    };
    thi$.items = function() {
        return this.def.items || [];
    };
    thi$.items0 = function() {
        return this._local.items || [];
    };
    thi$.indexOf = function(ele) {
        var id = this.getID(ele);
        return this.items().indexOf(id);
    };
    thi$.removeAll = function(gc) {
        _check.call(this);
        var M = this.def, U = this._local, items = this.items0(), id, ele;
        while (items.length > 0) {
            id = items[0];
            ele = this[id];
            if (ele) {
                this.removeChild(ele);
                if (gc == true) {
                    ele.destroy();
                }
            }
            items.remove(id);
            delete this[id];
        }
        M.items.clear();
    };
};

$package("js.awt");

$import("js.awt.Component");

$import("js.awt.Containable");

$import("js.awt.ZOrderManager");

js.awt.Container = function(def, Runtime, view) {
    var CLASS = js.awt.Container, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ, List = js.util.LinkedList;
    thi$.addComponent = function(comp, constraints) {
        return this.insertComponent(undefined, comp, constraints);
    };
    thi$.insertComponent = function(index, comp, constraints) {
        var items = this.items0(), ref;
        if (constraints) {
            comp.def.constraints = constraints;
        }
        if (!isNaN(index) && index >= 0 && index < items.length) {
            ref = this.getElementById(items[index]);
        }
        if (this.layout instanceof js.awt.AbsoluteLayout) {
            comp.view.style.position = "absolute";
        }
        if (ref) {
            this.insertChildBefore(comp, ref);
        } else {
            this.appendChild(comp);
        }
        this.zOrderAdjust();
        return comp;
    };
    thi$.getComponent = function(id) {
        return this.getElementById(id);
    };
    thi$.getAllComponents = function(filter) {
        return this.getElements(filter);
    };
    thi$.removeComponent = function(comp) {
        comp = this.removeChild(comp);
        if (this._local.active === comp) {
            this._local.active = undefined;
        }
        this.zOrderAdjust();
        return comp;
    };
    thi$.removeAll = function(gc) {
        $super(this, gc);
        if (this.layout) {
            this.layout.invalidateLayout();
        }
    }.$override(this.removeAll);
    thi$.replaceComponent = function(comp, newComp) {
        var U = this._local, index = -1, items, constraints;
        if (!comp || !newComp) {
            return undefined;
        }
        items = this.items();
        index = items.indexOf(comp.id);
        constraints = comp.def.constraints;
        comp = this.removeChild(comp);
        if (U.active === comp) {
            delete U.active;
        }
        return this.insertComponent(index, newComp, constraints);
    };
    thi$.activateComponent = function(e) {
        var id, comp;
        if (e instanceof Event) {
            id = e.getEventTarget().id;
        } else {
            if (e instanceof js.awt.Element) {
                id = e.id;
            } else {
                id = e;
            }
        }
        comp = this[id];
        if (comp === undefined) {
            return undefined;
        }
        if (this.isZOrder()) {
            this.bringCompToFront(comp, 7);
        }
        if (this.def.activateman == true) {
            comp.setActivated(true);
            this._local.active = comp;
            (function(compid) {
                if (compid != id) {
                    this.getComponent(compid).setActivated(false);
                }
            }).$forEach(this, this.def.items);
        }
        this.activate();
        return id;
    };
    thi$.getActiveComponent = function() {
        return this._local.active;
    };
    thi$.setLayoutManager = function(layout) {
        if (layout instanceof js.awt.LayoutManager) {
            this.layout = layout;
        }
    };
    thi$.layoutComponents = function(force) {
        if (this.layout.instanceOf(js.awt.LayoutManager)) {
            this.layout.layoutContainer(this, force);
        }
    };
    thi$.getLayoutComponents = function() {
        return this.items0();
    };
    thi$.getComponentCount = function() {
        return this.getElementsCount();
    };
    thi$.contains = function(c, containSelf) {
        var id;
        switch (Class.typeOf(c)) {
          case "string":
            id = c;
            break;

          case "object":
            id = c.id;
            break;

          case "null":
          case "undefined":
            return false;

          default:
            return $super(this, c, containSelf);
        }
        return this[id] != undefined;
    }.$override(this.contains);
    thi$.elementFromPoint = function(x, y, nothese) {
        var ret = null, ids, i, comp;
        if ((!nothese || !nothese.$contains(this)) && this.inside(x, y)) {
            ids = this.items();
            for (i = ids.length - 1; i >= 0; i--) {
                comp = this.getElementById(ids[i]);
                if (!comp) {
                    continue;
                }
                if (nothese && nothese.$contains(comp)) {
                    continue;
                }
                ret = comp.elementFromPoint(x, y, nothese);
                if (ret) {
                    break;
                }
            }
            ret = ret || this;
        }
        return ret;
    }.$override(this.elementFromPoint);
    thi$.elementsFromPoint = function(x, y, nothese, result) {
        var ret = null, ids, i, comp;
        result = result || [];
        if ((!nothese || !nothese.$contains(this)) && this.inside(x, y)) {
            result.push(this);
            ids = this.items();
            for (i = ids.length - 1; i >= 0; i--) {
                comp = this.getElementById(ids[i]);
                if (nothese && nothese.$contains(comp)) {
                    continue;
                }
                comp.elementsFromPoint(x, y, nothese, result);
            }
        }
        return result;
    }.$override(this.elementsFromPoint);
    thi$.getPreferredSize = function() {
        return $super(this);
    }.$override(this.getPreferredSize);
    thi$.getMinimumSize = function() {
        var size = this.def.miniSize, didLayout = this._local.didLayout;
        if (!size && didLayout) {
            return this.layout.minimumLayoutSize(this);
        } else {
            return $super(this);
        }
    }.$override(this.getMinimumSize);
    thi$.getMaximumSize = function(nocache) {
        var size = this.def.maxiSize, didLayout = this._local.didLayout;
        if (!size && didLayout) {
            return this.layout.maximumLayoutSize(this);
        } else {
            return $super(this);
        }
    }.$override(this.getMaximumSize);
    thi$.getScrollSize = function() {
        var D = this.getBounds(), MBP = D.MBP, items = this.items0(), w = 0, h = 0, i, len, comp, box;
        for (i = 0, len = items.length; i < len; i++) {
            comp = this[items[i]];
            if (!comp || !comp.isVisible()) {
                continue;
            }
            box = comp.getBounds();
            w = Math.max(w, box.offsetX + box.width);
            h = Math.max(h, box.offsetY + box.height);
        }
        w += MBP.BPW;
        h += MBP.BPH;
        return {
            width: w,
            height: h
        };
    };
    thi$.repaint = function() {
        if ($super(this)) {
            var comps = this.items0(), i, len, comp;
            for (i = 0, len = comps.length; i < len; i++) {
                comp = this[comps[i]];
                comp.repaint();
            }
            return true;
        }
        return false;
    }.$override(this.repaint);
    thi$.isAutoFit = function() {
        return this.def.autofit === true;
    };
    thi$.autoResize = function() {
        if (!this.isAutoFit()) {
            return;
        }
        var bounds = this.getBounds(), prefer = this.getPreferredSize(), w = bounds.userW, h = bounds.userH;
        w = prefer.width > w ? prefer.width : w;
        h = prefer.height > h ? prefer.height : h;
        var container = this.getContainer();
        if (container) {
            container.doLayout();
        } else {
            this.setSize(w, h);
        }
    };
    thi$.doLayout = function(force, bounds) {
        if ($super(this)) {
            this.layoutComponents(force);
            return true;
        }
        return false;
    }.$override(this.doLayout);
    thi$._addComps = function(def) {
        var comps = def.items, R = js.awt.Graphics2D && this instanceof js.awt.Graphics2D ? this : this.Runtime(), oriComps = this._local.items, view = this.view, absLayout = this.layout instanceof js.awt.AbsoluteLayout;
        def.items = [];
        List.$decorate(def.items);
        this.view = self.document.createDocumentFragment();
        for (var i = 0, len = comps.length; i < len; i++) {
            var compid = comps[i], compDef = def[compid], comp;
            if (Class.isObject(compDef)) {
                compDef.id = compDef.id || compid;
                compDef.className = compDef.className || DOM.combineClassName(this.def.className, compid);
                comp = new (Class.forName(compDef.classType))(compDef, R);
                if (absLayout) {
                    comp.view.style.position = "absolute";
                }
                this.appendChild(comp);
            }
        }
        view.appendChild(this.view);
        this.view = view;
    };
    thi$.destroy = function() {
        if (this.destroied !== true) {
            this.removeAll(true);
            $super(this);
        }
    }.$override(this.destroy);
    thi$._init = function(def, Runtime, view) {
        if (def == undefined) {
            return;
        }
        def.classType = def.classType || "js.awt.Container";
        def.className = def.className || "jsvm_container";
        $super(this);
        var layout = def.layout = def.layout || {};
        layout.classType = layout.classType || "js.awt.LayoutManager";
        this.setLayoutManager(new (Class.forName(layout.classType))(layout));
        def.activateman = Class.isBoolean(def.activateman) ? def.activateman : false;
        var oriComps = this._local.items = List.$decorate([]);
        var comps = def.items;
        if (Class.typeOf(comps) === "array") {
            this._addComps(def);
        } else {
            def.items = List.$decorate([]);
        }
        this.zOrderAdjust();
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Component).$implements(js.awt.Containable, js.awt.ZOrderManager);

$package("js.awt");

js.awt.HBox = function(def, Runtime) {
    var CLASS = js.awt.HBox, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System;
    thi$._init = function(def, Runtime) {
        if (def == undefined) {
            return;
        }
        var newDef = System.objectCopy(def, CLASS.DEFAULTDEF(), true, true);
        newDef.layout.axis = 0;
        System.objectCopy(newDef, def, true, true);
        $super(this);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Container);

js.awt.HBox.DEFAULTDEF = function() {
    return {
        classType: "js.awt.HBox",
        className: "jsvm_hbox",
        layout: {
            classType: "js.awt.BoxLayout",
            axis: 0,
            gap: 0,
            align_x: .5,
            align_y: .5
        },
        rigid_w: false,
        rigid_h: true
    };
};

$package("js.awt");

js.awt.VBox = function(def, Runtime) {
    var CLASS = js.awt.VBox, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System;
    thi$._init = function(def, Runtime) {
        if (def == undefined) {
            return;
        }
        var newDef = System.objectCopy(def, CLASS.DEFAULTDEF(), true, true);
        newDef.layout.axis = 1;
        System.objectCopy(newDef, def, true, true);
        $super(this);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Container);

js.awt.VBox.DEFAULTDEF = function() {
    return {
        classType: "js.awt.VBox",
        className: "jsvm_vbox",
        layout: {
            classType: "js.awt.BoxLayout",
            axis: 1,
            gap: 0,
            align_x: .5,
            align_y: .5
        },
        rigid_w: true,
        rigid_h: false
    };
};

$package("js.awt");

js.awt.FieldSet = function(def, Runtime) {
    var CLASS = js.awt.FieldSet, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System;
    thi$.setLegendText = function(legendText) {
        this.legend.innerHTML = String.encodeHtml(legendText);
    };
    thi$._init = function(def, Runtime) {
        if (def == undefined) {
            return;
        }
        def.classType = def.classType || "js.awt.FieldSet";
        def.className = def.className || "jsvm_fieldset";
        def.stateless = def.stateless !== false;
        def.viewType = "FIELDSET";
        $super(this);
        var legend = this.legend = DOM.createElement("LEGEND");
        legend.className = this.className + "_legend";
        if (J$VM.ie && parseInt(J$VM.ie) < 9) {
            legend.style.cssText = "position:absolute;left:12px;top:0px;";
        }
        legend.innerHTML = this.def.legendText;
        this.view.appendChild(legend);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Container);

js.awt.FieldSet.DEFAULTDEF = function() {
    return {
        classType: "js.awt.FieldSet",
        legendText: "",
        rigid_w: false,
        rigid_h: false
    };
};

$package("js.awt");

js.awt.FileInput = function(def, Runtime) {
    var CLASS = js.awt.FileInput, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ;
    thi$.onChange = function() {
        var fileName = this.file.value;
        if (fileName == "" || fileName.length == 0) {
            return;
        }
        var txt = fileName.substr(fileName.lastIndexOf("\\") + 1);
        var valid = _checkExt.call(this, fileName);
        if (!valid) {
            this.formPane.fileName.setValue("");
            this.file.value = "";
            if (typeof this.onFileError == "function") {
                this.onFileError();
            }
            return;
        } else {
            this.formPane.fileName.setValue(this.file.value);
            if (typeof this.onFileChange == "function") {
                this.onFileChange(this.getFileName());
            }
        }
    };
    var _onFormSubmit = function(fileName) {
        this.view.submit();
    };
    var _checkExt = function(filename) {
        var str = filename.substr(filename.lastIndexOf(".") + 1);
        for (var t in this.types) {
            if (str.toLowerCase() == this.types[t]) {
                return true;
            }
        }
        return false;
    };
    thi$.getFileName = function() {
        return this.formPane.fileName.getValue();
    };
    thi$._onMouseOver = function(e) {
        if (J$VM.firefox) {
            DOM.setPosition(this.file, e.offsetX - 10, e.offsetY - 10);
        }
    };
    thi$._onMouseOut = function(e) {
        if (J$VM.firefox) {
            DOM.setPosition(this.file, 0, 0);
        }
    };
    thi$._onKeyDown = function(e) {
        return false;
    };
    thi$.setFormAction = function(action) {
        this.formPane.view.action = action;
    };
    thi$.setFormMethod = function(method) {
        this.formPane.view.method = method;
    };
    thi$.setFormEncoding = function(encoding) {
        this.formPane.view.encoding = encoding;
    };
    thi$.setVisible = function(b) {
        $super(this);
        var formPane = this.formPane;
        if (!b) {
            formPane.view.style.visibility = "hidden";
            formPane.fileName.textField.style.visibility = "hidden";
            this.file.style.visibility = "hidden";
        } else {
            formPane.view.style.visibility = "visible";
            formPane.fileName.textField.style.visibility = "visible";
            this.file.style.visibility = "visible";
        }
    }.$override(this.setVisible);
    thi$.setFormEnctype = function(enctype) {
        this.formPane.view.enctype = enctype;
    };
    thi$.setFilter = function(types) {
        this.types = types;
    };
    thi$.getFilter = function() {
        return this.types;
    };
    thi$.destroy = function() {
        this.formPane.fileName.setValue("");
        this.file.value = "";
        $super(this);
    }.$override(this.destroy);
    thi$.doLayout = function(force) {
        if ($super(this)) {
            if (J$VM.firefox) {
                var size = 1;
                this.file.setAttribute("size", size);
            }
            return true;
        }
        return false;
    }.$override(this.doLayout);
    var _calcCharSize = function() {
        var label = DOM.createElement("SPAN");
        label.innerHTML = "..........";
        var size = DOM.getTextSize(label);
        return size.width / 10;
    };
    thi$._init = function(def, Runtime) {
        if (typeof def !== "object") {
            return;
        }
        def.layout = def.layout || {
            classType: "js.awt.BorderLayout"
        };
        def.items = def.items || [ "formPane" ];
        def.className = def.className || "jsvm_fileinput";
        def.classType = def.classType || "js.awt.FileInput";
        def.css = def.css || "margin:0px,padding:0px;border:0px solid #000;overflow:hidden;height:24px;";
        def.formPane = def.formPane || {
            classType: "js.awt.HBox",
            viewType: "form",
            items: [ "fileName", "btnBrowse" ],
            fileName: {
                classType: "js.swt.TextField",
                className: "jsvm_textfield",
                rigid_w: false,
                rigid_h: true,
                height: 18,
                width: 80
            },
            btnBrowse: {
                classType: "js.awt.Button",
                className: "jsvm_button",
                labelText: "Browse...",
                rigid_w: true,
                rigid_h: true,
                height: 18
            },
            layout: {
                gap: 3
            },
            constraints: "center"
        };
        def.id = def.id || "openFile";
        $super(this);
        var model = this.model = def.model || {
            action: "",
            method: "POST",
            enctype: "multipart/form-data",
            encoding: "multipart/form-data"
        };
        this.setFormAction(model.action);
        this.setFormMethod("POST");
        this.setFormEnctype("multipart/form-data");
        this.setFormEncoding("multipart/form-data");
        this.setFilter(def.types);
        this.formPane.btnBrowse.setText(Runtime.nlsText("iidBtnBrowse", "Browse..."));
        var filePane = this.filePane = DOM.createElement("DIV");
        filePane.style.cssText = "position:absolute;float:right;top:0px;right:0px;width:100%;height:100%";
        var file = this.file = DOM.createElement("INPUT");
        DOM.applyStyles(file, {
            position: "absolute",
            cursor: "default",
            left: 0,
            top: 0,
            height: "100%",
            width: "100%"
        });
        file.className = "jsvm_fileinput_file";
        file.style.cursor = "default";
        file.style.backgroundColor = "red";
        file.name = "fileName";
        file.setAttribute("type", "file");
        DOM.appendTo(file, filePane);
        DOM.appendTo(filePane, this.formPane.view);
        this._local.charsize = _calcCharSize.call(this);
        Event.attachEvent(file, "change", 0, this, this.onChange);
        Event.attachEvent(this.filePane, "mouseover", 1, this, this._onMouseOver);
        Event.attachEvent(this.filePane, "mouseout", 1, this, this._onMouseOut);
        Event.attachEvent(file, "keydown", 0, this, this._onKeyDown);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Container);

js.awt.FileInput.DEFAULTCLASS = {
    classType: "js.awt.FileInput",
    className: "jsvm_fileinput",
    css: "margin:0px,padding:0px;border:0px solid #000;overflow:hidden;height:24px;",
    id: "openFile",
    items: [ "formPane" ],
    formPane: {
        classType: "js.awt.HBox",
        viewType: "form",
        items: [ "fileName", "btnBrowse" ],
        fileName: {
            classType: "js.swt.TextField",
            className: "jsvm_textfield",
            rigid_w: false,
            rigid_h: true,
            height: 18
        },
        btnBrowse: {
            classType: "js.awt.Button",
            className: "jsvm_button",
            labelText: "Browse...",
            rigid_w: true,
            rigid_h: true,
            height: 18
        },
        layout: {
            gap: 3
        },
        constraints: "center"
    },
    layout: {
        classType: "js.awt.BorderLayout"
    }
};

$package("js.awt");

js.awt.ScrollPane = function(def, Runtime) {
    var CLASS = js.awt.ScrollPane, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ;
    thi$.isHScroll = function() {
        return this.def.layout.axis == 0;
    };
    var _addComp = function(comp, notify) {
        this.cache[comp.uuid()] = comp;
        if (typeof comp.hoverCtrl == "function") {
            comp.hoverCtrl(false);
        }
        this.doLayout(true);
        this.scrollLast();
        if (notify !== false) {
            this.notifyPeer("js.awt.event.ItemEvent", new Event("add", "", comp));
        }
        return comp;
    };
    thi$.insertComponent = function(index, comp, constraints, notify) {
        comp.setMoveTarget(this);
        comp = $super(this, index, comp, constraints);
        return _addComp.call(this, comp, notify);
    }.$override(this.insertComponent);
    thi$.removeComponent = function(comp, notify) {
        if (!comp) {
            return;
        }
        var items = this.items(), index = items.indexOf(comp.id);
        comp = $super(this, comp);
        if (this.cache) {
            delete this.cache[comp.uuid()];
        }
        this.doLayout(true);
        if (notify !== false) {
            this.notifyPeer("js.awt.event.ItemEvent", new Event("remove", "", comp));
        }
        items = this.items();
        index = index >= items.length ? items.length - 1 : index;
        if (index >= 0) {
            comp = this[items[index]];
            this.activateComponent(comp);
        }
    }.$override(this.removeComponent);
    thi$.replaceComponent = function(comp, newComp, notify) {
        if (!comp || !newComp) {
            return undefined;
        }
        if (this.cache) {
            delete this.cache[comp.uuid()];
        }
        newComp = $super(this);
        if (newComp && newComp.isTriggered()) {
            this.activateComponent(newComp);
        }
        if (notify !== false) {
            this.notifyPeer("js.awt.event.ItemEvent", new Event("replace", "", newComp));
        }
        return newComp;
    }.$override(this.replaceComponent);
    thi$.activateComponent = function(comp, notify) {
        if (!comp) {
            return;
        }
        var items = this.items0(), id;
        for (var i = 0, len = items.length; i < len; i++) {
            id = items[i];
            if (this[id] == comp) {
                this[id].setTriggered(true);
                this._local.active = comp;
                if (notify !== false) {
                    this.notifyPeer("js.awt.event.ItemEvent", new Event("active", "", comp));
                }
            } else {
                this[id].setTriggered(false);
            }
        }
    }.$override(this.activateComponent);
    thi$.scrollFirst = function() {
        if (this.isHScroll()) {
            this.view.scrollLeft = 0;
        } else {
            this.view.scrollTop = 0;
        }
    };
    thi$.scrollNext = function() {
        var U = this._local, el = this.view, p, v;
        if (this.isHScroll()) {
            p = el.scrollLeft + U.avgwidth;
            v = el.scrollWidth;
            p = p > v ? v : p;
            el.scrollLeft = p;
        } else {
            p = el.scrollTop + U.avgheight;
            v = el.scrollHeight;
            p = p > v ? v : p;
            el.scrollTop = p;
        }
    };
    thi$.scrollPrevious = function() {
        var U = this._local, el = this.view, p;
        if (this.isHScroll()) {
            p = el.scrollLeft - U.avgwidth;
            p = p < 0 ? 0 : p;
            el.scrollLeft = p;
        } else {
            p = el.scrollTop - U.avgheight;
            p = p < 0 ? 0 : p;
            el.scrollTop = p;
        }
    };
    thi$.scrollLast = function() {
        var ele = this.view;
        if (this.isHScroll()) {
            ele.scrollLeft = ele.scrollWidth;
        } else {
            ele.scrollTop = ele.scrollHeight;
        }
    };
    thi$.isMoverSpot = function(el, x, y) {
        var uuid = el.uuid, item = this.cache[uuid];
        if (item && item.isMoverSpot(el, x, y)) {
            this.activateComponent.$delay(this, 1, item);
            return true;
        }
        return false;
    };
    thi$.getMoveObject = function(e) {
        var R = this.Runtime(), M = this.def, moveObj = this.moveObj, item, bounds, moveObjClz, def;
        if (!moveObj) {
            item = this.cache[e.srcElement.uuid];
            moveObjClz = Class.forName(M.moveObjClz);
            def = System.objectCopy(item.def, {}, true);
            moveObj = this.moveObj = new moveObjClz(def, this.Runtime(), item.cloneView());
            moveObj.setMovingPeer(this);
            moveObj.appendTo(document.body);
            bounds = item.getBounds();
            moveObj.setBounds(bounds.absX, bounds.absY, bounds.width, bounds.height, 4);
        }
        return moveObj;
    };
    var _getLayoutSize = function() {
        var items = this.items0(), item = this[items[items.length - 1]], D = this.getBounds(), d, ret = {
            bounds: D
        }, n = items.length;
        if (item) {
            d = item.getBounds();
            ret.cw = d.offsetX + d.width;
            ret.ch = d.offsetY + d.height;
        } else {
            ret.cw = 0;
            ret.ch = 0;
        }
        ret.width = ret.cw + D.MBP.BPW;
        ret.height = ret.ch + D.MBP.BPH;
        ret.avgwidth = n > 0 ? ret.cw / n : 0;
        ret.avgheight = n > 0 ? ret.ch / n : 0;
        return ret;
    };
    thi$.getPreferredSize = function() {
        var r = _getLayoutSize.call(this), max = this.getMaximumSize();
        if (this.isHScroll()) {
            return {
                width: Math.min(r.width, max.width),
                height: r.bounds.height
            };
        } else {
            return {
                width: r.bounds.width,
                height: Math.min(r.height, max.height)
            };
        }
    }.$override(this.getPreferredSize);
    thi$.doLayout = function(force) {
        if (this.isDOMElement() && $super(this)) {
            var U = this._local, r = _getLayoutSize.call(this), max = this.getMaximumSize(), width, height, oldw = this.getWidth(), oldh = this.getHeight(), resized = false;
            U.avgwidth = r.avgwidth;
            U.avgheight = r.avgheight;
            if (this.isHScroll()) {
                width = this.def.onlyMax ? max.width : Math.min(r.width, max.width);
                if (oldw != width) {
                    this.setWidth(width);
                    resized = true;
                }
            } else {
                height = this.def.onlyMax ? max.height : Math.min(r.height, max.height);
                if (oldh != height) {
                    this.setHeight(height);
                    resized = true;
                }
            }
            if (resized) {
                this.notifyContainer("js.awt.event.LayoutEvent", new Event("resize", "", this));
            }
            return true;
        }
        return false;
    }.$override(this.doLayout);
    var _onclick = function(e) {
        var el = e.srcElement, uuid = el.uuid, item = this.cache[uuid], eType, evt;
        if (item) {
            eType = e.getType();
            if (eType == "click") {
                e.setEventTarget(item);
                evt = new Event(el === item.ctrl ? "ctrlclick" : "itemclick", "", item);
                this.notifyPeer("js.awt.event.ItemEvent", evt);
            } else {
                if (eType == "dblclick") {
                    e.cancelBubble();
                    if (item.isEditable && item.isEditable()) {
                        item.editLabel();
                    }
                }
            }
        }
        return e.cancelDefault();
    };
    var _onitemtextchange = function(e) {
        var item = e.getEventTarget(), d;
        item.def.prefSize = undefined;
        this.doLayout(true);
        if (e.getType() == "edit") {
            this.notifyPeer("js.awt.event.ItemEvent", new Event("textchanged", "", item));
        }
    };
    var _onmouseover = function(e) {
        var hoverOnCtrl = this.def.hoverOnCtrl !== false, from = e.fromElement, to = e.toElement, fid = from ? from.uuid : undefined, tid = to ? to.uuid : undefined, fitem, titem, cache = this.cache;
        if (fid !== tid) {
            fitem = cache[fid];
            titem = cache[tid];
            if (fitem && fitem.isHover()) {
                fitem.setHover(false);
                fitem.hoverCtrl(false);
            }
            if (titem && !titem.isHover()) {
                titem.setHover(true);
                if (!hoverOnCtrl || to == titem.ctrl) {
                    titem.hoverCtrl(true);
                }
            }
        } else {
            titem = cache[tid];
            if (titem && titem.isHover()) {
                if (!hoverOnCtrl || to == titem.ctrl) {
                    titem.hoverCtrl(true);
                } else {
                    titem.hoverCtrl(false);
                }
            }
        }
    };
    thi$.acceptInsert = function(item, xy) {
        var mvId = item.id, items = this.items0(), insert, tmp;
        for (var i = 0, len = items.length; i < len; i++) {
            tmp = this[items[i]];
            if (tmp.id == mvId) {
                continue;
            }
            if (tmp.inside(xy.x, xy.y)) {
                tmp.setActivated(true);
                insert = items.indexOf(tmp.id);
            } else {
                tmp.setActivated(false);
            }
        }
        return insert;
    };
    thi$.showIndicator = function(b, insert) {};
    var _ondrag = function(e) {
        var eType = e.getType(), moveObj = e.getEventTarget(), xy = e.eventXY(), mvId = moveObj.id, item = this[mvId], items = this.items0(), p0 = items.indexOf(mvId), p1, insert, changed = false;
        switch (eType) {
          case "mousemove":
            p1 = this.acceptInsert(item, xy);
            this._local.insert = Class.isNumber(p1) ? p1 : p0;
            this.showIndicator(true, this._local.insert);
            break;

          case "mouseup":
            p1 = this._local.insert;
            insert = this[items[p1]];
            if (p0 > p1) {
                items.remove0(p0);
                items.add(p1, mvId);
                this.view.removeChild(item.view);
                this.view.insertBefore(item.view, insert.view);
                changed = true;
            } else {
                if (p0 < p1) {
                    items.add(p1 + 1, mvId);
                    items.remove0(p0);
                    this.view.removeChild(item.view);
                    this.view.insertBefore(item.view, insert.view.nextSibling);
                    changed = true;
                }
            }
            if (changed) {
                this.def.items = System.arrayCopy(items, 0, js.util.LinkedList.$decorate([]), 0, items.length);
                this.doLayout(true);
                this.notifyPeer("js.awt.event.ItemEvent", new Event("orderchanged", "", this));
            }
            if (insert) {
                insert.setActivated(false);
            }
            this.showIndicator(false);
            delete this._local.insert;
            break;
        }
    };
    thi$.destroy = function() {
        delete this.cache;
        $super(this);
    }.$override(this.destroy);
    thi$._init = function(def, Runtime) {
        if (def == undefined) {
            return;
        }
        var newDef = System.objectCopy(def, CLASS.DEFAULTDEF(), true, true), hscroll = newDef.layout.axis == 0, mover, M;
        newDef.className = newDef.className || (hscroll ? "jsvm_hscroll" : "jsvm_vscroll");
        mover = newDef.mover = newDef.mover || {};
        mover.longpress = mover.longpress || 10;
        mover.freedom = !isNaN(mover.freedom) ? mover.freedom : hscroll ? 1 : 2;
        System.objectCopy(newDef, def, true, true);
        $super(this);
        this.cache = {};
        M = this.def;
        M.itemClassType = M.itemClassType || "js.awt.Item";
        M.moveObjClz = M.moveObjClz || M.itemClassType;
        this.attachEvent("mouseover", 0, this, _onmouseover);
        this.attachEvent("mouseout", 0, this, _onmouseover);
        this.attachEvent("click", 0, this, _onclick);
        this.attachEvent("dblclick", 0, this, _onclick);
        MQ.register("js.awt.event.ItemTextEvent", this, _onitemtextchange);
        if (this.isMovable()) {
            MQ.register("js.awt.event.MovingEvent", this, _ondrag);
        }
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Container);

js.awt.ScrollPane.DEFAULTDEF = function() {
    return {
        classType: "js.awt.ScrollPane",
        layout: {
            classType: "js.awt.FlowLayout",
            hgap: 0,
            vgap: 0,
            axis: 0,
            align_x: 0,
            align_y: 0
        },
        rigid_w: false,
        rigid_h: false,
        movable: true
    };
};

$package("js.awt");

js.awt.TableBody = function(def, Runtime) {
    var CLASS = js.awt.TableBody, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, System = J$VM.System;
    var _buildTableBody = function(grid, def) {
        var R = this.Runtime(), m = grid.rowNum();
        var tbody = new CLASS.TBody({}, R);
        tbody.appendTo(this.view);
        var i, j, n, row, rowUuid, trow, cell, tcell, rowData, cellData, className, subClassName, tempDiv;
        var cache = def.cache, data = def.data, rUuid = "rowuuid", title = "title", style = "style";
        for (i = 0; i < m; i++) {
            row = grid.row(i);
            trow = undefined;
            rowData = data.get(i);
            if (row.visible) {
                trow = row.trow = new CLASS.Row(row, R);
                trow.obj = rowData[rowData.length - 1];
            }
            if (trow) {
                rowUuid = trow.view.uuid;
                n = grid.colNum();
                for (j = 0; j < n; j++) {
                    cell = grid.cell(i, j);
                    cellData = rowData[j];
                    if (cell && cell.visible) {
                        className = cellData.className;
                        subClassName = cellData.subClassName;
                        if (cellData.isNoWrap) {
                            if (subClassName) {
                                tempDiv = '<div class="' + subClassName + '" rowuuid="' + rowUuid + '" >' + cellData.value + "</div>";
                            }
                            if (className) {
                                cell.className = className;
                            }
                        } else {
                            if (className) {
                                cell.className = className;
                            }
                        }
                        tcell = cell.tcell = new CLASS.Cell(cell, R);
                        if (tempDiv) {
                            tcell.view.innerHTML = tempDiv;
                            tempDiv = null;
                        } else {
                            tcell.setText(cellData.value);
                        }
                        tcell.setAttribute(rUuid, rowUuid);
                        var titleValue = cellData.value;
                        if (cellData.tips != undefined && cellData.tips.trim() != "") {
                            titleValue = cellData.tips;
                        }
                        tcell.setAttribute(title, titleValue);
                        if (cellData.css != undefined) {
                            tcell.setAttribute(style, cellData.css);
                        }
                        tcell.appendTo(trow.view);
                    }
                }
                cache[rowUuid] = trow;
                trow.appendTo(tbody.view);
            }
        }
    };
    thi$.destroy = function() {
        this.grid.cells = [];
        this.grid.cols = [];
        this.grid.rows = [];
        delete this.grid;
        delete this.def.cache;
        delete this.def.data;
        $super(this);
    }.$override(this.destroy);
    thi$._init = function(def, Runtime) {
        if (def == undefined) {
            return;
        }
        def.classType = def.classType || "js.awt.TableBody";
        def.className = def.className || "jsvm_table";
        def.viewType = "TABLE";
        this.def = def;
        $super(this);
        this.grid = new (Class.forName("js.awt.Grid"))(def);
        var bounds = def.bounds;
        this.grid.layout(bounds.left, bounds.top, bounds.width, bounds.height);
        _buildTableBody.call(this, this.grid, def);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Component);

js.awt.TableBody.TBody = function(def, Runtime) {
    var CLASS = js.awt.TableBody.TBody, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    thi$._init = function(def, Runtime) {
        if (def == undefined) {
            return;
        }
        def.viewType = "TBODY";
        $super(this);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Component);

js.awt.TableBody.Row = function(def, Runtime) {
    var CLASS = js.awt.TableBody.Row, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    thi$._init = function(def, Runtime) {
        if (def == undefined) {
            return;
        }
        def.classType = def.classType || "js.awt.TableBody.Row";
        def.className = def.className || "jsvm_table_row";
        def.viewType = "TR";
        $super(this);
        var ele = this.view;
        ele.uuid = this.uuid();
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Component);

js.awt.TableBody.Cell = function(def, Runtime) {
    var CLASS = js.awt.TableBody.Cell, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    thi$.setText = function(text, encode) {
        this.def.text = text || "";
        this.view.innerHTML = this.def.text;
    };
    thi$._init = function(def, Runtime) {
        if (def == undefined) {
            return;
        }
        def.classType = def.classType || "js.awt.TableBody.Cell";
        def.className = def.className || "jsvm_table_cell";
        def.viewType = "TD";
        $super(this);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Component);

js.awt.Table = function(def, Runtime) {
    var CLASS = js.awt.Table, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    CLASS.ROW_UUID = "rowuuid";
    CLASS.ROW_CLASSNAME0 = "jsvm_table_row_0";
    CLASS.ROW_CLASSNAME_HOVER = "jsvm_table_row_hover";
    var Class = js.lang.Class, System = J$VM.System;
    thi$.destroy = function() {
        delete this.headerCache;
        delete this.colsDef;
        if (this.bodyDef) {
            delete this.bodyDef.data, delete this.bodyDef;
        }
        delete this.cache;
        delete this.data;
        if (this.lastHeaderItem) {
            delete this.lastHeaderItem;
        }
        if (this.curRow) {
            delete this.curRow;
        }
        $super(this);
    }.$override(this.destroy);
    thi$.setTableBody = function(data, bodyDef) {
        this.data = data;
        var R = this.Runtime(), rowLen;
        var bodyHolder = this["bodyHolder"];
        this.bodyDef = null;
        bodyHolder.removeAll(true);
        if (data) {
            rowLen = data.length;
        }
        if (rowLen > 0) {
            var bounds = bodyHolder.getBounds(), MBP = bounds.MBP;
            var rowsDef = new Array(rowLen);
            for (i = 0; i < rowLen; i++) {
                rowsDef[i] = {
                    index: i,
                    measure: 23,
                    rigid: true
                };
            }
            this.bodyDef = {
                classType: "js.awt.TableBody",
                className: bodyDef ? bodyDef.className : undefined,
                bounds: {
                    left: MBP.paddingLeft,
                    top: MBP.paddingTop,
                    width: bounds.innerWidth,
                    height: bounds.innerHeight
                },
                id: bodyDef ? bodyDef.id : "tableBody",
                rigid_w: false,
                rigid_h: true,
                rowNum: rowLen,
                colNum: this.colsDef.length,
                rows: rowsDef,
                cols: this.colsDef,
                data: data,
                cache: this.cache
            };
            var tableBody = new js.awt.TableBody(this.bodyDef, R);
            bodyHolder.addComponent(tableBody);
            tableBody.setSize(bounds.innerWidth, rowLen * 23, 2);
        }
    };
    var _sort = function(data, runtime) {
        if (!this.bodyDef) {
            return;
        }
        var bodyHolder = this["bodyHolder"];
        bodyHolder.removeAll(true);
        this.cache = {};
        this.bodyDef.data = data;
        this.bodyDef.cache = this.cache;
        bodyHolder.addComponent(new js.awt.TableBody(this.bodyDef, runtime));
    };
    thi$.clearSort = function() {
        this._sortIndex = -1;
        this._sortAsc = false;
        this._lastIndex = -1;
        if (this.lastHeaderItem) {
            this.lastHeaderItem.ctrl.className = "jsvm_table_header_ctrl";
        }
    };
    var _onSort = function(e) {
        var headerItem = this.headerCache[e.srcElement.uuid];
        var bodyHolder = this["bodyHolder"];
        if (this.lastHeaderItem && headerItem !== this.lastHeaderItem) {
            this.lastHeaderItem.ctrl.className = "jsvm_table_header_ctrl";
            this._sortIndex = -1;
            this._sortAsc = false;
            this._lastIndex = -1;
        }
        if (this.data) {
            this._sortIndex = headerItem.def.index;
            if (this._lastIndex == -1 || this._lastIndex != 0) {
                this._sortAsc = false;
                headerItem.ctrl.className = "jsvm_table_header_ctrl_2";
            } else {
                if (this._sortAsc) {
                    headerItem.ctrl.className = "jsvm_table_header_ctrl_2";
                } else {
                    headerItem.ctrl.className = "jsvm_table_header_ctrl_1";
                }
                this._sortAsc = !this._sortAsc;
            }
            this._lastIndex = 0;
            this.lastHeaderItem = headerItem;
            var _compare = function(a, b) {
                var x = a[this._sortIndex].value, y = b[this._sortIndex].value;
                var e = /^\d+\s+(kb|KB)$/gi.test(x) && /^\d+\s+(kb|KB)$/gi.test(y);
                var isDate = Date.parse(x) && Date.parse(y);
                if (this._sortAsc) {
                    if (!isNaN(isDate)) {
                        return eval(Date.parse(x) > Date.parse(y)) ? 1 : -1;
                    } else {
                        if (e) {
                            return eval(parseFloat(x) > parseFloat(y)) ? 1 : -1;
                        }
                    }
                    return x > y ? 1 : -1;
                } else {
                    if (!isNaN(isDate)) {
                        return eval(Date.parse(x) < Date.parse(y)) ? 1 : -1;
                    } else {
                        if (e) {
                            return eval(parseFloat(x) < parseFloat(y)) ? 1 : -1;
                        }
                    }
                    return x < y ? 1 : -1;
                }
            }.$bind(this);
            this.data.sort(_compare);
            this._sortIndex = -1;
            _sort.call(this, this.data, this.Runtime());
        }
    };
    var _onRowMouseout = function(e) {
        var row = this.cache[e.srcElement.getAttribute(CLASS.ROW_UUID)];
        if (row && this.curRow !== row) {
            row.view.className = CLASS.ROW_CLASSNAME0;
        }
    };
    var _onRowMouseover = function(e) {
        var row = this.cache[e.srcElement.getAttribute(CLASS.ROW_UUID)];
        if (row && this.curRow !== row) {
            row.view.className = CLASS.ROW_CLASSNAME_HOVER;
        }
    };
    var _onClick = function(e) {
        var row = this.cache[e.srcElement.getAttribute(CLASS.ROW_UUID)];
        if (this.curRow) {
            this.curRow.view.className = this.curRow.def.className + "_0";
        }
        if (row) {
            row.view.className = row.def.className + "_hover";
            this.curRow = row;
            e.setEventTarget(row.obj);
            e.setType("click");
            this.notifyPeer("js.awt.event.TableItemEvent", e);
        }
    };
    var _onDblClick = function(e) {
        var row = this.cache[e.srcElement.getAttribute(CLASS.ROW_UUID)];
        if (this.curRow) {
            this.curRow.view.className = this.curRow.def.className + "_0";
        }
        if (row) {
            row.view.className = row.def.className + "_hover";
            this.curRow = row;
            e.setEventTarget(row.obj);
            e.setType("dblClick");
            this.notifyPeer("js.awt.event.TableItemEvent", e);
        }
    };
    thi$._init = function(def, Runtime) {
        if (def == undefined) {
            return;
        }
        def.layout = {
            classType: "js.awt.GridLayout",
            rowNum: 2,
            colNum: 1,
            rows: [ {
                index: 0,
                measure: 26,
                rigid: true
            }, {
                index: 1,
                rigid: false,
                weight: 1
            } ]
        };
        def.items = [ "headerHolder", "bodyHolder" ];
        var headerNames = def.headerNames;
        var columnLen = headerNames.length;
        var colsDef = this.colsDef = new Array(columnLen);
        var headerItems = new Array(columnLen);
        var columnWeights = def.columnWeights;
        this.headerCache = {};
        def.headerHolder = {
            classType: "js.awt.Container",
            className: def.headerHolderClassName || "jsvm_table_headerHolder",
            stateless: true,
            id: "headerHolder",
            layout: {
                classType: "js.awt.GridLayout",
                rowNum: 1,
                colNum: columnLen,
                rows: [ {
                    index: 0,
                    measure: 26,
                    rigid: true
                } ],
                cols: colsDef
            },
            rigid_w: false,
            rigid_h: false,
            items: headerItems,
            constraints: {
                rowIndex: 0,
                colIndex: 0
            }
        };
        for (i = 0; i < columnLen; i++) {
            this.colsDef[i] = {
                index: i,
                rigid: false,
                weight: columnWeights[i]
            };
            headerItems[i] = "header" + i;
            def.headerHolder[headerItems[i]] = {
                classType: "js.awt.Item",
                className: "jsvm_table_header",
                id: "header" + i,
                index: i,
                rigid_w: false,
                rigid_h: false,
                controlled: true,
                labelText: headerNames[i].trim(),
                constraints: {
                    rowIndex: 0,
                    colIndex: i
                }
            };
        }
        def.bodyHolder = {
            classType: "js.awt.Container",
            layout: {
                classType: "js.awt.BoxLayout"
            },
            id: "bodyHolder",
            rigid_w: false,
            rigid_h: false,
            className: "jsvm_table_bodyHolder",
            constraints: {
                rowIndex: 1,
                colIndex: 0
            }
        };
        $super(this);
        var headerHolder = this["headerHolder"];
        var bodyHolder = this["bodyHolder"];
        headerHolder.attachEvent("click", 0, this, _onSort);
        for (i = 0; i < columnLen; i++) {
            var headerItem = headerHolder[headerHolder.def.items[i]];
            this.headerCache[headerItem.uuid()] = headerItem;
        }
        this._sortIndex = -1;
        this._sortAsc = false;
        this._lastIndex = -1;
        this.lastHeaderItem = null;
        this.cache = {};
        this.curRow = null;
        bodyHolder.attachEvent("click", 0, this, _onClick);
        bodyHolder.attachEvent("dblclick", 0, this, _onDblClick);
        bodyHolder.attachEvent("mouseover", 0, this, _onRowMouseover);
        bodyHolder.attachEvent("mouseout", 0, this, _onRowMouseout);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Container);

$package("js.awt");

js.awt.TabPane = function(def, Runtime) {
    var CLASS = js.awt.TabPane, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    CLASS.EVT_TABACTIVATED = "TabActivatedEvent";
    CLASS.EVT_TABDISABLED = "TabDisabledEvent";
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ;
    thi$.msgType = function(msgType) {
        var U = this._local;
        if (Class.isString(msgType) && msgType.length > 0) {
            U.msgType = msgType;
        }
        return U.msgType || "js.awt.event.TabActivatedEvent";
    };
    thi$.addTab = function(tabDef, panel) {
        tabDef.classType = tabDef.classType || "js.awt.Item";
        tabDef.className = tabDef.className || DOM.combineClassName(this.def.className, "tab");
        tabDef.id = tabDef.id || "tab" + this.tabs.getComponentCount();
        var tab = new (Class.forName(tabDef.classType))(tabDef, this.Runtime());
        this.cache[tab.uuid()] = tab;
        this.tabs.addComponent(tab);
        this.panes.addComponent(panel);
    };
    thi$.removeTab = function(tabId, panId) {
        var items = this.tabs.items0(), id, tabs = this.tabs, panes = this.panes;
        tabs.removeComponent(tabs[tabId]);
        panes.removeComponent(panes[panId]);
    };
    thi$.activateTab = function(tabId) {
        var items = this.tabs.items0(), id, tabs = this.tabs, panes = this.panes, evt;
        for (var i = 0, len = items.length; i < len; i++) {
            id = items[i];
            if (id == tabId) {
                tabs[id].setTriggered(true);
                panes.layout.show(this.panes, i);
            } else {
                tabs[id].setTriggered(false);
            }
        }
        this.activateId = tabId;
        evt = new Event(CLASS.EVT_TABACTIVATED, {
            activateId: tabId
        }, this);
        this.notifyPeer(this.msgType(), evt);
    };
    thi$.getActivateTabId = function() {
        return this.activateId;
    };
    thi$.isAllTabDisabled = function() {
        var tabs = this.tabs, items = tabs.items0(), tab, b = true;
        for (var i = 0, len = items.length; i < len; i++) {
            tab = tabs[items[i]];
            if (tab && tab.isEnabled()) {
                b = false;
                break;
            }
        }
        return b;
    };
    thi$.disableTab = function(tabId, disable) {
        var tab = this.tabs[tabId], panes = this.panes, enable, b, data, evt;
        enable = disable !== true;
        if (tab.isEnabled() !== enable) {
            tab.setEnabled(enable);
        }
        if (tabId === this.activateId) {
            tab.setTriggered(false);
            this.activateFirstTab();
        }
        b = this.isAllTabDisabled();
        if (panes.isEnabled() === b) {
            panes.setEnabled(b);
            panes.showDisableCover(b);
        }
        data = {
            tabId: tabId,
            isAllTabDisabled: b
        };
        evt = new Event(CLASS.EVT_TABDISABLED, data, this);
        this.notifyPeer(this.msgType(), evt);
    };
    thi$.getAllTabs = function() {
        return this.tabs.getAllComponents();
    };
    thi$.getAllPanels = function() {
        return this.panes.getAllComponents();
    };
    thi$.activateFirstTab = function() {
        var tabs = this.tabs, items = tabs.items0(), id, tab, rst, b = true;
        for (var i = 0, len = items.length; i < len; i++) {
            id = items[i];
            tab = tabs[id];
            if (tab && tab.isEnabled()) {
                this.activateTab(id);
                break;
            }
            tab = null;
        }
        return tab;
    };
    thi$.getPanelByTab = function(tabId) {
        var index = this.indexOfTab(tabId), panelId = this.panes.items0()[index];
        return this.panes[panelId];
    };
    thi$.getTabByPanel = function(panId) {
        var index = this.indexOfPanel(panId), tabId = this.tabs.items0()[index];
        return this.tabs[tabId];
    };
    thi$.indexOfTab = function(tabId) {
        var items = this.tabs.items0(), id;
        for (var i = 0, len = items.length; i < len; i++) {
            id = items[i];
            if (id == tabId) {
                return i;
            }
        }
        return -1;
    };
    thi$.indexOfPanel = function(panId) {
        var items = this.panes.items0(), id;
        for (var i = 0, len = items.length; i < len; i++) {
            id = items[i];
            if (id == panId) {
                return i;
            }
        }
        return -1;
    };
    var _onmousedown = function(e) {
        var el = e.srcElement, uuid = el.uuid, tab = this.cache[uuid];
        if (tab && tab.isEnabled()) {
            this.activateTab(tab.id);
        }
    };
    thi$.destroy = function() {
        delete this.cache;
        $super(this);
    }.$override(this.destroy);
    thi$._init = function(def, Runtime) {
        if (def == undefined) {
            return;
        }
        var newDef = System.objectCopy(def, CLASS.DEFAULTDEF(), true, true);
        System.objectCopy(newDef, def, true, true);
        $super(this);
        this.cache = {};
        this.attachEvent("mousedown", 0, this, _onmousedown);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Container);

js.awt.TabPane.DEFAULTDEF = function() {
    return {
        classType: "js.awt.TabPane",
        className: "jsvm_tabpane",
        items: [ "tabs", "panes" ],
        tabs: {
            classType: "js.awt.Container",
            constraints: "north",
            layout: {
                classType: "js.awt.FlowLayout",
                axis: 0,
                hgap: 0,
                align_x: 0,
                align_y: 0
            },
            stateless: true
        },
        panes: {
            classType: "js.awt.Container",
            constraints: "center",
            layout: {
                classType: "js.awt.CardLayout"
            },
            zorder: true,
            stateless: true
        },
        layout: {
            classType: "js.awt.BorderLayout"
        },
        rigid_w: false,
        rigid_h: false
    };
};

$package("js.awt");

js.awt.TextField = function(def, Runtime) {
    var CLASS = js.awt.TextField, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, System = J$VM.System, MQ = J$VM.MQ, DOM = J$VM.DOM;
    thi$.getMsgType = function() {
        return "js.awt.event.TextFieldEvent";
    };
    thi$.isEditable = function() {
        return this.view.readOnly == undefined;
    };
    thi$.setEditable = function(b) {
        b = b || false;
        if (b) {
            DOM.removeAttribute(this.view, "readOnly");
        } else {
            this.view.readOnly = true;
        }
    };
    thi$.setValue = function(text, notify) {
        var view = this.view;
        text = text || "";
        if (text != view.value) {
            view.value = text;
            if (notify === true) {
                this.notifyPeer(this.getMsgType(), new Event("changed", text, this));
            }
        }
    };
    thi$.getValue = function() {
        return this.view.value;
    };
    thi$.select = function(start, end) {
        var textarea = this.view, range, len = textarea.value.length;
        if (textarea.setSelectionRange) {
            start = !Class.isNumber(start) ? 0 : start;
            end = !Class.isNumber(end) ? len : end;
            textarea.setSelectionRange(start, end);
        } else {
            range = textarea.createTextRange();
            range.select();
            start = !Class.isNumber(start) ? 0 : start;
            end = !Class.isNumber(end) ? 0 : end - len;
            range.moveStart("character", start);
            range.moveEnd("character", end);
            range.select();
        }
        textarea.focus();
    };
    thi$.getSelection = function() {
        return this._local.selection || _getSelection.call(this);
    };
    thi$.insert = function(text, selection) {
        selection = selection || this.getSelection();
        var value = this.getValue(), v0 = value.substring(0, selection.start), v1 = value.substring(selection.end), p1 = v1.length;
        value = [ v0, v1 ].join(text || "");
        this.setValue(value, true);
        p1 = value.length - p1;
        delete this._local.selection;
        this.select(p1, p1);
    };
    var _getSelection = function() {
        var range = {}, textarea = this.view, p0 = 0, p1 = 0, text = "", i = 0;
        textarea.focus();
        if (textarea.setSelectionRange) {
            p0 = textarea.selectionStart;
            p1 = textarea.selectionEnd;
            text = p0 != p1 ? textarea.value.substring(p0, p1) : "";
        } else {
            if (document.selection) {
                p0 = document.selection.createRange();
                p1 = p0.duplicate();
                p1.moveToElementText(textarea);
                text = p0.text;
                while (p1.compareEndPoints("StartToStart", p0) < 0) {
                    p0.moveStart("character", -1);
                    i++;
                }
                p0 = i;
                p1 = p0 + text.length;
            }
        }
        range.text = text;
        range.start = p0;
        range.end = p1;
        return range;
    };
    var _onmouseevent = function(e) {
        switch (e.getType()) {
          case "mousedown":
            delete this._local.selection;
            break;

          case "mouseup":
          case "mouseout":
            this._local.selection = _getSelection.call(this);
            break;
        }
    };
    var _onblur = function(e) {
        this.notifyPeer(this.getMsgType(), new Event("changed", this.getValue(), this));
    };
    thi$.getPreferredSize = function() {
        var ret = this.def.prefSize || {}, d = this.getBounds();
        if (isNaN(ret.width)) {
            ret.width = d.width;
        }
        if (isNaN(ret.height)) {
            ret.height = d.height;
        }
        return ret;
    }.$override(this.getPreferredSize);
    thi$._init = function(def, Runtime) {
        if (def == undefined) {
            return;
        }
        if (def.multiline === false) {
            def.viewType = "INPUT";
        } else {
            def.viewType = "TEXTAREA";
        }
        $super(this);
        if (def.multiline === false) {
            this.view.type = "text";
        }
        var M = this.def, view = this.view;
        this.setValue(M.text);
        this.setEditable(M.editable);
        Event.attachEvent(view, "mouseout", 0, this, _onmouseevent);
        Event.attachEvent(view, "mousedown", 0, this, _onmouseevent);
        Event.attachEvent(view, "mouseup", 0, this, _onmouseevent);
        Event.attachEvent(view, "blur", 0, this, _onblur);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Component);

$package("js.swt");

js.swt.SearchKit = function() {};

js.swt.SearchKit.buildRegExp = function(keyword, options) {
    if (!keyword || keyword.length == 0) {
        return null;
    }
    keyword = js.lang.Class.forName("js.lang.String").escapeRegExp(keyword);
    if (typeof options !== "object") {
        options = {
            global: true,
            insensitive: true,
            matchword: false,
            wholeword: false
        };
    }
    if (options["wholeword"] === true) {
        keyword = "^" + keyword + "$";
    } else {
        if (options["matchword"] === true) {
            keyword = "\\b" + keyword + "\\b";
        }
    }
    var reopts = "";
    if (options["global"] !== false) {
        reopts += "g";
    }
    if (options["insensitive"] !== false) {
        reopts += "i";
    }
    var regExp = new RegExp(keyword, reopts);
    return regExp;
};

js.swt.SearchKit.search = function(textSet, keyword, options) {
    var SKit = js.swt.SearchKit, pattern = SKit.buildRegExp(keyword, options);
    return SKit.searchByPattern(textSet, pattern);
};

js.swt.SearchKit.searchByPattern = function(textSet, pattern) {
    var SKit = js.swt.SearchKit, len = textSet ? textSet.length : 0, matches, text, textMatches;
    if (len == 0) {
        return null;
    }
    matches = new js.util.HashMap();
    for (var i = 0; i < len; i++) {
        text = textSet[i];
        textMatches = SKit.searchInTextByPattern(text, pattern);
        if (textMatches && textMatches.length > 0) {
            matches.put(i, textMatches);
        }
    }
    return {
        pattern: pattern,
        matches: matches
    };
};

js.swt.SearchKit.searchInText = function(text, keyword, options) {
    var SKit = js.swt.SearchKit, pattern = SKit.buildRegExp(keyword, options);
    return SKit.searchInTextByPattern(text, pattern);
};

js.swt.SearchKit.searchInTextByPattern = function(text, pattern) {
    if (!text || text.length == 0 || !pattern) {
        return null;
    }
    if (!(pattern instanceof RegExp)) {
        throw new Error("The pattern is not a valid RegExp.");
    }
    var matches = [];
    text.replace(pattern, function(m, i) {
        matches.push({
            start: i,
            length: m.length
        });
    });
    return matches;
};

$package("js.awt");

js.awt.Highlighter = function() {
    var CLASS = js.awt.Highlighter, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, String = js.lang.String, Math = js.lang.Math, StringBuffer = js.lang.StringBuffer, System = J$VM.System, DOM = J$VM.DOM, SKit = Class.forName("js.swt.SearchKit");
    thi$.setKeepNative = function(b) {
        this.def.keepNative = b === true;
    };
    thi$.isKeepNative = function() {
        return this.def.keepNative === true;
    };
    thi$.getContent = function() {
        if (!this.label) {
            return null;
        }
        if (typeof this.getText === "function") {
            return this.getText();
        }
        return "";
    };
    var _setText = function(text, encode) {
        if (this.label) {
            this.label.innerHTML = encode === false ? text : String.encodeHtml(text);
        }
    };
    thi$.highlight = function(keyword, options, highlightClass) {
        if (!this.label || !keyword || !options) {
            return null;
        }
        var pattern = SKit.buildRegExp(keyword, options);
        return this.highlightByPattern(pattern, highlightClass);
    };
    var _getHighlightElements = function(ids) {
        var len = Class.isArray(ids) ? ids.length : 0, pele = this.view, uuid = this.uuid(), doms = [], id, ele;
        for (var i = 0; i < len; i++) {
            id = ids[i];
            if (pele.querySelector) {
                ele = pele.querySelector("#" + id);
            } else {
                ele = document.getElementById(id);
            }
            if (ele) {
                ele.uuid = uuid;
                doms.push(ele);
            }
        }
        return doms;
    };
    thi$.highlightByPattern = function(pattern, highlightClass) {
        var text = this.getContent(), styleClass, ids = [], newText, hid, tmp;
        if (!text || !(pattern instanceof RegExp)) {
            return null;
        }
        text = String.encodeHtml(text);
        styleClass = highlightClass;
        if (!Class.isString(styleClass) || styleClass.length == 0) {
            styleClass = DOM.combineClassName(this.def.className, "highlight");
        }
        newText = text.replace(pattern, function(m) {
            hid = Math.uuid();
            ids.push(hid);
            return '<span id="' + hid + '" class="' + styleClass + '">' + m + "</span>";
        });
        _setText.call(this, newText, false);
        hid = null;
        newText = null;
        return _getHighlightElements.call(this, ids);
    };
    thi$.highlightByMatches = function(matches, highlightClass) {
        var mCnt = Class.isArray(matches) ? matches.length : 0, text = this.getContent(), styleClass, rpSeg, subStr, aMatches, vernier, hid, ids;
        if (mCnt == 0 || !Class.isString(text)) {
            return null;
        }
        styleClass = highlightClass;
        if (!Class.isString(styleClass) || styleClass.length == 0) {
            styleClass = DOM.combineClassName(this.def.className, "highlight");
        }
        ids = [];
        vernier = 0;
        rpSeg = new StringBuffer();
        for (var i = 0; i < mCnt; i++) {
            aMatches = matches[i];
            if (aMatches.start > vernier) {
                subStr = text.substring(vernier, aMatches.start);
                subStr = String.encodeHtml(subStr);
                rpSeg.append(subStr);
                subStr = text.substr(aMatches.start, aMatches.length);
                vernier = aMatches.start + aMatches.length;
            } else {
                if (aMatches.start == vernier) {
                    subStr = text.substr(aMatches.start, aMatches.length);
                    vernier = aMatches.start + aMatches.length;
                } else {
                    subStr = null;
                }
            }
            if (subStr) {
                hid = Math.uuid();
                ids.push(hid);
                subStr = String.encodeHtml(subStr);
                subStr = '<span id="' + hid + '" class="' + styleClass + '">' + subStr + "</span>";
                rpSeg.append(subStr);
            }
        }
        if (vernier <= text.length) {
            subStr = text.substr(vernier);
            subStr = String.encodeHtml(subStr);
            rpSeg.append(subStr);
        }
        _setText.call(this, rpSeg.toString(), false);
        rpSeg = null;
        return _getHighlightElements.call(this, ids);
    };
    thi$.clearHighlight = function(highlightClass) {
        if (!this.label) {
            return;
        }
        _setText.call(this, this.getContent(), !this.isKeepNative());
    };
};

$package("js.awt");

$import("js.awt.Highlighter");

js.awt.Item = function(def, Runtime, view) {
    var CLASS = js.awt.Item, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ;
    thi$.msgType = function(msgType) {
        var U = this._local;
        if (Class.isString(msgType) && msgType.length > 0) {
            U.msgType = msgType;
        }
        return U.msgType || "js.awt.event.StrictItemEvent";
    };
    thi$.isStrict = function() {
        return this.def.strict === true;
    };
    var _getAutoFitSize = function() {
        var M = this.def, layout = M.layout || {}, gap = layout.gap || 0, bounds = this.getBounds(), MBP = bounds.MBP, tw = MBP.BPW, items = M.items, len = items.length, id, iid, ele, box, w, iSize, sv;
        for (var i = 0; i < len; i++) {
            id = items[i];
            iid = id.split(/\d+/g)[0];
            ele = this[id];
            box = DOM.getBounds(ele);
            MBP = box.MBP;
            tw += MBP.marginLeft;
            switch (iid) {
              case "icon":
              case "sign":
                w = box.width;
                if (iid === "icon") {
                    iSize = M.iconSize || {};
                } else {
                    iSize = M.signSize || {};
                }
                sv = iSize.width;
                if (!isNaN(sv) && sv > 0) {
                    w = sv;
                }
                break;

              default:
                w = box.width;
                break;
            }
            tw += w;
            tw += MBP.marginRight;
        }
        tw += gap * (len - 1);
        return {
            width: tw,
            height: bounds.height
        };
    };
    thi$.getPreferredSize = function() {
        var M = this.def, U = this._local, prefSize = M.prefSize || U.prefSize, bounds, D, nodes, ele1, ele0, width;
        if (!prefSize) {
            bounds = this.getBounds();
            if (!this.isStrict()) {
                nodes = this.view.childNodes;
                ele1 = nodes[nodes.length - 2];
                ele0 = nodes[nodes.length - 1];
                if (ele0.tagName == "SPAN") {
                    width = ele0.offsetLeft + DOM.getTextSize(ele0).width;
                } else {
                    if (ele1.tagName == "SPAN") {
                        width = ele1.offsetLeft + DOM.getTextSize(ele1).width;
                    } else {
                        width = ele1.offsetLeft + ele1.scrollWidth;
                    }
                    D = DOM.getBounds(this.ctrl);
                    width += D.MBP.marginLeft + D.width;
                }
                width += bounds.MBP.BPW;
                prefSize = {
                    width: width,
                    height: bounds.height
                };
            } else {
                if (!U.didLayout && M.autofit === true) {
                    prefSize = _getAutoFitSize.call(this);
                } else {
                    prefSize = {
                        width: bounds.width,
                        height: bounds.height
                    };
                }
            }
        }
        return prefSize;
    };
    thi$.getIconImage = function() {
        return this.def.iconImage || "blank.gif";
    };
    thi$.isIconStateless = function() {
        var M = this.def;
        return M.stateless === true || M.iconStateless === true;
    };
    thi$.setIconImage = function(state) {
        if (!this.icon) {
            return;
        }
        var M = this.def, styles, imgName = !this.isIconStateless() ? [ state & 15, "-" ] : [];
        imgName.push(this.getIconImage());
        imgName = imgName.join("");
        imgName = this.Runtime().imageUrl(imgName);
        if (M.useBgImage !== true) {
            this.icon.src = imgName;
        } else {
            if (M.iconImage) {
                styles = {
                    backgroundImage: 'url("' + imgName + '")',
                    backgroundRepeat: "no-repeat",
                    backgroundPosition: "center"
                };
            } else {}
            DOM.applyStyles(this.icon, styles);
        }
    };
    thi$.paintColorSign = function(signObj) {
        var R = this.Runtime(), color = signObj.color, opacity = signObj.opacity, styles, cview;
        if (!color) {
            return;
        }
        if (js.awt.Color && color instanceof js.awt.Color) {
            color = color.toString("hex");
        }
        if (color.toLowerCase() == "transparent" || color.toLowerCase() == "rgba(0, 0, 0, 0)") {
            styles = {
                "background-color": "rgba(0, 0, 0, 0)",
                "background-image": 'url("' + R.imageUrl("transparent.gif") + '")'
            };
        } else {
            styles = {
                "background-image": "none",
                "background-color": color
            };
        }
        if (Class.isNumber(opacity) && opacity >= 0) {
            if (opacity > 1) {
                opacity = opacity / 100;
            }
            styles["opacity"] = opacity;
        }
        DOM.applyStyles(this.sign, styles);
    };
    thi$.paintShapeSign = function(signObj, extStyles) {
        var R = this.Runtime(), shape = signObj.shape, styles;
        if (!shape) {
            return;
        }
        if (signObj.real !== true) {
            shape = R.imagePath() + shape;
        }
        styles = {
            backgroundImage: "url(" + shape + ")",
            backgroundRepeat: "no-repeat",
            backgroundPosition: "center"
        };
        if (Class.isObject(extStyles)) {
            styles = System.objectCopy(styles, extStyles);
        }
        DOM.applyStyles(this.sign, styles);
    };
    thi$.paintSign = function() {
        var signObj = this.def.sign;
        if (!this.sign || !Class.isObject(signObj)) {
            return;
        }
        switch (signObj.type) {
          case "color":
            this.paintColorSign(signObj);
            break;

          case "shape":
            this.paintShapeSign(signObj);
            break;

          default:
            break;
        }
    };
    thi$.setText = function(text, edit) {
        var M = this.def, ele, evt;
        if (this.label) {
            ele = this.label;
            M.labelText = text;
            this.label.innerHTML = js.lang.String.encodeHtml(text);
        } else {
            if (this.input) {
                ele = this.input;
                M.inputText = text;
                this.input.value = text;
            }
        }
        ele.bounds = undefined;
        if (edit) {
            evt = new Event(edit, {}, this);
            this.notifyContainer("js.awt.event.ItemTextEvent", evt);
        }
    };
    thi$.getText = function() {
        if (this.label) {
            return this.def.labelText;
        } else {
            if (this.input) {
                return this.def.inputText;
            }
        }
        return undefined;
    };
    thi$.isMarkable = function() {
        return this.def.markable === true;
    };
    thi$.isControlled = function() {
        return this.def.controlled === true;
    };
    thi$.isMarked = function() {
        return this._local.marked === true;
    };
    thi$.mark = function(b) {
        var marker = this.marker;
        if (!marker) {
            return;
        }
        b = b || false;
        this._local.marked = b;
        this.def.checked = b;
        if (this.isMarked()) {
            marker.className = DOM.combineClassName(this.className, "marker_4");
        } else {
            marker.className = DOM.combineClassName(this.className, "marker_0");
        }
    };
    thi$.hoverCtrl = function(b) {
        var ctrl = this.ctrl;
        if (!ctrl) {
            return;
        }
        if (b) {
            ctrl.className = DOM.combineClassName(this.className, "ctrl_2");
        } else {
            ctrl.className = DOM.combineClassName(this.className, "ctrl_0");
        }
    };
    thi$.triggerCtrl = function(b) {
        var ctrl = this.ctrl;
        if (!ctrl) {
            return;
        }
        if (b) {
            ctrl.className = DOM.combineClassName(this.className, "ctrl_4");
        } else {
            ctrl.className = DOM.combineClassName(this.className, "ctrl_0");
        }
    };
    thi$.highlightByPattern = function() {
        var heles = this._local.highlights = $super(this);
        return heles;
    }.$override(thi$.highlightByPattern);
    thi$.highlightByMatches = function() {
        var heles = this._local.highlights = $super(this);
        return heles;
    }.$override(thi$.highlightByMatches);
    thi$.getHighlights = function() {
        return this._local.highlights;
    };
    thi$.clearHighlight = function() {
        var U = this._local, heles = U.highlights;
        delete U.highlights;
        if (heles && heles.length > 0) {
            $super(this);
        }
    }.$override(this.clearHighlight);
    thi$.setTipText = function(text, elid) {
        var ele = elid ? this[elid] : null;
        if (ele) {
            if (text) {
                DOM.setAttribute(ele, "title", text);
            } else {
                DOM.removeAttribute(ele, "title");
            }
        } else {
            $super(this, text);
        }
    }.$override(this.setTipText);
    thi$.isMoverSpot = function(el, x, y) {
        return $super(this) && el != this.branch && el != this.marker && el !== this.ctrl;
    }.$override(this.isMoverSpot);
    thi$.onStateChanged = function() {
        $super(this);
        var icon = this.icon, styleClass;
        if (this.isStrict() && icon) {
            this.setIconImage(this.getState());
            styleClass = icon.clazz;
            if (!this.isEnabled()) {
                styleClass += " " + DOM.combineClassName(icon.clazz, "--disabled", "");
            }
            icon.className = styleClass;
        }
    }.$override(this.onStateChanged);
    var _doStrictLayout = function(force) {
        if (this._local.repainted !== true) {
            this.repaint();
        }
        if (!this.isDOMElement() || !this.needLayout(force)) {
            return false;
        }
        var M = this.def, G = {}, bounds = this.getBounds(), MBP = bounds.MBP, xbase = MBP.paddingLeft, ybase = MBP.paddingTop, left = 0, top, space = bounds.innerWidth, layout = M.layout || {}, gap = layout.gap || 0, hAlign = layout.align_x, vAlign = layout.align_y, ctrlAlign = M.ctrlAlign, items = M.items, len = items.length, rects = [], rigid, ele, id, iid, d, r, h, c = 0, iSize, sv, tw = MBP.BPW, autofit = M.autofit === true;
        if (!Class.isNumber(hAlign)) {
            hAlign = .5;
        }
        if (!Class.isNumber(vAlign)) {
            vAlign = .5;
        }
        if (!Class.isNumber(ctrlAlign)) {
            ctrlAlign = .5;
        }
        for (var i = 0; i < len; i++) {
            id = items[i];
            ele = this[id];
            d = G[id] = G[id] || DOM.getBounds(ele);
            MBP = d.MBP;
            iid = id.split(/\d+/g)[0];
            r = {};
            tw += MBP.marginLeft;
            space -= MBP.marginLeft;
            switch (iid) {
              case "label":
              case "input":
                rigid = true;
                if (!autofit) {
                    rigid = iid === "label" ? M.labelRigid === true : M.inputRigid === true;
                }
                if (rigid) {
                    r.width = d.width;
                    space -= r.width;
                } else {
                    r.width = null;
                    c += 1;
                }
                if (d.height == 0) {
                    d.height = bounds.innerHeight;
                }
                break;

              case "icon":
              case "sign":
                r.width = d.width;
                if (iid === "icon") {
                    iSize = M.iconSize || {};
                } else {
                    iSize = M.signSize || {};
                }
                sv = iSize.width;
                if (!isNaN(sv) && sv > 0) {
                    r.width = sv;
                }
                sv = iSize.height;
                if (!isNaN(sv) && sv > 0) {
                    r.height = sv;
                }
                space -= r.width;
                break;

              default:
                if (autofit || M[id + "Rigid"] !== false) {
                    r.width = d.width;
                    space -= r.width;
                } else {
                    r.width = null;
                }
                break;
            }
            if (r.width != null) {
                tw += r.width;
            }
            tw += MBP.marginRight;
            space -= MBP.marginRight;
            r.node = ele;
            rects.push(r);
        }
        tw += gap * (len - 1);
        space -= gap * (len - 1);
        if (c > 1) {
            space = Math.round(space / c);
        }
        if (!autofit && c == 0) {
            left = Math.round(space * hAlign);
        }
        for (i = 0, len = rects.length; i < len; i++) {
            r = rects[i];
            if (r.width == null) {
                r.width = space;
            }
            ele = r.node;
            id = ele.id;
            iid = id.split(/\d+/g)[0];
            d = G[id];
            MBP = d.MBP;
            h = r.height || d.height;
            if (iid == "ctrl" && Class.isNumber(ctrlAlign)) {
                top = ybase + (bounds.innerHeight - h) * ctrlAlign;
            } else {
                if (!Class.isNumber(vAlign)) {
                    vAlign = .5;
                }
                top = ybase + (bounds.innerHeight - h) * vAlign;
            }
            if (iid == "label") {
                ele.style.lineHeight = h + "px";
            }
            DOM.setBounds(r.node, xbase + left, top, r.width, h, 0);
            left += MBP.marginLeft + r.width + MBP.marginRight + gap;
        }
        if (autofit) {
            this.setSize(tw, null, 4);
        }
        return true;
    };
    thi$.doLayout = function() {
        if (!this.isStrict()) {
            var ele = this.label || this.input, box = DOM.getBounds(ele), maxWidth = this.ctrl ? this.ctrl.offsetLeft : this.getBounds().innerWidth, width = maxWidth - ele.offsetLeft;
            width = width < 0 ? 0 : width;
            if (this.input) {
                DOM.setSize(ele, width, undefined);
            } else {
                DOM.setSize(ele, width, undefined);
            }
        } else {
            _doStrictLayout.apply(this, arguments);
        }
    };
    thi$.repaint = function() {
        var U = this._local, rst = false, M = this.def;
        if (!this.isStrict()) {
            if (this.isDOMElement()) {
                this.showDisableCover(!this.isEnabled(), M.disableClassName);
                if (M.useUserDefinedTip) {
                    this.setUserDefinedTip(true, M.tipDef);
                }
                this.setTipText(M.tip);
                rst = true;
            }
        } else {
            rst = this.isVisible() && $super(this);
        }
        U.repainted = rst;
        return rst;
    }.$override(this.repaint);
    thi$.destroy = function() {
        delete this._local.highlights;
        if (this.input) {
            Event.detachEvent(this.input, "focus", 1, this, _onFocus);
        }
        if (this.isStrict() && !this.isStateless()) {
            this.attachEvent("mouseover", 4, this, _onHover);
            this.attachEvent("mouseout", 4, this, _onHover);
            this.attachEvent("mousedown", 4, this, _onmousedown);
            this.attachEvent("mouseup", 4, this, _onmouseup);
        }
        $super(this);
    }.$override(this.destroy);
    thi$.isEditable = function() {
        return this.label && this.def.editable || false;
    };
    thi$.editLabel = function() {
        if (!this.isEditable()) {
            return;
        }
        var editor = new (Class.forName("js.awt.LabelEditor"))(this.label, this);
        MQ.register("js.awt.event.LabelEditorEvent", this, _onedit);
        editor.doEdit();
    };
    var _onedit = function(e) {
        var data = e.getData();
        this.setText(data.text, "edit");
        e.getEventTarget().destroy();
        MQ.cancel("js.awt.event.LabelEditorEvent", this, _onedit);
    };
    thi$.canCloneView = function(itemDef) {
        var items = [];
        if (itemDef.markable === true) {
            items.push("marker");
        }
        if (itemDef.iconImage || itemDef.useBgImage === true) {
            items.push("icon");
        }
        if (typeof itemDef.sign === "object") {
            items.push("sign");
        }
        if (Class.isValid(itemDef.labelText)) {
            items.push("label");
        } else {
            if (Class.isValid(itemDef.inputText)) {
                items.push("input");
            }
        }
        if (itemDef.controlled === true) {
            items.push("ctrl");
        }
        return items.join("") === this.def.items.join("");
    };
    thi$.onSubmit = function(e) {
        var v = this.input.value;
        this.setText(v, "input");
    };
    thi$.validate = function(e) {
        var iptType = this.input.type || "";
        if (iptType.toLowerCase() !== "text") {
            return true;
        }
        var M = this.def, kcode = e.keyCode, isShift = e.shiftKey === true, dataType = M.dataType || "", allowMinus = M.allowMinus === true, value = this.input.value || "", valid = false;
        if (kcode == 8 || kcode == 46 || kcode == 37 || kcode == 39 || kcode == 13) {
            return true;
        }
        switch (dataType.toLowerCase()) {
          case "hex":
            if (!isShift && kcode >= 48 && kcode <= 57 || kcode >= 65 && kcode <= 70 || kcode >= 96 && kcode <= 105) {
                valid = true;
            } else {
                valid = false;
            }
            break;

          case "integer":
            if (allowMinus && (!isShift && kcode == 189 || kcode == 109) && value.length == 0) {
                valid = true;
            } else {
                if (kcode >= 96 && kcode < 106 || !isShift && kcode > 47 && kcode < 60) {
                    valid = true;
                } else {
                    valid = false;
                }
            }
            break;

          case "float":
            if (allowMinus && (!isShift && kcode == 189 || kcode == 109) && value.length == 0) {
                valid = true;
            } else {
                if (kcode >= 96 && kcode < 106 || !isShift && kcode > 47 && kcode < 60 || (kcode == 110 || !isShift && kcode == 190) && value.indexOf(".") == -1) {
                    valid = true;
                } else {
                    valid = false;
                }
            }
            break;

          default:
            valid = true;
            break;
        }
        return valid;
    };
    var _onKeyDown = function(e) {
        if (!this.validate(e)) {
            return false;
        }
        if (e.keyCode === 13) {
            Event.detachEvent(this.input, "blur", 1, this, _onBlur);
            this.onSubmit(e);
        }
        return true;
    };
    var _autoSelect = function(select) {
        var ele = this.input;
        if (!this.isEnabled() || !select && !this.def.autoSelect) {
            return;
        }
        if (Class.isFunction(ele.select)) {
            ele.select();
        } else {
            DOM.autoSelect(ele);
        }
    };
    var _onFocus = function(e) {
        if (!this._local.eventAttached) {
            Event.attachEvent(this.input, "keydown", 0, this, _onKeyDown);
            Event.attachEvent(this.input, "blur", 1, this, _onBlur);
            this._local.eventAttached = true;
        }
        _autoSelect.call(this);
    };
    var _onBlur = function(e) {
        var U = this._local;
        if (U.eventAttached) {
            Event.detachEvent(this.input, "keydown", 0, this, _onKeyDown);
            Event.detachEvent(this.input, "blur", 1, this, _onBlur);
            U.eventAttached = false;
        }
        this.onSubmit(e);
    };
    var _onHover = function(e) {
        if (e.getType() === "mouseover") {
            if (this.contains(e.toElement, true) && !this.isHover()) {
                this.setHover(true);
            }
        } else {
            if (!this.contains(e.toElement, true) && this.isHover()) {
                this.setHover(false);
            }
        }
    };
    var _onmousedown = function(e) {
        this._local.mousedown = true;
        e.setEventTarget(this);
        this.notifyPeer(this.msgType(), e);
    };
    var _onmouseup = function(e) {
        if (this._local.mousedown === true) {
            delete this._local.mousedown;
            if (this.def.toggle === true) {
                this.setTriggered(!this.isTriggered());
            }
            e.setEventTarget(this);
            this.notifyPeer(this.msgType(), e);
        }
    };
    var _createElements = function() {
        var M = this.def, items = M.items, G = {}, bounds, MBP, xbase, ybase, left, top, innerHeight, D, ele, id, iid, viewType, clazz, i, len, buf = this.__buf__, uuid = this.uuid(), strict = this.isStrict();
        if (!strict) {
            bounds = DOM.getBounds(this.view);
            if (!bounds.BBM) {
                DOM.setSize(this.view, undefined, bounds.innerHeight);
                bounds = DOM.getBounds(this.view);
            }
            MBP = bounds.MBP;
            xbase = MBP.paddingLeft;
            ybase = MBP.paddingTop;
            left = xbase;
            innerHeight = bounds.innerHeight;
        }
        var DXP = /\d+/g;
        for (i = 0, len = items.length; i < len; i++) {
            id = items[i];
            iid = id.split(DXP)[0];
            switch (iid) {
              case "icon":
                viewType = M.useBgImage !== true ? "IMG" : "DIV";
                break;

              case "label":
                viewType = "SPAN";
                break;

              case "input":
                viewType = "INPUT";
                break;

              default:
                viewType = "DIV";
                break;
            }
            ele = DOM.createElement(viewType);
            ele.id = id;
            ele.iid = iid;
            clazz = ele.clazz = DOM.combineClassName(this.className, id);
            DOM.setClassName(ele, clazz);
            buf.clear();
            buf.append("position:absolute;display:block;");
            if (!strict) {
                if (!G[iid]) {
                    ele.style.cssText = "display:block;";
                    G[iid] = DOM.getBounds(ele);
                }
                D = G[iid];
                top = ybase + (innerHeight - D.height) * .5;
                buf.append("top:").append(top).append("px;");
                if (iid !== "ctrl") {
                    buf.append("left:").append(left).append("px;");
                    left += D.MBP.marginLeft + D.width + D.MBP.marginRight;
                } else {
                    buf.append("right:").append(bounds.MBP.paddingRight).append("px;");
                }
            }
            if (iid == "label") {
                buf.append("white-space:nowrap;");
            }
            ele.style.cssText = buf.toString();
            ele.uuid = uuid;
            this[id] = ele;
            DOM.setAttribute(ele, "noncomp", "true");
            DOM.appendTo(ele, this.view);
            this.setTipText(M.tip, id);
        }
    };
    var _checkItems = function() {
        var M = this.def, items = M.items;
        if (items.length > 0) {
            return;
        }
        if (this.isMarkable()) {
            items.push("marker");
        }
        if (M.iconImage || M.useBgImage === true) {
            items.push("icon");
        }
        if (M.sign) {
            items.push("sign");
        }
        if (Class.isValid(M.labelText)) {
            items.push("label");
        } else {
            if (Class.isValid(M.inputText)) {
                items.push("input");
            }
        }
        if (this.isControlled()) {
            items.push("ctrl");
        }
    };
    thi$._init = function(def, Runtime, view) {
        if (def == undefined) {
            return;
        }
        def.classType = def.classType || "js.awt.Item";
        def.className = def.className || "jsvm_item";
        $super(this);
        var M = this.def, uuid = this.uuid(), items, nodes, id, i, len, node, clazz, text, ipt, placeholder;
        if (view == undefined) {
            items = M.items = M.items || [];
            _checkItems.call(this);
            _createElements.call(this);
        } else {
            items = M.items = [];
            nodes = this.view.childNodes;
            len = nodes.length;
            for (i = 0; i < len; i++) {
                node = nodes[i];
                id = node.id;
                node.iid = node.iid || id.split(/\d+/g)[0];
                clazz = DOM.combineClassName(this.className, id);
                DOM.setClassName(node, clazz);
                items.push(id);
                node.uuid = uuid;
                this[id] = node;
                this.setTipText(M.tip, id);
            }
        }
        if (this.icon) {
            this.setIconImage(this.isTriggered() ? 4 : 0);
        }
        if (this.sign) {
            this.paintSign();
        }
        ipt = this.input;
        if (this.label || ipt) {
            if (Class.isValid(def.labelText)) {
                text = def.labelText;
            } else {
                if (Class.isValid(def.inputText)) {
                    text = def.inputText;
                } else {
                    text = def.text || def.dname || def.name || "Item";
                }
            }
            this.setText(text);
        }
        if (ipt) {
            ipt.autocomplete = "off";
            if (def.useCipher) {
                ipt.type = "password";
            } else {
                ipt.type = "text";
            }
            if (Class.isValid(def.readOnly)) {
                ipt.readOnly = !!def.readOnly;
            }
            placeholder = def.placeholder;
            if (J$VM.supports.placeholder && Class.isString(placeholder) && placeholder.length > 0) {
                ipt.placeholder = placeholder;
            }
            Event.attachEvent(ipt, "focus", 1, this, _onFocus);
        }
        if (this.isMarkable()) {
            this.mark(def.checked === true);
        }
        if (this.isStrict() && !this.isStateless()) {
            this.attachEvent("mouseover", 4, this, _onHover);
            this.attachEvent("mouseout", 4, this, _onHover);
            this.attachEvent("mousedown", 4, this, _onmousedown);
            this.attachEvent("mouseup", 4, this, _onmouseup);
        }
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Component).$implements(js.awt.Highlighter);

$package("js.awt");

js.awt.FlexibleItem = function(def, Runtime) {
    var CLASS = js.awt.FlexibleItem, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System;
    thi$.isCustomized = function() {
        return this._local.customized;
    };
    thi$.getPreferredSize = function() {
        var U = this._local, prefSize = this.def.prefSize, customComp, nodes, leftmostCtrl, len, overline = false, width = 0, preEle, ele, s, w, bounds, D;
        if (!prefSize) {
            customComp = this.getCustomComponent();
            nodes = this.view.childNodes;
            leftmostCtrl = U.leftmostCtrl || this.ctrl;
            len = nodes.length;
            for (var i = 0; i < len; i++) {
                ele = nodes[i];
                if (leftmostCtrl && ele == leftmostCtrl) {
                    break;
                }
                if (customComp && customComp.view == ele) {
                    if (!overline) {
                        overline = true;
                        width += ele.offsetLeft;
                    }
                    s = customComp.getPreferredSize();
                    width += s.width;
                } else {
                    if (ele.tagName == "SPAN" || ele.tagName == "INPUT") {
                        if (!overline) {
                            overline = true;
                            width += ele.offsetLeft;
                        }
                        if (ele.tagName == "SPAN") {
                            width += DOM.getTextSize(ele).width;
                        } else {
                            width += ele.scrollWidth;
                        }
                    }
                }
            }
            w = U.ctrlsWidth;
            if (!isNaN(w)) {
                width += w;
            }
            if (this.ctrl) {
                D = DOM.getBounds(this.ctrl);
                width += D.MBP.marginLeft + D.width + D.MBP.marginRight;
            }
            bounds = this.getBounds();
            width += bounds.MBP.BPW;
            prefSize = {
                width: width,
                height: bounds.height
            };
        }
        return prefSize;
    }.$override(this.getPreferredSize);
    thi$.isMoverSpot = function(el, x, y) {
        if ($super(this)) {
            var extraCtrls = this._local.extraCtrls, ids = extraCtrls ? extraCtrls.keys() : [], ctrl;
            for (var i = 0, len = ids; i < len; i++) {
                ctrl = this[ids[i]];
                if (el === ctrl) {
                    return false;
                }
            }
            if (this.customComponent && this.customComponent.contains(el, true)) {
                return false;
            }
        }
        return true;
    }.$override(this.isMoverSpot);
    thi$.doLayout = function(force) {
        if (!this.isDOMElement() || !this.needLayout(force)) {
            return false;
        }
        var customComp = this.getCustomComponent(), leftmostCtrl = this._local.leftmostCtrl, ele = customComp && customComp.view ? customComp.view : this.input || this.label, leftEle, rightEle, w, width, bounds, D, MBP, ybase, innerHeight, x, y;
        if (ele) {
            bounds = this.getBounds();
            MBP = bounds.MBP;
            innerHeight = bounds.innerHeight;
            leftEle = ele.previousSibling;
            rightEle = leftmostCtrl || this.ctrl;
            w = rightEle ? rightEle.offsetLeft : bounds.innerWidth;
            if (customComp && customComp.view) {
                ybase = MBP.paddingTop;
                if (leftEle) {
                    D = DOM.getBounds(leftEle);
                    x = leftEle.offsetLeft + D.width + D.MBP.marginRight;
                } else {
                    x = MBP.borderLeftWidth + MBP.paddingRight;
                }
                D = customComp.getBounds();
                y = ybase + (innerHeight - D.height) * .5;
                width = Math.max(w - x, 0);
                customComp.setBounds(x, y, width, undefined);
                customComp.doLayout(true);
            } else {
                width = Math.max(w - ele.offsetLeft, 0);
                if (this.input) {
                    MBP = DOM.MBP(ele);
                    DOM.setSize(ele, width - MBP.marginRight, undefined);
                } else {
                    ele.style.width = width + "px";
                }
            }
        }
        return true;
    }.$override(this.doLayout);
    thi$.destroy = function() {
        delete this._local.leftmostCtrl;
        delete this._local.extraCtrls;
        $super(this);
    }.$override(this.destroy);
    thi$.setCustomComponent = function(comp) {
        if (!comp || !comp.view || !Class.isFunction(comp.getValue)) {
            return;
        }
        var customComponent = this._local.customComponent, ctrl = this._local.leftmostCtrl || this.ctrl, peer;
        if (customComponent) {
            DOM.remove(customComponent.view, true);
        } else {
            this._local.customComponent = comp;
        }
        comp.applyStyles({
            position: "absolute"
        });
        DOM.insertBefore(comp.view, ctrl, this.view);
        comp.setContainer(this);
        var uuid = this.uuid(), items = this.def.items, nodes = comp.view.childNodes || [], node, id, i = 0, len = nodes.length;
        while (i <= len) {
            if (i == len) {
                node = comp.view;
                id = node.id = "custom";
                items.push(id);
                this[id] = node;
            } else {
                node = nodes[i];
                id = node.id;
            }
            node.uuid = uuid;
            node.iid = node.iid || id.split(/\d+/g)[0];
            ++i;
        }
        if (DOM.isDOMElement(comp.view)) {
            this.doLayout(true);
        }
    };
    thi$.getCustomComponent = function() {
        return this._local.customComponent;
    };
    thi$.hitCtrl = function(e) {
        var src = e.srcElement, extraCtrls = this._local.extraCtrls, ids = extraCtrls ? extraCtrls.keys() : undefined, id, ele, ctrl;
        if (!src || !ids || ids.length == 0) {
            return false;
        }
        for (var i = 0, len = ids.length; i < len; i++) {
            id = ids[i];
            ele = this[id];
            if (ele && DOM.contains(ele, src, true)) {
                return true;
            }
        }
        return false;
    };
    var _createExtraCtrls = function() {
        var M = this.def, U = this._local, buf = this.__buf__, ctrls = M.ctrls, len = ctrls.length;
        if (len == 0) {
            return;
        }
        var extraCtrls = U.extraCtrls = new js.util.HashMap(), MBP, bounds = DOM.getBounds(this.view), innerHeight = bounds.innerHeight, ybase = bounds.MBP.paddingTop, anchor = this.ctrl, ctrlsWidth = 0, align = .5, top = 0, right = 0, el, iid, D, w, h, styleW, styleH, ctrl, ctrlId, items = M.items, uuid = this.uuid(), imagePath = this.Runtime().imagePath();
        if (this.ctrl) {
            D = DOM.getBounds(this.ctrl);
            right = bounds.MBP.paddingRight + D.MBP.marginLeft + D.width + D.MBP.marginRight;
        }
        for (var i = len - 1; i >= 0; i--) {
            ctrl = ctrls[i];
            ctrlId = ctrl.id || "ctrl" + i;
            iid = ctrlId.split(/\d+/g)[0];
            if (ctrlId !== "ctrl") {
                extraCtrls.put(ctrlId, ctrl);
                el = DOM.createElement("DIV");
                el.id = ctrlId;
                el.iid = iid;
                el.uuid = uuid;
                el.className = ctrl.className || DOM.combineClassName(this.className, [ "extra", ctrlId ]);
                buf.clear();
                buf.append("position:absolute;");
                if (ctrl.image) {
                    buf.append("background-image: url(").append(imagePath + ctrl.image).append(");").append("background-repeat:no-repeat;background-position:center;");
                }
                if (ctrl.css) {
                    buf.append(ctrl.css).append(";");
                }
                D = DOM.getBounds(el);
                MBP = D.MBP;
                w = ctrl.width;
                if (Class.isNumber(w)) {
                    styleW = MBP.BBM ? w : w - MBP.BPW;
                    buf.append("width:").append(styleW).append("px;");
                }
                h = ctrl.height;
                if (Class.isNumber(h)) {
                    styleH = MBP.BBM ? h : h - MBP.BPH;
                    buf.append("height:").append(styleH).append("px;");
                    align = ctrl.align && !isNaN(ctrl.align) ? ctrl.align : align;
                    top = ybase + (innerHeight - h) * align;
                    buf.append("top:").append(top).append("px;");
                }
                buf.append("right:").append(right).append("px;");
                el.style.cssText = buf.toString();
                DOM.insertBefore(el, anchor, this.view);
                anchor = el;
                U.leftmostCtrl = el;
                items.push(ctrlId);
                this[ctrlId] = el;
                D = DOM.getBounds(el);
                ctrlsWidth = D.MBP.marginLeft + D.width + D.MBP.marginRight;
                right += ctrlsWidth;
            } else {
                System.err.println('The "ctrl" has been reserved for special purpose.');
            }
            U.ctrlsWidth = ctrlsWidth;
        }
    };
    var _createCustomComponent = function() {
        var R = this.Runtime(), cdef = this.def.custom, comp = new (Class.forName(custom.classType))(custom, R);
        this.setCustomComponent(comp);
    };
    var _checkItems = function(def) {
        var U = this._local = this._local || {}, items = def.items, custom = def.custom, customized = false;
        if (Class.isObject(custom) && Class.isString(custom.classType)) {
            customized = U.customized = true;
        }
        if (items.length > 0) {
            return def;
        }
        if (def.markable === true) {
            items.push("marker");
        }
        if (def.iconic !== false) {
            items.push("icon");
        }
        if (!customized) {
            if (Class.isValid(def.inputText)) {
                items.push("input");
            } else {
                items.push("label");
            }
        }
        if (def.controlled === true) {
            items.push("ctrl");
        }
        return def;
    };
    thi$._init = function(def, Runtime, view) {
        if (typeof def !== "object") {
            return;
        }
        def.classType = def.classType || "js.awt.FlexibleItem";
        def.markable = def.markable !== false;
        def.strict = false;
        if (view == undefined) {
            def.items = js.util.LinkedList.$decorate([]);
            _checkItems.call(this, def);
        }
        $super(this, def, Runtime, view);
        if (this.isCustomized()) {
            _createCustomComponent.call(this);
        }
        if (Class.isArray(def.ctrls)) {
            _createExtraCtrls.call(this);
        }
        if (this.isMarkable()) {
            this.mark(def.checked);
        }
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Item);

$package("js.awt");

js.awt.Label = function(def, Runtime) {
    var CLASS = js.awt.Label, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ, StringClass = js.lang.String, textSps = [ "font-family", "font-size", "font-style", "font-weight", "text-decoration", "text-align", "font-weight", "line-height" ];
    thi$.canWordwrap = function() {
        return this.def.wordwrap === true;
    };
    thi$.getPreferredSize = function() {
        var M = this.def, prefSize = M.prefSize, styles, args, textSize, d, w, h;
        if (!prefSize) {
            d = this.getBounds();
            if (!M.isblock && !this.canWordwrap()) {
                styles = DOM.getStyles(this.view, textSps);
                args = [ M.text, styles ];
                textSize = DOM.getStringSize.apply(DOM, args);
                w = textSize.width + d.MBP.BPW;
                h = textSize.height + d.MBP.BPH;
            } else {
                w = d.width;
                h = d.height;
            }
            prefSize = {
                width: w,
                height: h
            };
        }
        return prefSize;
    }.$override(this.getPreferredSize);
    thi$.getText = function() {
        return this.def.text;
    };
    thi$.setText = function(text, encode) {
        text = this.def.text = text || "";
        var M = this.def, view = this.view, v = encode == false ? text : StringClass.encodeHtml(text, undefined, this.canWordwrap()), tmpEle, oTextNode;
        try {
            view.innerHTML = v;
        } catch (e) {
            oTextNode = view.childNodes[0];
            tmpEle = document.createElement("SPAN");
            oTextNode.replaceNode(tmpEle.childNodes[0]);
        }
    };
    thi$.setEMail = function(text) {
        text = this.def.text = text || "";
        var str = StringClass.encodeHtml(text, undefined, this.canWordwrap()), mail = document.createElement("A");
        mail.href = "mailto:" + str;
        this.view.appendChild(mail);
        mail.innerHTML = str;
    };
    thi$.isEditable = function() {
        return this.def.editable || false;
    };
    thi$.setEditable = function(b) {
        b = b || false;
        this.def.editable = b;
        if (b) {
            this.detachEvent("dblclick", 0, this, _onDblClick);
            this.attachEvent("dblclick", 0, this, _onDblClick);
        } else {
            this.detachEvent("dblclick", 0, this, _onDblClick);
        }
    };
    var _onDblClick = function(e) {
        if (!this.isEditable()) {
            return;
        }
        e.cancelBubble();
        var editor = new (Class.forName("js.awt.LabelEditor"))(this.view, this);
        MQ.register("js.awt.event.LabelEditorEvent", this, _onedit);
        editor.doEdit();
    };
    var _onedit = function(e) {
        var data = e.getData();
        this.setText(data.text, undefined, true);
        e.getEventTarget().destroy();
        MQ.cancel("js.awt.event.LabelEditorEvent", this, _onedit);
        this.notifyContainer("js.awt.event.LabelTextEvent", new Event("changed", {}, this));
        this.setChanged();
        this.notifyObservers();
    };
    thi$.highlightAll = function(keyword, mode, highlightClass) {
        var text = this.getText(), can = this.canWordwrap(), kit, pattern, className, newText;
        if (!keyword || !mode || !text) {
            return;
        }
        text = StringClass.encodeHtml(text, undefined, can);
        keyword = StringClass.encodeHtml(keyword, undefined, can);
        kit = Class.forName("js.swt.SearchKit");
        pattern = kit.buildRegExp(keyword, mode);
        if (!pattern) {
            return;
        }
        className = highlightClass;
        if (!className) {
            className = DOM.combineClassName(this.className, "highlight");
        }
        this.view.innerHTML = text.replace(pattern, function(m) {
            return '<span class="' + className + '">' + m + "</span>";
        });
    };
    thi$.highlightMatches = function(matches, highlightClass) {
        var text = this.getText(), can = this.canWordwrap(), className, rpSeg, subStr, i, mCnt, aMatches, vernier = 0;
        if (!Class.isString(text) || text.length == 0) {
            return;
        }
        className = highlightClass || DOM.combineClassName(this.className, "highlight");
        rpSeg = new js.lang.StringBuffer();
        mCnt = matches ? matches.length : 0;
        vernier = 0;
        for (i = 0; i < mCnt; i++) {
            aMatches = matches[i];
            if (aMatches.start > vernier) {
                subStr = text.substring(vernier, aMatches.start);
                subStr = StringClass.encodeHtml(subStr, undefined, can);
                rpSeg.append(subStr);
                subStr = text.substr(aMatches.start, aMatches.length);
                subStr = StringClass.encodeHtml(subStr, undefined, can);
                subStr = '<span class="' + className + '">' + subStr + "</span>";
                rpSeg.append(subStr);
                vernier = aMatches.start + aMatches.length;
            } else {
                if (aMatches.start == vernier) {
                    subStr = text.substr(aMatches.start, aMatches.length);
                    subStr = StringClass.encodeHtml(subStr, undefined, can);
                    subStr = '<span class="' + className + '">' + subStr + "</span>";
                    rpSeg.append(subStr);
                    vernier = aMatches.start + aMatches.length;
                } else {}
            }
        }
        if (vernier <= text.length) {
            subStr = text.substr(vernier);
            subStr = StringClass.encodeHtml(subStr, undefined, can);
            rpSeg.append(subStr);
        }
        this.view.innerHTML = rpSeg.toString();
        rpSeg = null;
    };
    var _hasEnter = function() {
        var text = this.def.text;
        return text && text.length > 0 && text.indexOf("\n") >= 0;
    };
    thi$.doLayout = function() {
        if ($super(this)) {
            if (!this.canWordwrap() && !_hasEnter.call(this)) {
                this.view.style.lineHeight = DOM.innerHeight(this.view) + "px";
            }
            return true;
        }
        return false;
    }.$override(this.doLayout);
    thi$._init = function(def, Runtime) {
        if (def == undefined) {
            return;
        }
        def.classType = def.classType || "js.awt.Label";
        def.className = def.className || "jsvm_label";
        def.wordwrap = def.wordwrap === true;
        def.css = (def.css || "") + "margin:0px;" + (def.wordwrap ? "white-space:normal;" : "white-space:nowrap;");
        def.text = typeof def.text == "string" ? def.text : "Label";
        def.viewType = "SPAN";
        $super(this);
        this.setText(this.def.text, true);
        this.setEditable(this.def.editable);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Component);

$package("js.awt");

js.awt.Icon = function(def, Runtime) {
    var CLASS = js.awt.Icon, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System;
    thi$.setImage = function(image) {
        if (!this.useBgImage && Class.isString(image) && image != this.def.image) {
            this.def.image = image;
            var src = _buildImageSrc.call(this);
            if (src) {
                this.imageView.crs = src;
                this.imageView.src = this.Runtime().imageUrl(src);
            }
        }
    };
    thi$.setToolTipText = function(s) {
        $super(this);
        DOM.setAttribute(this.imageView, "title", s);
    }.$override(this.setToolTipText);
    thi$.onStateChanged = function(e) {
        $super(this);
        var ele = this.imageView, state;
        if (!this.useBgImage) {
            var src = _buildImageSrc.call(this);
            if (src) {
                ele.src = this.Runtime().imageUrl(src);
            }
        } else {
            state = this.getState();
            if (!this.isStateless()) {
                ele.className = ele.clazz + " " + DOM.combineClassName(ele.clazz, state);
            }
        }
    }.$override(this.onStateChanged);
    thi$.doLayout = function() {
        if (this.isDOMElement()) {
            var M = this.def, box = this.getBounds(), MBP = box.MBP, D = DOM.getBounds(this.imageView), align_x = Class.isNumber(M.align_x) ? M.align_x : .5, align_y = Class.isNumber(M.align_y) ? M.align_y : .5, left, top;
            if (this.def.sizefixed !== true) {
                DOM.setBounds(this.imageView, MBP.paddingLeft, MBP.paddingTop, box.innerWidth, box.innerHeight);
            } else {
                left = MBP.paddingLeft + (box.innerWidth - D.width) * align_x, top = MBP.paddingTop + (box.innerHeight - D.height) * align_y;
                DOM.setPosition(this.imageView, left, top, D);
            }
        }
    }.$override(this.doLayout);
    thi$.destroy = function() {
        var imageView = this.imageView;
        delete this.imageView;
        DOM.remove(imageView, true);
        $super(this);
    }.$override(this.destroy);
    var _buildImageSrc = function() {
        var image = this.def.image;
        if (!Class.isString(image) || image.length == 0) {
            image = "blank.gif";
        }
        var imgName = !this.isStateless() ? [ this.getState() & 15, "-" ] : [];
        imgName.push(image);
        return imgName.join("");
    };
    thi$._init = function(def, Runtime) {
        if (def == undefined) {
            return;
        }
        var newDef = System.objectCopy(def, CLASS.DEFAULTDEF(), true, true);
        newDef.className = newDef.className || "jsvm_icon";
        var tip = newDef.tip;
        delete newDef.tip;
        System.objectCopy(newDef, def, true, true);
        $super(this);
        var useBgImage = this.useBgImage = def.useBgImage === true, viewType = useBgImage ? "DIV" : "IMG", image = this.imageView = DOM.createElement(viewType), buf = this.__buf__.clear();
        image.className = image.clazz = DOM.combineClassName(this.className, "img");
        image.style.cssText = "position:absolute;margin:0px;";
        if (!useBgImage) {
            var src = _buildImageSrc.call(this);
            image.src = this.Runtime().imageUrl(src);
            image.crs = src;
        }
        DOM.appendTo(image, this.view);
        if (Class.isString(tip) && tip.length > 0) {
            this.setToolTipText(tip);
        }
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Component);

js.awt.Icon.DEFAULTDEF = function() {
    return {
        classType: "js.awt.Icon",
        rigid_w: true,
        rigid_h: true,
        align_x: .5,
        align_x: .5
    };
};

$package("js.awt");

js.awt.Button = function(def, Runtime) {
    var CLASS = js.awt.Button, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System;
    thi$.getMsgType = function() {
        return "js.awt.event.ButtonEvent";
    };
    thi$.isIconStateless = function() {
        var M = this.def;
        return M.stateless === true || M.iconStateless === true;
    };
    thi$.setIconImage = function(state) {
        if (!this.icon) {
            return;
        }
        var M = this.def, styles, imgName = !this.isIconStateless() ? [ state & 15, "-" ] : [];
        imgName.push(this.getIconImage());
        imgName = imgName.join("");
        this.icon.crs = imgName;
        this.icon.src = this.Runtime().imageUrl(imgName);
    };
    thi$.getIconImage = function() {
        return this.def.iconImage || "blank.gif";
    };
    thi$.setText = function(text) {
        if (this.label) {
            this.def.labelText = text;
            this.label.innerHTML = js.lang.String.encodeHtml(text);
        }
    };
    thi$.getText = function() {
        return this.label ? this.def.labelText : undefined;
    };
    thi$.isMarkable = function() {
        return this.def.markable === true;
    };
    thi$.isMarked = function() {
        return this.def.marked === true;
    };
    thi$.mark = function(b, e) {
        var marker = this.marker, exts;
        if (!marker) {
            return;
        }
        b = b || false;
        this.def.marked = b;
        exts = this.isMarked() ? [ "marker", "marker_4" ] : [ "marker", "marker_0" ];
        marker.className = DOM.combineClassName(this.className, exts);
    };
    thi$.isOnMousedown = function() {
        return this._local.mousedown === true;
    };
    thi$.setTipText = function(s) {
        $super(this);
        if (this.icon) {
            DOM.setAttribute(this.icon, "title", s);
        }
        if (this.label) {
            DOM.setAttribute(this.label, "title", s);
        }
    }.$override(this.setTipText);
    thi$.repaint = function() {
        if ($super(this)) {
            return true;
        }
        return false;
    }.$override(this.repaint);
    thi$.doLayout = function(force) {
        if ($super(this)) {
            var M = this.def, layout = M.layout, G0 = {}, B = this.getBounds(), BBM = B.BBM, MBP = B.MBP, innerWidth = B.innerWidth, innerHeight = B.innerHeight, xbase = MBP.paddingLeft, ybase = MBP.paddingTop, align_x = layout.align_x, align_y = layout.align_y, items = M.items, ele, i, len, cwidth = 0, D, buf = this.__buf__, left, top, uwidth;
            for (i = 0, len = items.length; i < len; i++) {
                ele = this[items[i]];
                D = G0[ele.iid] = DOM.getBounds(ele);
                if (ele.iid == "label") {
                    cwidth += ele.scrollWidth;
                } else {
                    cwidth += ele.offsetWidth + D.MBP.marginRight;
                }
            }
            cwidth = cwidth > innerWidth ? innerWidth : cwidth;
            left = xbase + (innerWidth - cwidth) * align_x;
            for (i = 0, len = items.length; i < len; i++) {
                ele = this[items[i]];
                D = G0[ele.iid];
                top = ybase + (innerHeight - D.height) * align_y;
                buf.clear().append(ele.style.cssText).append(";left:").append(left).append("px;").append("top:").append(top).append("px;");
                if (ele.iid === "label") {
                    buf.append("width:").append(cwidth + 2).append("px;").append("white-space:nowrap;overflow:hidden;").append("text-overflow:ellipsis;");
                }
                ele.style.cssText = buf.toString();
                uwidth = D.width + D.MBP.marginRight;
                left += uwidth;
                cwidth -= uwidth;
            }
            _adjustEffectLayer.call(this);
            return true;
        }
        return false;
    }.$override(this.doLayout);
    thi$.onStateChanged = function() {
        $super(this);
        var icon = this.icon, styleClass;
        if (icon) {
            this.setIconImage(this.getState());
            styleClass = icon.clazz;
            if (!this.isEnabled()) {
                styleClass += " " + DOM.combineClassName(icon.clazz, "--disabled", "");
            }
            icon.className = styleClass;
        }
    }.$override(this.onStateChanged);
    thi$.setEnabled = function(b) {
        if (!b) {
            _showEffectLayer.call(this, "normal");
        }
        $super(this);
    }.$override(this.setEnabled);
    var _getEffectStyleClass = function(style) {
        style = style || "normal";
        var tclazz = this._local.effectClass;
        if (tclazz) {
            tclazz = DOM.combineClassName(tclazz, style);
        } else {
            tclazz = DOM.combineClassName("jsvm_btnEffect", style);
            if (this.className) {
                style = "effect" + "_" + style;
                tclazz += " " + DOM.combineClassName(this.className, style);
            }
        }
        return tclazz;
    };
    var _showEffectLayer = function(style) {
        if (!this._effectLayer || !this.isEnabled()) {
            return;
        }
        var M = this.def, className;
        this._effectLayer.className = _getEffectStyleClass.call(this, style);
        if (this.isStyleByState()) {
            var state;
            switch (style) {
              case "trigger":
                state = 4;
                break;

              case "hover":
                state = 2;
                break;

              default:
                break;
            }
            if (!isNaN(state) && state !== this.getState()) {
                className = DOM.stateClassName(M.className, state);
                DOM.setClassName(this.view, className, M.classPrefix);
            }
        }
    };
    var _createEffectLayer = function() {
        var layer = this._effectLayer = DOM.createElement("DIV");
        layer.uuid = this.uuid();
        layer.className = _getEffectStyleClass.call(this, "normal");
        layer.style.cssText = "position:absolute;left:0px;top:0px;";
        this.view.appendChild(layer);
    };
    var _adjustEffectLayer = function() {
        if (this._effectLayer) {
            DOM.setSize(this._effectLayer, this.view.clientWidth, this.view.clientHeight);
        }
    };
    thi$.onmousedown = function(e) {
        e.cancelBubble();
        _showEffectLayer.call(this, "trigger");
        this._local.mousedown = true;
        this.onHover(false, e.getType());
        e.setEventTarget(this);
        this.notifyPeer(this.getMsgType(), e);
    }.$override(this.onmousedown);
    thi$.dispatchClick = function(e) {};
    thi$.onmouseup = function(e) {
        e.cancelBubble();
        if (this._local.mousedown === true) {
            delete this._local.mousedown;
            _showEffectLayer.call(this, this.isHover() ? "hover" : "normal");
            if (this.def.toggle === true) {
                this.setTriggered(!this.isTriggered());
            }
            this.dispatchClick(e);
            e.setEventTarget(this);
            this.notifyPeer(this.getMsgType(), e);
        }
    }.$override(this.onmouseup);
    thi$.onHover = function(b, eType) {};
    thi$.onmouseover = function(e) {
        e.cancelBubble();
        if (this.contains(e.toElement, true) && !this.isHover()) {
            this.setHover(true);
            _showEffectLayer.call(this, "hover");
            this.onHover(true, e.getType());
        }
    }.$override(this.onmouseover);
    thi$.onmouseout = function(e) {
        e.cancelBubble();
        if (!this.contains(e.toElement, true) && this.isHover()) {
            delete this._local.mousedown;
            this.setHover(false);
            _showEffectLayer.call(this, !this.isTriggered() ? "normal" : "trigger");
            this.onHover(false, e.getType());
        }
    }.$override(this.onmouseout);
    var _createElements = function() {
        var className = this.className, items = this.def.items, ele, id, iid, clazz, viewType, i, len;
        for (i = 0, len = items.length; i < len; i++) {
            id = items[i];
            iid = id.split(/\d+/g)[0];
            switch (iid) {
              case "icon":
                viewType = "IMG";
                break;

              case "label":
                viewType = "SPAN";
                break;

              default:
                viewType = "DIV";
                break;
            }
            ele = DOM.createElement(viewType);
            ele.id = id;
            ele.iid = iid;
            clazz = ele.clazz = DOM.combineClassName(className, id);
            DOM.setClassName(ele, clazz);
            ele.style.position = "absolute";
            ele.style.display = "block";
            DOM.appendTo(ele, this.view);
        }
    };
    var _checkItems = function() {
        var M = this.def, items = M.items = M.items || [];
        if (items.length == 0) {
            if (this.isMarkable()) {
                items.push("marker");
            }
            if (M.iconImage) {
                items.push("icon");
            }
            if (M.labelText) {
                items.push("label");
            }
        }
    };
    thi$.destroy = function() {
        DOM.remove(this._effectLayer, true);
        delete this._effectLayer;
        $super(this);
    }.$override(this.destroy);
    thi$._init = function(def, Runtime, view) {
        if (typeof def !== "object") {
            return;
        }
        def.classType = def.classType || "js.awt.Button";
        def.className = def.className || "jsvm_button";
        $super(this, def, Runtime, view);
        var layout = def.layout = def.layout || {};
        layout.align_x = Class.isNumber(layout.align_x) ? layout.align_x : .5;
        layout.align_y = Class.isNumber(layout.align_y) ? layout.align_y : .5;
        if (!Class.isHtmlElement(view)) {
            _checkItems.call(this);
            _createElements.call(this);
        }
        def.items = [];
        var M = this.def, uuid = this.uuid(), nodes = this.view.childNodes, id, i, len, node;
        for (i = 0, len = nodes.length; i < len; i++) {
            node = nodes[i];
            id = node.id;
            node.uuid = uuid;
            node.iid = node.iid || id.split(/\d+/g)[0];
            def.items.push(id);
            this[id] = node;
        }
        if (this.icon) {
            this.setIconImage(this.isTriggered() ? 4 : this.isEnabled() ? 0 : 1);
        }
        if (this.label) {
            this.setText(M.labelText || M.text || M.name || "Button");
        }
        if (M.effect) {
            this._local.effectClass = M.effectClass;
            _createEffectLayer.call(this);
        }
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Component);

js.awt.Button.eventDispatcher = function(e) {
    var Class = js.lang.Class, System = J$VM.System, target, func;
    switch (e.getType()) {
      case "mousedown":
        if (Class.isFunction(this.activate)) {
            this.activate();
        }
        break;

      case "mouseup":
      case "message":
        target = e.getEventTarget();
        func = this["on" + target.id] || this.onbtnDispatcher;
        if (Class.isFunction(func)) {
            func.call(this, target, e);
        } else {
            System.err.println("Can not found function for button " + target.id);
        }
        break;

      default:
        break;
    }
};

$package("js.awt");

$import("js.awt.Button");

js.awt.CheckBox = function(def, Runtime, view) {
    var CLASS = js.awt.CheckBox, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System;
    thi$.isWholeTrigger = function() {
        return this.def.wholeTrigger !== false;
    };
    thi$.dispatchClick = function(e) {
        var marker, src;
        if (this.isWholeTrigger()) {
            this.mark(!this.isMarked(), e);
        } else {
            marker = this.marker;
            src = e.srcElement;
            if (marker && src && marker.contains(src, true)) {
                this.mark(!this.isMarked(), e);
            }
        }
    }.$override(this.dispatchClick);
    thi$.destroy = function(e) {
        $super(this);
    }.$override(this.destroy);
    thi$._init = function(def, Runtime, view) {
        if (typeof def !== "object") {
            return;
        }
        def.classType = def.classType || "js.awt.CheckBox";
        def.className = def.className || "jsvm_checkbox";
        def.css = def.css || "position:absolute;";
        def.markable = true;
        def.marked = !!def.marked;
        var layout = def.layout = def.layout || {};
        layout.align_x = Class.isNumber(layout.align_x) ? layout.align_x : 0;
        layout.align_y = Class.isNumber(layout.align_y) ? layout.align_y : .5;
        $super(this, def, Runtime, view);
        this.mark(def.marked);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Button);

$package("js.awt");

$import("js.awt.Button");

js.awt.RadioButton = function(def, Runtime) {
    var CLASS = js.awt.RadioButton, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System;
    thi$.mark = function(b) {
        $super(this);
        if (this.isMarked()) {
            var group = this.getGroup(), i, len, item;
            for (i = 0, len = group.length; i < len; i++) {
                item = group[i];
                if (item !== this) {
                    item.mark(false);
                }
            }
        }
    }.$override(this.mark);
    thi$.notifyPeer = function(msgID, e) {
        if (e.getType() === "mouseup") {
            if (!this.isMarked()) {
                this.mark(!this.isMarked());
            }
        }
        $super(this);
    }.$override(this.notifyPeer);
    thi$.dispatchClick = function(e) {
        if (!this.isMarked()) {
            this.mark(!this.isMarked(), e);
        }
    }.$override(this.dispatchClick);
    thi$.getGroup = function() {
        return CLASS.groups[this.def.group];
    };
    thi$.destroy = function() {
        var group = this.getGroup();
        group.remove(this);
        if (group.length === 0) {
            delete CLASS.groups[this.def.group];
        }
        $super(this);
    }.$override(this.destroy);
    thi$._init = function(def, Runtime, view) {
        if (typeof def !== "object") {
            return;
        }
        def.classType = def.classType || "js.awt.RadioButton";
        def.className = def.className || "jsvm_radio";
        def.css = def.css || "position:absolute;";
        def.markable = true;
        def.marked = !!def.marked;
        def.group = def.group || js.lang.Math.uuid();
        var layout = def.layout = def.layout || {};
        layout.align_x = Class.isNumber(layout.align_x) ? layout.align_x : 0;
        layout.align_y = Class.isNumber(layout.align_y) ? layout.align_y : .5;
        $super(this, def, Runtime, view);
        CLASS.groups = CLASS.groups || {};
        var group = CLASS.groups[def.group];
        if (!group) {
            group = CLASS.groups[def.group] = js.util.LinkedList.$decorate([]);
        }
        group.push(this);
        this.mark(def.marked);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Button);

$package("js.awt");

js.awt.Bidirectional = function() {
    var CLASS = js.awt.Bidirectional, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        return;
    }
    CLASS.__defined__ = true;
    CLASS.HORIZONTAL = 0;
    CLASS.VERTICAL = 1;
    var Class = js.lang.Class;
    thi$.isHorizontal = function() {
        return this.def.direction === CLASS.HORIZONTAL;
    };
    thi$.isVertical = function() {
        return !this.isHorizontal();
    };
    thi$.getStart = function(comp) {
        comp = comp || this;
        return this.isHorizontal() ? comp.getX() : comp.getY();
    };
    thi$.getPStart = function(comp) {
        comp = comp || this;
        return this.isHorizontal() ? comp.getY() : comp.getX();
    };
    thi$.getUPosition = function(comp) {
        comp = comp || this;
        var p = comp.getPosition();
        if (this.isHorizontal()) {
            p.start = p.x;
            p.pstart = p.y;
        } else {
            p.start = p.y;
            p.pstart = p.x;
        }
        return p;
    };
    thi$.setUPosition = function(start, pstart, fire, comp) {
        comp = comp || this;
        if (this.isHorizontal()) {
            comp.setPosition(start, pstart, fire);
        } else {
            comp.setPosition(pstart, start, fire);
        }
    };
    thi$.getMeasure = function(comp) {
        comp = comp || this;
        return this.isHorizontal() ? comp.getWidth() : comp.getHeight();
    };
    thi$.getPMeasure = function(comp) {
        comp = comp || this;
        return this.isHorizontal() ? comp.getHeight() : comp.getWidth();
    };
    thi$.getUSize = function(comp) {
        comp = comp || this;
        var d = comp.getSize();
        if (this.isHorizontal()) {
            d.measure = d.width;
            d.pmeasure = d.height;
        } else {
            d.measure = d.height;
            d.pmeasure = d.width;
        }
        return d;
    };
    thi$.setUSize = function(measure, pmeasure, fire, comp) {
        comp = comp || this;
        if (this.isHorizontal()) {
            comp.setSize(measure, pmeasure, fire);
        } else {
            comp.setSize(pmeasure, measure, fire);
        }
    };
    thi$.getUBounds = function(comp) {
        comp = comp || this;
        var b = comp.getBounds(), MBP = b.MBP;
        if (this.isHorizontal()) {
            b.measure = b.width;
            b.innerMeasure = b.innerWidth;
            b.pmeasure = b.height;
            b.innerPMeasure = b.innerHeight;
            MBP.borderM0 = MBP.borderLeftWidth;
            MBP.borderM1 = MBP.borderRightWidth;
            MBP.borderPM0 = MBP.borderTopWidth;
            MBP.borderPM1 = MBP.borderBottomWidth;
            MBP.BM = MBP.BW;
        } else {
            b.measure = b.height;
            b.innerMeasure = b.innerHeight;
            b.pmeasure = b.width;
            b.innerPMeasure = b.innerWidth;
            MBP.borderM0 = MBP.borderTopWidth;
            MBP.borderM1 = MBP.borderBottomWidth;
            MBP.borderPM0 = MBP.borderLeftWidth;
            MBP.borderPM1 = MBP.borderRightWidth;
            MBP.BM = MBP.BH;
        }
        return b;
    };
    thi$.setUBounds = function(start, pstart, measure, pmeasure, fire, comp) {
        comp = comp || this;
        if (this.isHorizontal()) {
            comp.setBounds(start, pstart, measure, pmeasure, fire);
        } else {
            comp.setBounds(pstart, start, pmeasure, measure, fire);
        }
    };
    thi$.setUEndStyle = function(v, comp) {
        comp = comp || this;
        if (this.isHorizontal()) {
            comp.view.style.right = v + "px";
        } else {
            comp.view.style.bottom = v + "px";
        }
    };
    thi$.setUMinimumSize = function(measure, pmeasure, comp) {
        comp = comp || this;
        if (this.isHorizontal()) {
            comp.setMinimumSize(measure, pmeasure);
        } else {
            comp.setMinimumSize(pmeasure, measure);
        }
    };
};

$package("js.awt");

$import("js.awt.Bidirectional");

$import("js.util.Counter");

js.awt.Spinner = function(def, Runtime) {
    var CLASS = js.awt.Spinner, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ, BASE = 5e4;
    thi$.getMsgType = function() {
        return "js.awt.event.SpinnerEvent";
    };
    thi$.setRange = function(lower, upper) {
        var M = this.def;
        lower = Class.isNumber(lower) ? lower : Class.isNumber(M.lower) ? M.lower : 0;
        upper = Class.isNumber(upper) ? upper : Class.isNumber(M.upper) ? M.upper : 99;
        if (lower < upper) {
            M.lower = lower;
            M.upper = upper;
        } else {
            M.lower = upper;
            M.upper = lower;
        }
        this.setCount(M.upper - M.lower + 1);
    };
    thi$.getRange = function() {
        var M = this.def;
        return {
            lower: M.lower,
            upper: M.upper
        };
    };
    thi$.setPos = function(index) {
        index = Class.isNumber(index) ? index : 0;
        $super(this, index);
    }.$override(this.setPos);
    thi$.getValue = function() {
        return this.def.lower + this.getPos();
    };
    thi$.setCyclic = function(b) {
        this.def.cyclic = b || false;
    };
    thi$.isCyclic = function() {
        return this.def.cyclic;
    };
    thi$.doLayout = function(force) {
        if ($super(this)) {
            _layout.call(this, this.getUBounds());
            return true;
        }
        return false;
    }.$override(this.doLayout);
    var _layout = function(D) {
        var ctrl0 = this.ctrl0, ctrl1 = this.ctrl1, w;
        this.setUBounds(0, 0, undefined, D.innerPMeasure, null, ctrl0);
        w = this.getMeasure(ctrl0);
        this.offset0 = D.MBP.borderM0 + w;
        this.setUBounds(null, 0, undefined, D.innerPMeasure, null, ctrl1);
        this.setUEndStyle(0, ctrl1);
        this.offset1 = 0 - D.MBP.borderM1 - this.getMeasure(ctrl1);
        if (this.def.miniSize == undefined) {
            w += this.getMeasure(ctrl1);
            this.setUMinimumSize(D.MBP.BM + 1 + w, D.pmeasure);
        }
    };
    var _createElements = function() {
        var ctrl0, ctrl1, R = this.Runtime();
        this.cache = {};
        this.diff = BASE;
        ctrl0 = new js.awt.Component({
            className: this.className + "_ctrl0",
            id: "ctrl0",
            css: "position:absolute;overflow:hidden;"
        }, R);
        this.addComponent(ctrl0);
        this.cache[ctrl0.uuid()] = ctrl0;
        ctrl1 = new js.awt.Component({
            className: this.className + "_ctrl1",
            id: "ctrl1",
            css: "position:absolute;overflow:hidden;"
        }, R);
        this.addComponent(ctrl1);
        this.cache[ctrl1.uuid()] = ctrl1;
        this.attachEvent("mouseover", 0, this, _onmouseover);
        this.attachEvent("mouseout", 0, this, _onmouseover);
        this.attachEvent("mousedown", 0, this, _onmousedown);
        this.attachEvent("mouseup", 0, this, _onmouseup);
    };
    var _onmouseover = function(e) {
        var from = e.fromElement, to = e.toElement, fid = from ? from.uuid : undefined, tid = to ? to.uuid : undefined, fobj, tobj, cache = this.cache;
        if (fid != tid) {
            fobj = cache[fid];
            tobj = cache[tid];
            if (fobj && fobj.isHover() && fobj.isEnabled()) {
                fobj.setHover(false);
                _incCounter.$clearTimer(this.timer);
            }
            if (tobj && !tobj.isHover() && tobj.isEnabled()) {
                tobj.setHover(true);
            }
        }
    };
    var _onmousedown = function(e) {
        this.diff = BASE;
        _incCounter.$clearTimer(this.timer);
        var src = e.srcElement, eid = src ? src.uuid : undefined, eobj = this.cache[eid];
        if (eobj && eobj.isEnabled()) {
            this.timer = _incCounter.$delay(this, this.def.accel.delay, eobj);
        }
    };
    var _onmouseup = function(e) {
        _incCounter.$clearTimer(this.timer);
        var src = e.srcElement, eid = src ? src.uuid : undefined, eobj = this.cache[eid];
        if (eobj && eobj.isEnabled()) {
            _incCounter.call(this, eobj, false);
        }
    };
    var _incCounter = function(ctrl, repeat) {
        var accel = this.def.accel, type, cyclic = this.isCyclic(), count = this.getCount(), p = this.getPos();
        if (ctrl === this.ctrl0) {
            if (this.isHorizontal()) {
                p = _decrease.call(this, cyclic, accel.inc, count, p);
                type = Class.isNumber(p) ? "decrease" : null;
            } else {
                p = _increase.call(this, cyclic, accel.inc, count, p);
                type = Class.isNumber(p) ? "increase" : null;
            }
        } else {
            if (ctrl === this.ctrl1) {
                if (this.isHorizontal()) {
                    p = _increase.call(this, cyclic, accel.inc, count, p);
                    type = Class.isNumber(p) ? "increase" : null;
                } else {
                    p = _decrease.call(this, cyclic, accel.inc, count, p);
                    type = Class.isNumber(p) ? "decrease" : null;
                }
            }
        }
        if (type) {
            if (repeat !== false) {
                this.notifyPeer(this.getMsgType(), new Event(type, {
                    pos: p,
                    count: count,
                    diff: this.diff - BASE
                }, this), true);
                this.timer = _incCounter.$delay(this, accel.repeat, ctrl);
            } else {
                this.notifyPeer(this.getMsgType(), new Event("changed", {
                    pos: p,
                    count: count,
                    diff: this.diff - BASE
                }, this), true);
            }
        }
    };
    var _increase = function(cyclic, d, count, p) {
        if (cyclic || !cyclic && p < count - 1) {
            this.diff++;
            return this.increase(d);
        }
        return null;
    };
    var _decrease = function(cyclic, d, count, p) {
        if (cyclic || !cyclic && p > 0) {
            this.diff--;
            return this.decrease(d);
        }
        return null;
    };
    thi$.destroy = function() {
        delete this.cache;
        $super(this);
    }.$override(this.destroy);
    thi$._init = function(def, Runtime) {
        if (def == undefined) {
            return;
        }
        def.classType = def.classType || "js.awt.Spinner";
        def.className = def.className || "jsvm_vspinner";
        def.direction = Class.isNumber(def.direction) ? def.direction : 1;
        def.cyclic = def.cyclic || false;
        def.stateless = true;
        $super(this);
        _createElements.call(this);
        var M = this.def;
        this.setRange(M.lower, M.upper);
        this.setPos(M.index);
        var accel = M.accel = M.accel || {};
        accel.delay = Class.isNumber(accel.delay) ? accel.delay : 350;
        accel.repeat = Class.isNumber(accel.repeat) ? accel.repeat : 150;
        accel.inc = Class.isNumber(accel.inc) ? accel.inc : 1;
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Container).$implements(js.util.Counter, js.awt.Bidirectional);

$package("js.awt");

js.awt.FieldSpinner = function(def, Runtime) {
    var CLASS = js.awt.FieldSpinner, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, System = J$VM.System, MQ = J$VM.MQ;
    thi$.getMsgType = function() {
        return "js.awt.event.FieldEvent";
    };
    thi$.setFormater = function(formater) {
        this.formater = formater;
    };
    thi$.getFormater = function() {
        return this.formater;
    };
    thi$.setPos = function(index) {
        this.spinner.setPos(index);
        _setText.call(this, this.spinner.getValue());
    };
    thi$.getPos = function() {
        return this.spinner.getPos();
    };
    thi$.initialize = function(lower, upper, index) {
        this.spinner.setRange(lower, upper);
        this.setPos(index);
    };
    var _setText = function(value) {
        var formater = this.getFormater(), label = this.label;
        if (formater) {
            label.setText(formater.format(value));
        } else {
            label.setText(value + "");
        }
    };
    var _onSpinnerEvent = function(e) {
        var data = e.getData();
        _setText.call(this, this.spinner.getValue());
        if (e.getType() == "changed") {
            e.setEventTarget(this);
            this.notifyPeer(this.getMsgType(), e);
        }
    };
    var _createElements = function(def) {
        var R = this.Runtime(), label, spinner;
        label = new js.awt.Label({
            className: J$VM.DOM.combineClassName(def.className, "label"),
            id: "label",
            rigid_w: false,
            editable: def.editable
        }, R);
        this.addComponent(label);
        spinner = new (Class.forName("js.awt.Spinner"))({
            id: "spinner",
            rigid_h: false,
            cyclic: def.cyclic,
            accel: def.accel,
            direction: 1
        }, R);
        this.addComponent(spinner);
        this.initialize(def.lower, def.upper, def.index);
        spinner.setPeerComponent(this);
        MQ.register(spinner.getMsgType(), this, _onSpinnerEvent);
    };
    thi$._init = function(def, Runtime) {
        if (def == undefined) {
            return;
        }
        def.classType = def.classType || "js.awt.FieldSpinner";
        def.className = def.className || "jsvm_fieldspinner";
        $super(this);
        _createElements.call(this, def);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.HBox);

$package("js.awt");

$import("js.awt.FlexibleItem");

js.awt.MenuItem = function(def, Runtime, menu, view) {
    var CLASS = js.awt.MenuItem, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System;
    thi$.menuContainer = function() {
        return this.container;
    };
    thi$.rootMenu = function() {
        return this.def.beInMenu ? this.menuContainer().rootLayer() : null;
    };
    thi$.subMenu = function() {
        return this._local.submenu;
    };
    thi$.setNodes = function(nodes) {
        var subMenu;
        if (Class.isArray(nodes)) {
            this.def.nodes = nodes;
            subMenu = this.subMenu();
            if (subMenu) {
                subMenu.hide();
                subMenu = this._local.submenu = null;
            }
        }
    };
    thi$.hasNodes = function() {
        var M = this.def, nodes = M.nodes;
        return Class.isArray(nodes) && nodes.length > 0 || M.dynamic === true;
    };
    thi$.showSubMenu = function(nodes, force) {
        var M = this.def, U = this._local, root = this.rootMenu(), menu = this.menuContainer(), subMenu = this.subMenu(), thickness;
        if (force === true && subMenu && Class.isArray(nodes)) {
            subMenu.hide();
            subMenu = U.submenu = null;
        }
        if (!subMenu && Class.isArray(nodes)) {
            subMenu = U.submenu = _createSubMenu.call(this, nodes, M.menuClass);
        }
        if (subMenu && !subMenu.isShown()) {
            if (root && Class.isFunction(root.rectifySubMenu)) {
                subMenu = root.rectifySubMenu(this, subMenu);
            }
            thickness = M.beInMenu ? menu.getWidth() - 8 : this.getHeight();
            subMenu.showBy(this.view, M.beInMenu, thickness);
        }
    };
    thi$.onStateChanged = function() {
        $super(this);
        if (this.isDOMElement() && this.isVisible() && this.isHover()) {
            var M = this.def, menu = this.menuContainer(), active = menu.active, root, subMenu, timeout, nodes;
            if (active && active != this) {
                subMenu = active.subMenu();
                if (subMenu && subMenu.isShown()) {
                    subMenu.hide("hide", this);
                    active.setHover(false);
                }
            }
            if (this.isEnabled()) {
                subMenu = this.subMenu();
                if (M.dynamic === true && (!subMenu || M.changeable === true)) {
                    if (typeof this.loadMenu == "function") {
                        timeout = !isNaN(M.timeout) ? M.timeout : 500;
                        this.loadMenu.$clearTimer();
                        this.loadMenu.$delay(this, timeout);
                    } else {
                        root = this.rootMenu();
                        nodes = root.getSubMenuNodes(this);
                        if (nodes) {
                            this.showSubMenu(nodes, true);
                        }
                    }
                } else {
                    this.showSubMenu(M.nodes);
                }
            }
        }
    }.$override(this.onStateChanged);
    thi$.getPeerComponent = function() {
        var peer;
        if (this.def.beInMenu) {
            peer = this.menuContainer().rootLayer().getPeerComponent();
        } else {
            peer = $super(this);
        }
        return peer;
    }.$override(this.getPeerComponent);
    thi$.doLayout = function() {
        if (this.isCustomized()) {
            var customComp = this.getCustomComponent(), peer = customComp.getPeerComponent();
            if (!peer && DOM.isDOMElement(customComp.view)) {
                customComp.setPeerComponent(this.getPeerComponent());
            }
        }
        $super(this);
    }.$override(this.doLayout);
    var _onInput = function(e) {
        e.cancelBubble();
    };
    var _createSubMenu = function(nodes, mClass) {
        var M = this.def, menuC = this.menuContainer(), menuD = menuC.def, mClassType = M.beInMenu ? menuD.classType : M.mClassType || "js.awt.Menu", menuShadow = M.beInMenu ? menuD.shadow : M.menuShadow !== false, menudef = {
            id: this.def.id,
            classType: mClassType,
            className: mClass || menuD.className,
            nodes: nodes,
            shadow: menuShadow,
            PMFlag: 7,
            isfloating: true
        }, pmenu, root;
        if (M.beInMenu) {
            pmenu = menuC.parentMenu();
            root = menuC.rootLayer();
        }
        if (menuD.hasOwnProperty("iconStateless")) {
            menudef.iconStateless = menuD.iconStateless;
        }
        if (menuD.hasOwnProperty("useBgImage")) {
            menudef.useBgImage = menuD.useBgImage;
        }
        var submenu = new (Class.forName(mClassType))(menudef, this.Runtime(), pmenu, root);
        if (!M.beInMenu) {
            submenu.setPeerComponent(this.getPeerComponent());
        }
        return submenu;
    };
    thi$.destroy = function() {
        if (this._local.submenu) {
            this._local.submenu.destroy();
        }
        delete this._local.submenu;
        $super(this);
    }.$override(this.destroy);
    thi$._init = function(def, Runtime, menu, view) {
        if (def == undefined) {
            return;
        }
        def.classType = def.classType || "js.awt.MenuItem";
        def.className = DOM.combineClassName(menu.def.className || menu.className, "item");
        def.beInMenu = def.beInMenu !== false;
        def.markable = def.markable !== false;
        def.controlled = def.beInMenu && (Class.isArray(def.nodes) || def.dynamic === true);
        if (def.beInMenu) {
            def.css = "position:relative;";
        }
        $super(this, def, Runtime, view);
        this.setContainer(menu);
        menu.cache[this.uuid()] = this;
        if (this.input) {
            Event.attachEvent(this.input, "mousedown", 0, this, _onInput);
            Event.attachEvent(this.input, "click", 0, this, _onInput);
        }
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.FlexibleItem);

js.awt.MenuSeparator = function(def, Runtime, menu) {
    var CLASS = js.awt.MenuSeparator, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System;
    thi$._init = function(def, Runtime, menu) {
        if (def == undefined) {
            return;
        }
        def.classType = "js.awt.MenuSeparator";
        def.className = DOM.combineClassName(menu.def.className || menu.className, "separator");
        def.css = "overflow:hidden;width:100%;";
        $super(this, def, Runtime);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Component);

$package("js.awt");

$import("js.awt.MenuItem");

js.awt.Menu = function(def, Runtime, parentMenu, rootMenu) {
    var CLASS = js.awt.Menu, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ;
    var _getItemOrNode = function(item, id, recursive) {
        var rb = recursive !== false, menu, cache, uuid, nodes, i, len, rst;
        menu = Class.isFunction(item.subMenu) ? item.subMenu() : null;
        if (menu) {
            cache = menu.cache;
            for (uuid in cache) {
                item = cache[uuid];
                if (item.id === id) {
                    rst = item;
                } else {
                    if (rb) {
                        rst = _getItemOrNode.call(this, item, id, rb);
                    }
                }
                if (rst) {
                    break;
                }
            }
        } else {
            nodes = item.def.nodes;
            len = Class.isArray(nodes) ? nodes.length : 0;
            for (i = 0; i < len; i++) {
                item = nodes[i];
                if (item.id === id) {
                    rst = item;
                } else {
                    if (rb) {
                        rst = _getItemOrNode.call(this, item, id, rb);
                    }
                }
                if (rst) {
                    break;
                }
            }
        }
        return rst;
    };
    var _getItemOrNodeById = function(id, recursive) {
        var root = this.rootLayer(), cache = root.cache, rb = recursive !== false, uuid, item, rst;
        for (uuid in cache) {
            item = cache[uuid];
            if (item.id === id) {
                rst = item;
            } else {
                if (rb) {
                    rst = _getItemOrNode.call(this, item, id, rb);
                }
            }
            if (rst) {
                break;
            }
        }
        return rst;
    };
    thi$.setItemEnabled = function(id, b, recursive, pitem) {
        var node, changed = false, state, nstate;
        if (pitem) {
            node = _getItemOrNode.call(this, pitem, id, recursive);
        } else {
            node = _getItemOrNodeById.call(this, id, recursive);
        }
        if (!node) {
            return changed;
        }
        if (Class.isFunction(node.setEnabled)) {
            changed = node.isEnabled() != b;
            if (changed) {
                node.setEnabled(b);
            }
        } else {
            nstate = b ? 0 : 1;
            state = node.state === 1 ? 1 : 0;
            changed = state !== nstate;
            if (changed) {
                node.state = nstate;
            }
        }
        return changed;
    };
    var _getMenuItemById = function(cache, id, recursive) {
        var rb = recursive != false, uuid, item, rst, menu;
        for (uuid in cache) {
            item = cache[uuid];
            if (item.id === id) {
                rst = item;
            } else {
                if (rb && Class.isFunction(item.subMenu)) {
                    menu = item.subMenu();
                    if (menu) {
                        rst = _getMenuItemById.call(this, menu.cache, id, rb);
                    }
                }
            }
            if (rst) {
                break;
            }
        }
        return rst;
    };
    thi$.getMenuItemById = function(id, recursive) {
        var root = this.rootLayer(), cache = root.cache;
        return cache ? _getMenuItemById.call(this, cache, id, recursive) : null;
    };
    thi$.getSubMenuNodes = function(item) {
        return null;
    };
    thi$.rectifySubMenu = function(item, subMenu) {
        subMenu = subMenu || item.subMenu();
        return subMenu;
    };
    thi$.getPeerComponent = function() {
        var root = this.rootLayer();
        return this == root ? $super(this) : root.getPeerComponent();
    }.$override(this.getPeerComponent);
    thi$.parentMenu = function() {
        return this._local.parent;
    };
    var _setRootMenu = function(menu) {
        if (menu instanceof js.awt.Menu) {
            this._local.root = menu;
        } else {
            if (!Class.isValid(menu)) {
                this._local.root = this;
                MQ.register("hideMenuRoot", this, _onhideMenuRoot);
            }
        }
    };
    var _setParentMenu = function(menu) {
        if (menu instanceof js.awt.Menu) {
            this._local.parent = menu;
        } else {
            if (!Class.isValid(menu)) {
                this._local.parent = this;
            }
        }
    };
    thi$.insertNodes = function(index, itemDefs) {
        var M = this.def, nodes = this.nodes, isMarkableSetten = Class.isBoolean(M.markable), isIconicSetten = Class.isBoolean(M.iconic), ibase = index, item, refNode, itemDef, clazz, i, len;
        if (!nodes) {
            nodes = this.nodes = js.util.LinkedList.$decorate([]);
        }
        item = nodes.get(index);
        refNode = item ? item.view : undefined;
        for (i = 0, len = itemDefs.length; i < len; i++) {
            itemDef = itemDefs[i];
            if (isMarkableSetten) {
                itemDef.markable = M.markable;
            }
            if (isIconicSetten) {
                itemDef.iconic = M.iconic;
            }
            if (!itemDef.hasOwnProperty("iconStateless")) {
                itemDef.iconStateless = M.iconStateless === true;
            }
            if (!itemDef.hasOwnProperty("useBgImage")) {
                itemDef.useBgImage = M.useBgImage === true;
            }
            clazz = itemDef.classType || ("-" === itemDef.type ? "js.awt.MenuSeparator" : "js.awt.MenuItem");
            item = new (Class.forName(clazz))(itemDef, this.Runtime(), this);
            this[item.id] = item;
            nodes.add(ibase++, item);
            if (refNode) {
                DOM.insertAfter(item.view, refNode);
            } else {
                DOM.appendTo(item.view, this._menuView);
            }
            refNode = item.view;
        }
    };
    thi$.mark = function(id) {
        var item = this[id];
        if (!item) {
            return;
        }
        var nodes = this.nodes, len = nodes ? nodes.length : 0, node;
        for (var i = 0; i < len; i++) {
            node = nodes[i];
            node.mark(node.id === id);
        }
    };
    thi$.removeNodes = function(index, length) {
        var cache = this.cache, nodes = this.nodes, items = nodes ? nodes.splice(index, length) : null, item;
        while (items && items.length > 0) {
            item = items.shift();
            delete cache[item.uuid()];
            delete this[item.id];
            item.destroy();
        }
    };
    thi$.removeAllNodes = function() {
        var nodes = this.nodes;
        if (nodes) {
            this.removeNodes(0, nodes.length);
        }
    };
    thi$._setNodes = function(nodes) {
        if (!nodes || nodes.length == 0) {
            return;
        }
        this.removeAllNodes();
        this.def.nodes = nodes;
        this.insertNodes(0, nodes);
    };
    var _adjustItemCover = function() {
        var cache = this.cache, uuid, item;
        for (uuid in cache) {
            item = cache[uuid];
            item.showDisableCover(!item.isEnabled(), item.def.disableClassName);
        }
    };
    thi$.showAt = function() {
        $super(this);
        _adjustItemCover.call(this);
    }.$override(this.showAt);
    thi$.showBy = function() {
        $super(this);
        _adjustItemCover.call(this);
    }.$override(this.showBy);
    thi$.canHide = function(e) {
        var type = e.getType(), b = true;
        switch (type) {
          case "mousedown":
            b = !this.contains(e.srcElement, true) && $super(this);
            break;

          case "blur":
            b = this.rootLayer().isHideOnBlur();
            break;

          default:
            b = $super(this);
            break;
        }
        return b;
    }.$override(this.canHide);
    thi$.hide = function() {
        var item = this.active, subMenu = item ? item.subMenu() : undefined;
        if (item && subMenu && subMenu.isShown()) {
            subMenu.hide();
            item.setHover(false);
        }
        $super(this);
    }.$override(this.hide);
    thi$.repaint = function() {
        var U = this._local, M = this.def, bounds, clientH, height, nodes, node, scrollbar, i, len;
        if (!U.repaint) {
            bounds = this.getBounds();
            clientH = document.documentElement.clientHeight;
            height = M.height ? M.height : bounds.height;
            if (height > clientH) {
                this.setY(0);
                this.view.style.height = "100%";
                this.applyStyles({
                    overflow: "auto"
                });
            }
            M.width = bounds.width;
            M.width -= bounds.BBM ? 0 : bounds.MBP.BPW;
            scrollbar = this.hasScrollbar();
            if (scrollbar.vscroll) {
                M.width = M.width - scrollbar.vbw;
            }
            M.height = bounds.height;
            M.height -= bounds.BBM ? 0 : bounds.MBP.BPH;
            M.z = this.getStyle("z-index");
            if (M.isfloating === true && !this.floatingSettled()) {
                this.setFloating(true);
            }
            nodes = this.nodes;
            len = nodes ? nodes.length : 0;
            for (i = 0; i < len; i++) {
                node = nodes[i];
                if (!(node instanceof js.awt.MenuSeparator)) {
                    node.doLayout();
                    node.setEnabled(node.isEnabled());
                }
            }
            U.repaint = true;
        }
        if (M.shadow) {
            this.showShadow(true, M.shadowClassName);
        }
        this.adjustLayers("resize");
        if (this.active) {
            this.active.setHover(false);
            this.active = undefined;
        }
    }.$override(this.repaint);
    thi$.destroy = function() {
        this.removeAllNodes();
        var ele = this._menuView, U = this._local;
        this._menuView = null;
        DOM.remove(ele, true);
        U.root = null;
        U.parent = null;
        this.cache = null;
        $super(this);
    }.$override(this.destroy);
    thi$._notify = function(e, item) {
        e.setEventTarget(System.objectCopy(item, {}));
        this.rootLayer().hide();
        this.notifyPeer("js.awt.event.MenuItemEvent", e);
    };
    var _onclick = function(e) {
        var el = e.srcElement, uuid = el.uuid, item = this.cache[uuid];
        if (item && item.hasNodes()) {
            item.showSubMenu();
            return;
        }
        if (item && item.isEnabled()) {
            if (e.getType() == "click") {
                if (item.hitCtrl(e)) {
                    System.log.println('Hit the "' + el.id + '" ctrl.');
                    e.setType("hitctrl");
                }
                this._notify(e, item);
            }
        }
    };
    var _onMenuItem = function(e) {
        if (e.getType() == "input") {
            this._notify(e, e.getEventTarget());
        }
    };
    var _onhideMenuRoot = function() {
        this.hide();
    };
    var _onmouseover = function(e) {
        var from = e.fromElement, to = e.toElement, fid = from ? from.uuid : undefined, tid = to ? to.uuid : undefined, fitem, titem, cache = this.cache;
        if (fid !== tid) {
            fitem = cache[fid];
            titem = cache[tid];
            if (fitem && fitem.isHover()) {
                var subMenu = fitem.subMenu();
                if (!subMenu || !subMenu.isShown()) {
                    fitem.setHover(false);
                    this.active = undefined;
                }
            }
            if (titem && !titem.isHover()) {
                titem.setHover(true);
                this.active = titem;
            }
        }
    };
    thi$._init = function(def, Runtime, parentMenu, rootMenu) {
        if (def == undefined) {
            return;
        }
        def.classType = def.classType || "js.awt.Menu";
        def.className = def.className || "jsvm_menu";
        def.isfloating = true;
        def.PMFlag = def.PMFlag || 39;
        $super(this, def, Runtime);
        _setParentMenu.call(this, parentMenu);
        _setRootMenu.call(this, rootMenu);
        var menuView = this._menuView = DOM.createElement("DIV");
        menuView.className = DOM.combineClassName(this.className, "menuview");
        menuView.style.cssText = "position:relative;width:100%;height:100%;";
        DOM.appendTo(menuView, this.view);
        this.cache = {};
        if (def.nodes && def.nodes.length > 0) {
            this._setNodes(def.nodes);
        }
        this.setAttribute("touchcapture", "true");
        this.attachEvent("mouseover", 4, this, _onmouseover);
        this.attachEvent("mouseout", 4, this, _onmouseover);
        this.attachEvent("click", 4, this, _onclick);
        MQ.register("js.awt.event.ItemTextEvent", this, _onMenuItem);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Component);

$package("js.awt");

js.awt.TreeItem = function(def, Runtime, tree, parent, view) {
    var CLASS = js.awt.TreeItem, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ, LinkedList = js.util.LinkedList;
    thi$.setText = function(text) {
        this.def.text = text;
        this.label.innerHTML = js.lang.String.encodeHtml(text);
    };
    thi$.getText = function() {
        return this.def.text;
    };
    thi$.treeContainer = function() {
        return this.getPeerComponent();
    };
    var _setTreeContainer = function(tree) {
        this.setPeerComponent(tree);
    };
    thi$.isMovable = function() {
        return this.treeContainer().isMovable() && this.canDrag();
    };
    thi$.spotIndex = function() {
        return 11;
    };
    thi$.isMoverSpot = function(ele, x, y) {
        return this.isMovable();
    };
    thi$.getMoveObject = function(e) {
        return this.treeContainer().getMoveObject(e);
    };
    thi$.getMovingConstraints = function() {
        return this.treeContainer().getMovingConstraints();
    };
    thi$.parentItem = function() {
        return this._local.parent;
    };
    var _setParentItem = function(parent) {
        this._local.parent = parent || this;
    };
    thi$.hasSibling = function() {
        return this.nextSibling() != undefined;
    };
    thi$.prevSibling = function(prev) {
        if (prev !== undefined) {
            this._local.prev = prev;
        }
        return this._local.prev;
    };
    thi$.nextSibling = function(next) {
        if (next !== undefined) {
            this._local.next = next;
        }
        return this._local.next;
    };
    thi$.hasChildren = function() {
        var nodes = this.nodes;
        return nodes && nodes.length > 0;
    };
    thi$.canDrag = function() {
        var tree = this.treeContainer();
        return tree.canDrag(this.def);
    };
    thi$.canExpand = function() {
        var tree = this.treeContainer();
        return tree.canExpand(this.def) || this.nodes;
    };
    thi$.isExpanded = function() {
        return !!this._local.expanded;
    };
    thi$.isShowTip = function() {
        return this._local.showTip;
    };
    thi$.alwaysRemoveChild = function() {
        var tree = this.treeContainer();
        return tree.alwaysRemoveChild();
    };
    thi$.getIconImage = function() {
        return this.treeContainer().getIconImage(this.def) || "blank.gif";
    }.$override(this.getIconImage);
    thi$.isIconStateless = function() {
        var tree = this.treeContainer();
        return tree.isIconStateless(this.def);
    };
    thi$.getNodes = function(from, to, filter, recursive, ret) {
        var nodes = this.nodes, len = nodes.length, idx, start, stop, i, item;
        if (Class.isNumber(from)) {
            start = from;
        } else {
            if (Class.isObject(from) && from instanceof CLASS) {
                start = nodes.indexOf(from);
                start = start === -1 ? 0 : start;
            } else {
                start = 0;
            }
        }
        if (Class.isNumber(to)) {
            stop = to;
        } else {
            if (Class.isObject(to) && to instanceof CLASS) {
                stop = nodes.indexOf(to);
                stop = stop === -1 ? len - 1 : stop;
            } else {
                stop = len - 1;
            }
        }
        if (start > stop) {
            idx = start;
            start = stop;
            stop = idx;
        }
        ret = ret || [];
        for (i = start; i <= stop; i++) {
            item = nodes[i];
            if (Class.isFunction(filter)) {
                if (filter(item.def)) {
                    ret.push(item);
                }
            } else {
                ret.push(item);
            }
            if (recursive === true && item.hasChildren()) {
                item.getNodes(0, undefined, filter, true, ret);
            }
        }
        return ret;
    };
    thi$.hasMoreNeedToLoad = function() {
        var itemDefs = this._local.itemDefs || [], nodes = this.nodes || [], len = nodes.length, rst = !!(this.hasMore || len < itemDefs.length), i, item;
        if (!rst && len > 0) {
            for (i = 0; i < len; i++) {
                item = nodes[i];
                if (item.hasMoreNeedToLoad()) {
                    rst = true;
                    break;
                }
            }
        }
        return rst;
    };
    var _updateModels = function(op, defs, index, length) {
        var U = this._local, itemDefs = U.itemDefs, i, len, tmp, doo = false;
        if (!itemDefs) {
            itemDefs = U.itemDefs = LinkedList.$decorate([]);
        }
        switch (op) {
          case "set":
            U.itemDefs = LinkedList.$decorate(defs || []);
            break;

          case "insert":
            if (!Class.isNumber(index) || index < 0 || index >= itemDefs.length) {
                index = itemDefs.length;
            }
            len = defs ? defs.length : 0;
            for (i = 0; i < len; i++) {
                tmp = defs[i];
                if (tmp) {
                    itemDefs.add(index, tmp);
                    ++index;
                }
            }
            break;

          case "remove":
            len = defs ? defs.length : 0;
            for (i = 0; i < len; i++) {
                itemDefs.remove(defs[i]);
            }
            doo = len > 0;
            break;

          case "clear":
            doo = itemDefs.length > 0;
            if (index >= 0) {
                if (!Class.isNumber(length) || length <= 0) {
                    length = itemDefs.length - index;
                    length = length < 0 ? 0 : length;
                }
                itemDefs.splice(index, length);
            } else {
                U.itemDefs = LinkedList.$decorate([]);
            }
            break;
        }
        if (doo) {
            this.checkMoreItem(U.itemDefs);
        }
    };
    thi$.showMoreItem = function(b) {
        var U = this._local, tree = this.treeContainer(), item = U.itemMore, refNode, rele;
        if (b) {
            if (!item) {
                item = U.itemMore = tree.fakeMoreItem(this.def.level + 1, this);
            }
            refNode = this.nodes ? this.nodes.getLast() : null;
            rele = refNode ? refNode.view : this.view;
            _addToDOM.$delay(this, 1, item, rele, false);
        } else {
            if (item && item.view.parentNode) {
                DOM.removeFrom(item.view);
            }
        }
    };
    thi$.checkMoreItem = function(itemDefs) {
        itemDefs = itemDefs || this._local.itemDefs;
        var tree = this.treeContainer(), hasMore = false, tdef;
        for (var i = 0, len = itemDefs.length; i < len; i++) {
            tdef = itemDefs[i];
            if (tdef && tree.isModelNode(tdef)) {
                hasMore = true;
                break;
            }
        }
        this.hasMore = hasMore;
        this.showMoreItem(hasMore);
    };
    thi$.loadNextPiece = function() {
        var U = this._local, tree = this.treeContainer(), itemDefs = U.itemDefs || [], len = itemDefs.length, cnt, i, tdef, tmp, item, refItem, nodes = this.nodes, refNode, ele, index = 0, tNodes = [], hasMore = false, itemMore;
        if (len == 0) {
            return;
        }
        this.showMoreItem(false);
        cnt = Math.min(len, tree.getPieceSize());
        for (i = 0; i < cnt && index < len; ) {
            tdef = itemDefs[index];
            if (!tdef || !tree.isModelNode(tdef)) {
                ++index;
                continue;
            }
            tmp = item;
            item = _insertNode.call(this, index, tdef, item, refItem);
            if (item) {
                tNodes.push(item);
                refNode = nodes.get(index - 1);
                ele = refNode ? refNode.view : this.view;
                _addToDOM.$delay(this, 1, item, ele, false);
                refItem = tmp;
            } else {
                item = tmp;
            }
            ++index;
            ++i;
        }
        for (i = index; i < len; i++) {
            tdef = itemDefs[i];
            if (tdef && tree.isModelNode(tdef)) {
                hasMore = true;
                break;
            }
        }
        this.hasMore = hasMore;
        this.showMoreItem(hasMore);
        for (i = 0, len = tNodes.length; i < len; i++) {
            item = tNodes[i];
            item.updateBranchStyle();
        }
        tree.onPieceLoaded(this, tNodes);
    };
    var _insertNode = function(index, itemDef, item, refItem) {
        var R = this.Runtime(), ibase = index, nodes = this.nodes, tree = this.treeContainer(), refNode, cview, clazz, isVisible, prev, next;
        itemDef.level = this.def.level + 1;
        if (!tree.isTreeNodeAccepted(itemDef)) {
            return null;
        }
        isVisible = tree.isNodeVisible(itemDef) && this.isVisible();
        if (!isVisible) {
            if (!tree.isAlwaysCreate()) {
                return null;
            } else {
                itemDef.state = 16;
            }
        }
        if (this.isShowTip()) {
            itemDef.tip = itemDef.tip || itemDef.dname;
            itemDef.showTip = true;
        }
        cview = null;
        if (item && item.canCloneView(itemDef) && item.isVisible()) {
            cview = item.cloneView();
        } else {
            if (refItem && refItem.canCloneView(itemDef) && refItem.isVisible()) {
                cview = refItem.cloneView();
            }
        }
        clazz = itemDef.className;
        if (!clazz) {
            clazz = tree.def.className || tree.className;
            clazz = itemDef.className = DOM.combineClassName(clazz, "item");
        }
        if (!cview) {
            item = new js.awt.TreeItem(itemDef, R, tree, this);
        } else {
            cview.clazz = clazz;
            item = new js.awt.TreeItem(itemDef, R, tree, this, cview);
        }
        prev = ibase > 0 ? nodes.get(ibase - 1) : undefined;
        next = ibase < nodes.length ? nodes.get(ibase + 1) : undefined;
        nodes.add(ibase, item);
        if (prev) {
            prev.nextSibling(item);
        }
        if (next) {
            next.prevSibling(item);
        }
        item.prevSibling(prev);
        item.nextSibling(next);
        return item;
    };
    var _insertNodes = function(index, itemDefs) {
        var U = this._local, tree = this.treeContainer(), ibase = index, len = itemDefs.length, i, item, tmp, refItem, itemDef, nodes;
        for (i = 0; i < len; i++) {
            itemDef = itemDefs[i];
            tmp = item;
            item = _insertNode.call(this, index++, itemDef, item, refItem);
            if (item) {
                refItem = tmp;
            } else {
                item = tmp;
            }
        }
        nodes = this.nodes;
        for (i = 0, len = nodes.length; i < len; i++) {
            item = nodes[i];
            item.updateBranchStyle();
        }
    };
    thi$.insertNodes = function(index, itemDefs) {
        _updateModels.call(this, "insert", itemDefs, index);
        if (!this.nodes) {
            this.nodes = LinkedList.$decorate([]);
        }
        var tree = this.treeContainer();
        if (tree.isPiecewise()) {
            if (this.isExpanded()) {
                this.loadNextPiece();
            }
        } else {
            _insertNodes.call(this, index, itemDefs);
        }
    };
    thi$.removeNodes = function(index, length) {
        var nodes = this.nodes || [], cnt = nodes.length, tree = this.treeContainer(), cache = tree.cache, marked = tree.marked, selected = tree.selected, item;
        if (!Class.isNumber(index)) {
            index = 0;
        } else {
            index = index < 0 ? 0 : index >= cnt ? cnt - 1 : index;
        }
        _updateModels.call(this, "clear", null, index, length);
        nodes = nodes.splice(index, length);
        while (nodes.length > 0) {
            item = nodes.shift();
            item.removeAllNodes();
            delete cache[item.uuid()];
            item.mark(false);
            marked.remove(item);
            item.setHover(false);
            item.setTriggered(false);
            selected.remove(item);
            item.destroy();
        }
    };
    thi$.removeAllNodes = function() {
        _updateModels.call(this, "clear");
        var nodes = this.nodes;
        if (nodes) {
            this.removeNodes(0, nodes.length);
        }
    };
    var _addToDOM = function(item, refNode, isLast, e) {
        if (this.destroied === true || item.destroied === true || !this.treeContainer().isAppendable(item)) {
            return;
        }
        item.updateLeaderStyle();
        DOM.insertAfter(item.view, refNode);
        if (item.view.parentNode) {
            item.showDisableCover(!item.isEnabled());
        }
        if (isLast) {
            _afterExpand.call(this);
        }
    };
    var _afterExpand = function() {
        var peer = this.getPeerComponent();
        if (peer && typeof peer.onAfterExpand === "function") {
            peer.onAfterExpand();
        }
    };
    var _onItemExpandChanged = function(item, expanded, e) {
        var tree = this.treeContainer(), eType = e ? e.getType() : null;
        if (eType === "click") {
            tree.cacheItemExpandState(item, expanded);
        }
    };
    thi$.isExpanding = function() {
        return this._local.expanding;
    };
    thi$.setExpanding = function(b) {
        this._local.expanding = b;
    };
    thi$.expand = function(b, needNotify, root, e) {
        if (!this.isEnabled()) {
            return;
        }
        this.setExpanding(false);
        var U = this._local, tree = this.treeContainer(), className = this.branch.clazz, nodes = this.nodes || [], isPw = tree.isPiecewise(), len = nodes.length, refNode, i, item, eType;
        b = b || false;
        U.expanded = b;
        if (b) {
            eType = e ? e.getType() : null;
            b = eType && eType.toLowerCase() === "init" ? tree.getCachedExpandState(this, b) : b;
            if (!b) {
                U.expanded = false;
                return;
            }
            this.branch.className = DOM.combineClassName(className, "4");
            this.setIconImage(4);
            if (isPw && len === 0) {
                this.loadNextPiece();
            } else {
                refNode = this.view;
                for (i = 0; i < len; i++) {
                    item = nodes[i];
                    _addToDOM.$delay(this, 1, item, refNode, i == len - 1 && needNotify != false, e);
                    refNode = item.view;
                }
                if (isPw && this.hasMore) {
                    this.showMoreItem(true);
                }
            }
        } else {
            for (i = len - 1; i >= 0; i--) {
                item = nodes[i];
                if (item.isExpanded()) {
                    item.expand(false, undefined, item);
                }
                if (this.alwaysRemoveChild()) {
                    tree.removeNode(item);
                } else {
                    if (item.view.parentNode) {
                        item.removeFrom(item.view.parentNode);
                    }
                }
                _onItemExpandChanged.call(this, item, false, e);
            }
            if (isPw && this.hasMore) {
                this.showMoreItem(false);
            }
            if (this.alwaysRemoveChild()) {
                _updateModels.call(this, "clear");
                delete this.def.nodes;
            }
            this.branch.className = DOM.combineClassName(className, "0");
            this.setIconImage(0);
            if (needNotify != false && root == undefined) {
                _afterExpand.call(this);
            }
        }
        _onItemExpandChanged.call(this, this, b, e);
    };
    thi$.expandAll = function(b, root, e) {
        if (!this.isEnabled()) {
            return;
        }
        this.expand(b, false, undefined, e);
        if (b) {
            var nodes = this.nodes, i, len, item;
            if (nodes && this.nodes.length > 0) {
                for (i = 0, len = nodes.length; i < len; i++) {
                    item = nodes[i];
                    if (item.canExpand() && !item.isExpanded()) {
                        item.expandAll(b, this, e);
                    }
                }
            }
        }
        if (!root) {
            _afterExpand.$delay(this, 1);
        }
    };
    thi$.doLayout = function() {
        if (this.label && this.controller) {
            var ele = this.label, b, left;
            b = ele.scrollWidth;
            left = ele.offsetLeft;
            this.controller.setPosition(b + left);
        }
    }.$override(this.doLayout);
    thi$.onelementappend = function(e) {
        var tree = this.treeContainer();
        if (tree && Class.isFunction(tree.onItemAppended)) {
            tree.onItemAppended(this, e);
        }
    };
    thi$.adjustCover = function(bounds) {
        $super(this);
        if (this._coverView) {
            this._coverView.style.width = "100%";
        }
    }.$override(this.adjustCover);
    thi$.updateBranchStyle = function() {
        var ex = this.canExpand(), ps = this.prevSibling() != undefined, ns = this.nextSibling() != undefined, b = (ex ? 4 : 0) | (ps ? 2 : 0) | (ns ? 1 : 0), bClassName = DOM.combineClassName(this.className, "branch"), branch = this.branch;
        if (this.isEnabled()) {
            bClassName = DOM.combineClassName(bClassName, b, "");
            branch.clazz = bClassName;
            bClassName = DOM.combineClassName(bClassName, this.isTriggered() ? "4" : "0");
        } else {
            branch.clazz = bClassName;
            bClassName = DOM.combineClassName(bClassName, "1");
        }
        branch.className = bClassName;
    };
    thi$.updateLeaderStyle = function() {
        var M = this.def, level = M.level, comps = M.items, p = this.parentItem(), comp;
        for (var i = level - 1; i >= 0; i--) {
            comp = this[comps[i]];
            if (p.hasSibling()) {
                comp.className = DOM.combineClassName(this.className, "leader1");
            } else {
                comp.className = DOM.combineClassName(this.className, "leader0");
            }
            p = p.parentItem();
        }
    };
    thi$.canCloneView = function(itemDef) {
        var items = [], indent = itemDef.indent, level = itemDef.level, i;
        if (indent > 0) {
            for (i = indent; i > 0; i--) {
                items.unshift("leader");
            }
        }
        for (i = level; i > 0; i--) {
            items.unshift("leader" + i);
        }
        items.push("branch");
        if (itemDef.markable === true) {
            items.push("marker");
        }
        if (itemDef.iconic !== false) {
            items.push("icon");
        }
        items.push("label");
        return items.join("") === this.def.items.join("");
    }.$override(this.canCloneView);
    var _checkItems = function(def, tree, parent) {
        var indent = def.indent, level = def.level, items = def.items;
        if (indent > 0) {
            for (var i = indent; i > 0; i--) {
                items.unshift("leader");
            }
        }
        for (var i = level; i > 0; i--) {
            items.unshift("leader" + i);
        }
        items.push("branch");
        if (def.markable === true) {
            items.push("marker");
        }
        if (def.iconic !== false) {
            items.push("icon");
        }
        items.push("label");
    };
    thi$.destroy = function() {
        delete this._local.parent;
        delete this._local.prev;
        delete this._local.next;
        this.removeAllNodes();
        delete this.nodes;
        delete this._local.itemDefs;
        $super(this);
    }.$override(this.destroy);
    thi$._init = function(def, Runtime, tree, parent, view) {
        if (def == undefined) {
            return;
        }
        _setTreeContainer.call(this, tree);
        def.classType = def.classType || "js.awt.TreeItem";
        def.className = def.className || DOM.combineClassName(tree.def.className || tree.className, "item");
        def.css = "position:relative;overflow:visible;width:100%;";
        if (view == undefined) {
            def.items = LinkedList.$decorate([]);
            def.level = Class.isNumber(def.level) ? def.level : 0;
            _checkItems.call(this, def);
        }
        $super(this, def, Runtime, view);
        _setParentItem.call(this, parent);
        def.uuid = this.uuid();
        tree.cache[this.uuid()] = this;
        this._local.showTip = def.showTip || false;
        if (def.nodes && def.nodes.length > 0) {
            this.insertNodes(0, def.nodes);
        }
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Item);

$package("js.awt");

$import("js.awt.TreeItem");

js.awt.TreeDataProvider = function() {
    var CLASS = js.awt.TreeDataProvider, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, LinkedList = js.util.LinkedList, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System;
    thi$.setFilterConditions = function(conditions) {
        this.filterConditions = conditions;
    };
    var _checkWithConditions = function(node, condition, exclude) {
        if (!condition) {
            return true;
        }
        var pname, pv, pvs;
        for (pname in condition) {
            pvs = condition[pname] || [];
            pv = node[pname];
            if (Class.isValid(pv)) {
                LinkedList.$decorate(pvs);
                if (exclude === true) {
                    if (pvs.contains(pv)) {
                        return false;
                    }
                } else {
                    if (!pvs.contains(pv)) {
                        return false;
                    }
                }
            }
        }
        return true;
    };
    var _accept = function(node, conditions, exclude) {
        return _checkWithConditions.call(this, node, conditions["common"], exclude) && _checkWithConditions.call(this, node, conditions[node.type], exclude);
    };
    thi$.isNodeAccepted = function(node, conditions) {
        conditions = conditions || this.filterConditions;
        if (!conditions || !Class.isObject(node)) {
            return true;
        }
        var func = conditions.func, accept = conditions.accept || {}, unaccept = conditions.unaccept || {};
        return (!Class.isFunction(func) || func(node)) && _accept.call(this, node, accept, false) && _accept.call(this, node, unaccept, true);
    };
    thi$.setExpandableMap = function(map) {
        this.expandMap = map;
    };
    thi$.canExpand = function(def) {
        var type = def.type, map = this.expandMap, b = map ? map[type] : false;
        return b || false;
    };
    thi$.setDragableMap = function(map) {
        this.dragMap = map;
    };
    thi$.canDrag = function(def) {
        var type = def.type, map = this.dragMap, b = map ? map[type] : false;
        return b || false;
    };
    thi$.setImageMap = function(map) {
        this.imageMap = map;
    };
    thi$.getIconImage = function(def) {
        var image = def["iconImage"] || def["image"], map = this.imageMap;
        if (!image) {
            image = map ? map[def.type] : "blank.gif";
        }
        return image;
    };
    thi$.getDragMsgType = function() {
        return "js.awt.event.TreeItemDrag";
    };
    thi$.getDragMsgRecvs = function() {
        return null;
    };
    thi$.getData = function(itemDef, callback) {
        callback({});
    };
};

js.awt.Tree = function(def, Runtime, dataProvider) {
    var CLASS = js.awt.Tree, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    CLASS.FAKEMORE = "__fakemore__";
    CLASS.PIECE_THRESHOLD = 500;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ, Session = J$VM.storage.session, LinkedList = js.util.LinkedList, permission = Class.forName("js.util.Permission");
    thi$.msgType = function(msgType) {
        var U = this._local;
        if (Class.isString(msgType) && msgType.length > 0) {
            U.msgType = msgType;
        }
        return U.msgType || "js.awt.event.TreeItemEvent";
    };
    thi$.notifyPeer = function(msgId, event, sync) {
        if (event) {
            event.srcTree = this;
        }
        $super(this);
    }.$override(this.notifyPeer);
    var _countNodes = function(nodes) {
        var len = Class.isArray(nodes) ? nodes.length : 0, cnt = len, node, tmpNodes;
        for (var i = 0; i < len; i++) {
            node = nodes[i];
            tmpNodes = node.nodes;
            if (tmpNodes) {
                cnt += _countNodes.call(this, tmpNodes);
            }
        }
        return cnt;
    };
    thi$.numOfNodes = function(num) {
        var U = this._local, itemDefs;
        if (Class.isNumber(num) && num >= 0) {
            U.numOfNodes = num;
        }
        num = U.numOfNodes;
        if (!Class.isNumber(num)) {
            itemDefs = U.itemDefs;
            if (itemDefs && itemDefs.length > 0) {
                System.log.time("Time::Count tree nodes");
                num = _countNodes.call(this, itemDefs);
                System.log.timeEnd("Time::Count tree nodes");
            } else {
                num = 0;
            }
            num = U.numOfNodes = num;
        }
        return num;
    };
    thi$.isPiecewise = function() {
        return this.canPiecewise && this.numOfNodes() > CLASS.PIECE_THRESHOLD;
    };
    thi$.getPieceSize = function() {
        return this.isPiecewise() ? this.def.pieceSize || 50 : Number.MAX_VALUE;
    };
    thi$.hasMoreNeedToLoad = function() {
        var itemDefs = this._local.itemDefs || [], nodes = this.nodes || [], len = nodes.length, rst = !!(this.hasMore || len < itemDefs.length), i, item;
        if (!rst && len > 0) {
            for (i = 0; i < len; i++) {
                item = nodes[i];
                if (item.hasMoreNeedToLoad()) {
                    rst = true;
                    break;
                }
            }
        }
        return rst;
    };
    var _getTreeItem = function(path, nodes, comparator, ref) {
        var len = nodes.length, i, item, rst, inodes, tmp;
        for (i = 0; i < len; i++) {
            item = nodes[i];
            if (comparator(item, ref)) {
                rst = {
                    item: item,
                    path: path
                };
                break;
            } else {
                inodes = item.nodes;
                if (inodes && inodes.length > 0) {
                    path.push(item);
                    rst = _getTreeItem.call(this, path, inodes, comparator, ref);
                    if (!rst) {
                        path.pop();
                    } else {
                        break;
                    }
                }
            }
        }
        return rst;
    };
    thi$.getTreeItem = function(comparator, ref) {
        var rst = _getTreeItem.call(this, [], this.nodes || [], comparator, ref);
        return rst.item;
    };
    thi$.expandToItem = function(item, e, isLast) {
        if (!item) {
            return;
        }
        var path = [], doo = false, comparator = function(item, ref) {
            return item === ref;
        }, rst = _getTreeItem.call(this, path, this.nodes, comparator, item), len = path.length, i, titem;
        if (!rst || len == 0) {
            return;
        }
        _keepScroll.call(this);
        for (i = 0; i < len; i++) {
            titem = path[i];
            if (!titem.isEnabled()) {
                break;
            }
            if (titem.isExpanded()) {
                continue;
            }
            titem.expand(true, i == len - 1, undefined, e);
            doo = true;
        }
        if (isLast !== false) {
            _setMaxSize.$delay(this, 50, doo);
            _keepScroll.$delay(this, 50, true);
            this.scrollTo.$delay(this, 50, item.view);
        }
    };
    thi$.getPrevItem = function(item) {
        var ele = item ? item.view.previousSibling : null;
        return ele && ele.uuid ? this.cache[ele.uuid] : null;
    };
    thi$.getPrevSiblingItem = function(item) {
        var prevItem = item.prevSibling(), ele;
        if (!prevItem) {
            ele = item.view.previousSibling;
            if (ele && ele.uuid) {
                prevItem = this.cache[ele.uuid];
            }
            if (prevItem && prevItem.def.level !== item.def.level) {
                prevItem = null;
            }
        }
        return prevItem;
    };
    thi$.getNextItem = function(item) {
        var ele = item ? item.view.nextSibling : null;
        return ele && ele.uuid ? this.cache[ele.uuid] : null;
    };
    thi$.getNextSiblingItem = function(item) {
        var nextItem = item.nextSibling(), ele;
        if (!nextItem) {
            ele = item.view.nextSibling;
            if (ele && ele.uuid) {
                nextItem = this.cache[ele.uuid];
            }
            if (nextItem && nextItem.def.level !== item.def.level) {
                nextItem = null;
            }
        }
        return nextItem;
    };
    thi$.setDataProvider = function(dataProvider) {
        if (!dataProvider.instanceOf(js.awt.TreeDataProvider)) {
            throw "Request a js.awt.TreeDataProvider instance";
        }
        this.dataProvider = dataProvider;
    };
    thi$.canExpand = function(itemDef) {
        return this.dataProvider.canExpand(itemDef);
    };
    thi$.canDrag = function(itemDef) {
        return itemDef.type !== CLASS.FAKEMORE && this.dataProvider.canDrag(itemDef);
    };
    thi$.getIconImage = function(itemDef) {
        return this.dataProvider.getIconImage(itemDef);
    };
    thi$.setAlwaysRemoveChild = function(bool) {
        this._local.alwaysRemoveChild = bool;
    };
    thi$.alwaysRemoveChild = function() {
        return this._local.alwaysRemoveChild;
    };
    thi$.isIconStateless = function(itemDef) {
        var stateless = itemDef.stateless === true;
        if (!stateless) {
            if (itemDef.hasOwnProperty("iconStateless")) {
                stateless = itemDef.iconStateless === true;
            } else {
                stateless = this.def.iconStateless === true;
            }
        }
        return stateless;
    };
    thi$.showTip = function(showTip) {
        this._local.showTip = showTip;
    };
    thi$.isShowTip = function() {
        return this._local.showTip || false;
    };
    thi$.isAppendable = function(item) {
        return true;
    };
    thi$.setItemEnabled = function(item, b) {
        b = b === true;
        if (item.isEnabled() === b) {
            return;
        }
        if (!b && item.canExpand() && item.isExpanded()) {
            this.expandAll(false, item);
        }
        item.setEnabled(b);
        item.updateBranchStyle();
    };
    thi$.isNodeVisible = function(nodeDef) {
        var p = parseInt(nodeDef.permission, 10);
        return permission.isVisible(isNaN(p) ? 1 : p);
    };
    thi$.isAlwaysCreate = function() {
        return this.def.alwaysCreate !== false;
    };
    thi$.isTreeNodeAccepted = function(node, conditions) {
        return this.dataProvider.isNodeAccepted(node, conditions);
    };
    thi$.isModelNode = function(tdef, prev) {
        var be = !tdef.classType, uuid, item;
        if (!be) {
            uuid = tdef.uuid;
            item = uuid ? this.cache[uuid] : null;
            be = !item;
        }
        return be;
    };
    thi$.getFakeMoreItemDef = function(level, pitem) {
        var R = this.Runtime(), itemDef = {
            id: "itemMore",
            type: CLASS.FAKEMORE,
            iconStateless: true,
            level: level,
            puuid: pitem ? pitem.uuid() : undefined,
            dname: R.nlsText("itemMore", "More...")
        };
        return itemDef;
    };
    thi$.fakeMoreItem = function(level, pitem) {
        var R = this.Runtime(), itemDef = this.getFakeMoreItemDef(level, pitem);
        return new js.awt.TreeItem(itemDef, R, this, pitem);
    };
    thi$.isFakeMoreItem = function(item) {
        return item && item.def && item.def.type === CLASS.FAKEMORE;
    };
    thi$.showMoreItem = function(b) {
        var U = this._local, item = U.itemMore;
        if (b) {
            if (!item) {
                item = U.itemMore = this.fakeMoreItem(0);
            }
            DOM.appendTo(item.view, this._treeView);
        } else {
            if (item && item.view.parentNode) {
                DOM.removeFrom(item.view);
            }
        }
    };
    thi$.checkMoreItem = function(itemDefs) {
        itemDefs = itemDefs || this._local.itemDefs;
        var len = itemDefs.length, hasMore = false, tdef;
        for (var i = 0; i < len; i++) {
            tdef = itemDefs[i];
            if (this.isModelNode(tdef)) {
                hasMore = true;
                break;
            }
        }
        this.hasMore = hasMore;
        this.showMoreItem(hasMore);
    };
    thi$.getItemDefs = function() {
        return this._local.itemDefs;
    };
    thi$.updateNumOfNodes = function(op, defs) {
        var U = this._local, num = U.numOfNodes, delta = defs && defs.length > 0 ? defs["__count__"] : 0;
        if (!Class.isNumber(delta)) {
            System.log.time("Time::Count delta tree nodes");
            delta = _countNodes.call(this, defs);
            System.log.timeEnd("Time::Count delta tree nodes");
        }
        switch (op) {
          case "set":
            num = delta;
            break;

          case "insert":
            num = (num || 0) + delta;
            break;

          case "remove":
            num -= delta;
            break;

          case "clear":
            num = 0;
            break;
        }
        System.log.println("Update the number of nodes: (OP: " + op + " Delta:" + delta + " Count:" + num + ")");
        U.numOfNodes = num;
    };
    var _updateModels = function(op, defs, index, length) {
        var U = this._local, itemDefs = U.itemDefs, i, len, tmp, doo = false;
        if (!itemDefs) {
            itemDefs = U.itemDefs = LinkedList.$decorate([]);
        }
        switch (op) {
          case "set":
            U.itemDefs = LinkedList.$decorate(defs || []);
            break;

          case "insert":
            if (!Class.isNumber(index) || index < 0 || index >= itemDefs.length) {
                index = itemDefs.length;
            }
            len = defs ? defs.length : 0;
            for (i = 0; i < len; i++) {
                tmp = defs[i];
                if (tmp) {
                    itemDefs.add(index, tmp);
                    ++index;
                }
            }
            break;

          case "remove":
            if (Class.isArray(defs)) {
                len = defs ? defs.length : 0;
                for (i = 0; i < len; i++) {
                    itemDefs.remove(defs[i]);
                }
                doo = len > 0;
            } else {
                index = index >= 0 ? index : 0;
                if (!Class.isNumber(length) || length <= 0) {
                    length = itemDefs.length - index;
                    length = length < 0 ? 0 : length;
                }
                defs = itemDefs.splice(index, length);
                doo = defs.length > 0;
            }
            break;

          case "clear":
            doo = itemDefs.len > 0;
            U.itemDefs = LinkedList.$decorate([]);
            break;
        }
        if (this.canPiecewise) {
            this.updateNumOfNodes(op, defs);
        }
        if (doo) {
            this.checkMoreItem(U.itemDefs);
        }
    };
    var _loadNextPiece = function() {
        var U = this._local, itemDefs = U.itemDefs || [], len = itemDefs.length, cnt, i, tdef, prev, tmp, item, refItem, refNode, index = 0, tNodes = [], nodes = this.nodes, hasMore = false, itemMore, marked;
        if (len == 0) {
            return;
        }
        this.showMoreItem(false);
        cnt = Math.min(len, this.getPieceSize());
        for (i = 0; i < cnt && index < len; ) {
            prev = tdef;
            tdef = itemDefs[index];
            if (!tdef || !this.isModelNode(tdef, prev)) {
                ++index;
                continue;
            }
            tmp = item;
            item = _insertNode.call(this, index, tdef, item, refItem);
            if (item) {
                tNodes.push(item);
                refItem = tmp;
            } else {
                item = tmp;
            }
            ++index;
            ++i;
        }
        for (i = index; i < len; i++) {
            prev = tdef;
            tdef = itemDefs[i];
            if (tdef && this.isModelNode(tdef, prev)) {
                hasMore = true;
                break;
            }
        }
        this.hasMore = hasMore;
        this.showMoreItem(hasMore);
        marked = this.marked;
        for (i = 0, len = tNodes.length; i < len; i++) {
            item = tNodes[i];
            item.updateBranchStyle();
            if (item.isMarked()) {
                marked.push(item);
            }
        }
        this.onPieceLoaded(null, tNodes);
    };
    thi$.loadNextPiece = function(itemMore) {
        _keepScroll.call(this);
        var pitem = this.cache[itemMore.def.puuid];
        if (pitem) {
            pitem.loadNextPiece(itemMore);
        } else {
            _loadNextPiece.call(this);
        }
    };
    thi$.onPieceLoaded = function(item, items) {
        if (!items || items.length == 0) {
            return;
        }
        this._doSort();
        _adjustItemLayers.$delay(this, 50);
        if (this.isDOMElement()) {
            _setMaxSize.$delay(this, 50, true);
            _keepScroll.$delay(this, 50, true);
        }
    };
    var _insertNode = function(index, itemDef, item, refItem) {
        var R = this.Runtime(), ibase = index, nodes = this.nodes, refNode, cview, clazz, isVisible;
        item = nodes.get(index);
        refNode = item ? item.view : undefined;
        itemDef.level = 0;
        if (!this.isTreeNodeAccepted(itemDef)) {
            return null;
        }
        if (this.isShowTip()) {
            itemDef.tip = itemDef.tip || itemDef.dname;
            itemDef.showTip = true;
        }
        isVisible = this.isNodeVisible(itemDef);
        if (!isVisible) {
            if (!this.isAlwaysCreate()) {
                return null;
            } else {
                itemDef.state = 16;
            }
        }
        cview = null;
        if (item && item.canCloneView(itemDef) && item.isVisible()) {
            cview = item.cloneView();
        } else {
            if (refItem && refItem.canCloneView(itemDef) && refItem.isVisible()) {
                cview = refItem.cloneView();
            }
        }
        clazz = itemDef.className;
        if (!clazz) {
            clazz = this.def.className || this.className;
            clazz = itemDef.className = DOM.combineClassName(clazz, "item");
        }
        if (!cview) {
            item = new js.awt.TreeItem(itemDef, R, this);
        } else {
            cview.clazz = clazz;
            item = new js.awt.TreeItem(itemDef, R, this, undefined, cview);
        }
        nodes.add(index, item);
        if (refNode) {
            DOM.insertAfter(item.view, refNode);
        } else {
            DOM.appendTo(item.view, this._treeView);
        }
        return item;
    };
    var _insertNodes = function(index, itemDefs) {
        var U = this._local, ibase = index, item, tmp, refItem, itemDef, nodes, marked, i, len;
        for (i = 0, len = itemDefs.length; i < len; i++) {
            itemDef = itemDefs[i];
            tmp = item;
            item = _insertNode.call(this, index++, itemDef, item, refItem);
            if (item) {
                refItem = tmp;
            } else {
                item = tmp;
            }
        }
        nodes = this.nodes;
        marked = this.marked;
        for (i = 0, len = nodes.length; i < len; i++) {
            item = nodes[i];
            item.updateBranchStyle();
            if (item.isMarked()) {
                marked.push(item);
            }
        }
        this._doSort();
        delete this._local.maxSize;
    };
    thi$.insertNodes = function(index, itemDefs) {
        _updateModels.call(this, "insert", itemDefs, index);
        if (!this.nodes) {
            this.nodes = LinkedList.$decorate([]);
        }
        if (this.isPiecewise()) {
            if (this.nodes.length < this.getPieceSize()) {
                _loadNextPiece.call(this);
            }
        } else {
            _insertNodes.call(this, index, itemDefs);
        }
    };
    thi$._doSort = function() {
        var tree = this;
        var _func = function(item1, item2) {
            return tree.getNodeIndex(item1) - tree.getNodeIndex(item2);
        };
        this.marked.sort(_func);
        this.selected.sort(_func);
    };
    thi$.removeNode = function(item) {
        if (!item || !item.instanceOf(js.awt.TreeItem)) {
            return;
        }
        _keepScroll.call(this);
        var pitem = item.parentItem(), nodes = pitem && pitem !== item ? pitem.nodes : this.nodes;
        if (Class.isArray(nodes)) {
            LinkedList.$decorate(nodes);
            nodes.remove(item);
        }
        item.removeAllNodes();
        delete this.cache[item.uuid()];
        this.marked.remove(item);
        this.selected.remove(item);
        item.destroy();
        this._doSort();
        _setMaxSize.$delay(this, 50, true);
        _keepScroll.$delay(this, 50, true);
    };
    thi$.removeNodes = function(index, length, isDestroying) {
        var nodes = this.nodes || [], cnt = nodes.length, cache = this.cache, marked = this.marked, selected = this.selected, item;
        if (!Class.isNumber(index)) {
            index = 0;
        } else {
            index = index < 0 ? 0 : index >= cnt ? cnt - 1 : index;
        }
        if (!Class.isNumber(length)) {
            length = cnt - index;
        } else {
            length = length < 0 ? 0 : index + length > cnt ? cnt - index : length;
        }
        _keepScroll.call(this);
        _updateModels.call(this, "remove", null, index, length);
        nodes = nodes.splice(index, length);
        while (nodes.length > 0) {
            item = nodes.shift();
            item.removeAllNodes();
            delete cache[item.uuid()];
            item.mark(false);
            marked.remove(item);
            item.setHover(false);
            item.setTriggered(false);
            selected.remove(item);
            item.destroy();
        }
        if (isDestroying === true) {
            return;
        }
        this._doSort();
        _setMaxSize.$delay(this, 50, true);
        _keepScroll.$delay(this, 50, true);
    };
    thi$.removeAllNodes = function(isDestroying) {
        this.marked.clear();
        this.selected.clear();
        _updateModels.call(this, "clear");
        this._local.scrollLeft = 0;
        this._local.scrollTop = 0;
        _keepScroll.call(this, true);
        var nodes = this.nodes;
        if (nodes) {
            this.removeNodes(0, nodes.length, isDestroying);
        }
    };
    thi$.setResNodes = function(nodes) {
        var len = Class.isArray(nodes) ? nodes.length : 0;
        this.def.nodes = nodes;
        this.clearAllSelected();
        this.removeAllNodes(len > 0);
        if (len > 0) {
            this.insertNodes(0, nodes);
        }
    };
    var _getNodesByAttribute = function(nodes, attr, value, fetchAll, recursive) {
        if (!Class.isArray(nodes) || nodes.length == 0 || !Class.isString(attr) || attr.length == 0) {
            return null;
        }
        var rst = [], len = nodes.length, i, node, av, tmp, args;
        for (i = 0; i < len; i++) {
            node = nodes[i];
            av = node[attr];
            if (av === value) {
                rst.push(node);
                if (fetchAll !== true) {
                    return rst;
                }
            }
            if (recursive === true) {
                args = [ node.nodes, attr, value, fetchAll, recursive ];
                tmp = _getNodesByAttribute.apply(this, args);
                if (Class.isArray(tmp)) {
                    rst = rst.concat(tmp);
                }
            }
        }
        return rst;
    };
    thi$.getNodesByAttribute = function(attr, value, fetchAll, recursive) {
        var args = [ this.def.nodes, attr, value, fetchAll, recursive ];
        return _getNodesByAttribute.apply(this, args);
    };
    var _getItemsByAttribute = function(items, attr, value, fetchAll, recursive) {
        if (!Class.isArray(items) || items.length == 0 || !Class.isString(attr) || attr.length == 0) {
            return null;
        }
        var rst = [], len = items.length, i, item, av, tmp, args;
        for (i = 0; i < len; i++) {
            item = items[i];
            av = DOM.getAttribute(item.view, attr);
            if (av === value) {
                rst.push(item);
                if (fetchAll !== true) {
                    return rst;
                }
            }
            if (recursive === true) {
                args = [ item.nodes, attr, value, fetchAll, recursive ];
                tmp = _getItemsByAttribute.apply(this, args);
                if (Class.isArray(tmp)) {
                    rst = rst.concat(tmp);
                }
            }
        }
        return rst;
    };
    thi$.getItemsByAttribute = function(attr, value, fetchAll, recursive) {
        var args = [ this.nodes, attr, value, fetchAll, recursive ];
        return _getItemsByAttribute.apply(this, args);
    };
    thi$.getTreeNodeByTypes = function(types, index) {
        var nodes = this.nodes || [];
        if (!Class.isArray(types) || types.length == 0) {
            return nodes[0];
        }
        if (!Class.isFunction(types.indexOf)) {
            LinkedList.$decorate(types);
        }
        return _getTreeNodeByTypes.call(this, nodes, types, index);
    };
    var _getTreeNodeByTypes = function(nodes, types, index) {
        var node, type, tmp;
        for (var i = 0, len = nodes.length; i < len; i++) {
            node = nodes[i];
            type = node.def["type"];
            if (types.indexOf(type) !== -1) {
                index--;
                if (index <= 0) {
                    return node;
                } else {
                    tmp = node.nodes;
                    if (tmp && tmp.length > 0) {
                        return _getTreeNodeByTypes.call(this, tmp, types, index);
                    }
                }
            } else {
                tmp = node.nodes;
                if (tmp && tmp.length > 0) {
                    return _getTreeNodeByTypes.call(this, tmp, types, index);
                }
            }
        }
        return node;
    };
    thi$.moveNode = function(index1, index2) {
        var nodes = this.nodes, len = nodes.length;
        if (!Class.isNumber(index1) || index1 < 0 || index1 >= len || !Class.isNumber(index2) || index2 < 0 || index2 >= len) {
            return;
        }
        var node1 = nodes[index1], node2 = nodes[index2], view1, view2, treeView = this._treeView;
        nodes[index1] = node2;
        nodes[index2] = node1;
        view1 = node1.view;
        view2 = node2.view;
        treeView.removeChild(view1);
        if (index1 < index2) {
            DOM.insertAfter(view1, view2, treeView);
        } else {
            DOM.insertBefore(view1, view2, treeView);
        }
        this._doSort();
    };
    var _updateSelected = function(item) {
        var selected = this.selected, len = selected.length, i, titem, tmp, pitem, changed = false;
        for (i = 0; i < len; i++) {
            titem = tmp = selected[i];
            if (titem === item) {
                continue;
            }
            pitem = tmp.parentItem();
            while (pitem && pitem !== tmp) {
                if (pitem === item) {
                    changed = true;
                    titem.setTriggered(false);
                    selected.remove(titem);
                    break;
                }
                tmp = pitem;
                pitem = tmp.parentItem();
            }
        }
        if (changed) {
            _notifySelectChange.call(this);
        }
    };
    thi$._expandItem = function(item, needNotify, e) {
        var doo = false;
        if (!item || item.def.isRead == false) {
            return doo;
        }
        if (item.isExpanding()) {
            return doo;
        }
        item.setExpanding(true);
        _keepScroll.call(this);
        if (item.isExpanded()) {
            doo = true;
            _updateSelected.call(this, item);
            item.expand(false, needNotify, undefined, e);
            if (item.def.nodes == undefined) {
                item.removeAllNodes();
            }
        } else {
            if (item.def.nodes == undefined) {
                this.dataProvider.getData(item.def, _onGetData.$bind(this, item, needNotify));
            } else {
                doo = true;
                item.expand(true, needNotify, undefined, e);
            }
        }
        return doo;
    };
    thi$.expand = function(item, needNotify, e) {
        if (this._expandItem(item, needNotify, e)) {
            _setMaxSize.$delay(this, 50, true);
            _keepScroll.$delay(this, 50, true);
        }
    };
    var _checkData = function(data) {
        if (!data) {
            return undefined;
        }
        var p = data.permission, nodes, node, len;
        if (p) {
            data.isVisible = permission.isVisible(p);
            data.isRead = permission.isRead(p);
            data.isWrite = permission.isWrite(p);
            data.isExecute = permission.isExecute(p);
        }
        nodes = data.nodes;
        len = Class.isArray(nodes) ? nodes.length : 0;
        for (var i = 0; i < len; i++) {
            node = nodes[i];
            if (node.nodes) {
                nodes[i] = _checkData.call(this, node);
            } else {
                p = node.permission;
                if (p) {
                    node.isVisible = permission.isVisible(p);
                    node.isRead = permission.isRead(p);
                    node.isWrite = permission.isWrite(p);
                    node.isExecute = permission.isExecute(p);
                }
            }
        }
        return data;
    };
    var _onGetData = function(data, item, needNotify) {
        data = _checkData.call(this, data);
        if (data && data.nodes) {
            item.insertNodes(0, data.nodes);
            item.expand(true, needNotify);
            _setMaxSize.$delay(this, 50, true);
            _keepScroll.$delay(this, 50, true);
        } else {
            item.branch.className = DOM.combineClassName(item.className, "branch0");
        }
    };
    thi$.expandAll = function(b, root, e) {
        var nodes = this.nodes, i, len, item;
        if (root) {
            nodes = [ root ];
        }
        if (nodes && nodes.length > 0) {
            if (!b && this.isExpandCacheEnable() && (e && e.getType() === "init")) {
                this.restoreCachedExpand(nodes, e);
                return;
            }
            for (i = 0, len = nodes.length; i < len; i++) {
                item = nodes[i];
                if (b) {
                    if (item.canExpand() && !item.isExpanded()) {
                        if (this.isPiecewise()) {
                            item.expand(b, undefined, undefined, e);
                        } else {
                            item.expandAll(b, item, e);
                        }
                    }
                } else {
                    if (item.canExpand() && item.isExpanded()) {
                        _updateSelected.call(this, item);
                        item.expand(b, undefined, undefined, e);
                    }
                }
            }
        }
        _setMaxSize.$delay(this, 50, true);
        _keepScroll.$delay(this, 50, true);
        this.onAfterExpand.$delay(this, 50);
    };
    var _adjustItemLayers = function() {
        var cache = this.cache, uuid, item;
        for (uuid in cache) {
            item = this.cache[uuid];
            if (item.view.parentNode && !item.isEnabled()) {
                item.adjustLayers("coord");
            }
        }
    };
    thi$.isExpandCacheEnable = function() {
        return this.def.expandCacheEnable === true;
    };
    thi$.defaultExpandLevel = function(level) {
        var U = this._local, M = this.def;
        if (Class.isNumber(level)) {
            U.defaultExpandLevel = level;
        }
        level = Class.isBoolean(U.defaultExpandLevel) ? U.defaultExpandLevel : M.defaultExpandLevel;
        return Class.isNumber(level) ? level : 1;
    };
    thi$.storageCacheKey = function(key, item) {
        var U = this._local;
        if (Class.isString(key) && key.length > 0) {
            U.storageCacheKey = key;
        }
        return U.storageCacheKey;
    };
    thi$.getItemKey = function(item) {
        return item.def["iname"];
    };
    thi$.needCache = function(item) {
        return item.nodes && item.nodes.length > 0;
    };
    var _removeCachedExpandState = function(cache, nodes) {
        var keys = cache.keys, values = cache.values, len = nodes ? nodes.length : 0, i, item, ikey, idx;
        for (i = 0; i < len; i++) {
            item = nodes[i];
            ikey = this.getItemKey(item);
            idx = keys.indexOf(ikey);
            if (idx >= 0) {
                keys.splice(idx, 1);
                delete values[ikey];
            }
            _removeCachedExpandState.call(this, cache, item.nodes);
        }
    };
    thi$.cacheItemExpandState = function(item, expanded) {
        var key, ikey, cache, keys, values, idx, level, b;
        if (!this.isExpandCacheEnable() || !this.needCache(item)) {
            return;
        }
        key = this.storageCacheKey(undefined, item);
        ikey = this.getItemKey(item);
        if (!key || !ikey) {
            return;
        }
        System.log.println(">>> Tree::Cache Expand State of TreeItem#" + ikey + " by " + key);
        try {
            cache = Session.getItem(key);
        } catch (err) {}
        level = this.defaultExpandLevel();
        if (!cache || cache.expandLevel === 1 && level !== 1 || level === 1 && cache.expandLevel !== 1) {
            cache = {
                key: key,
                expandLevel: level,
                keys: [],
                values: {}
            };
        }
        keys = cache.keys;
        values = cache.values;
        b = level > 0 ? true : false;
        if (expanded !== b) {
            if (!values[ikey]) {
                keys.push(ikey);
            }
            values[ikey] = {
                expanded: expanded
            };
        } else {
            idx = keys.indexOf(ikey);
            if (idx >= 0) {
                keys.splice(idx, 1);
                delete values[ikey];
            }
            _removeCachedExpandState.call(this, cache, item.nodes);
        }
        System.log.println(">>> Tree::Current cache:" + JSON.stringify(cache));
        Session.setItem(key, cache);
    };
    thi$.getExpandStateCache = function(item) {
        var key = this.isExpandCacheEnable() ? this.storageCacheKey(undefined, item) : null, cache;
        if (key) {
            try {
                cache = Session.getItem(key);
            } catch (err) {}
        }
        return cache;
    };
    thi$.getCachedExpandState = function(item, defaultToExpand) {
        var isExpanded = !!defaultToExpand, key, cache, keys, values, ikey, obj;
        if (!this.isExpandCacheEnable()) {
            return isExpanded;
        }
        key = this.storageCacheKey(undefined, item);
        if (!key) {
            return isExpanded;
        }
        try {
            cache = Session.getItem(key);
        } catch (err) {}
        values = cache ? cache.values : null;
        ikey = this.getItemKey(item);
        if (ikey && values && values.hasOwnProperty(ikey)) {
            obj = values[ikey] || {};
            isExpanded = obj ? obj.expanded : isExpanded;
        }
        return isExpanded;
    };
    thi$.getTreeItemByKey = function(itemKey, ref) {
        var uuid, item, rst;
        for (uuid in this.cache) {
            item = this.cache[uuid];
            if (this.getItemKey(item) === itemKey) {
                rst = item;
                break;
            }
        }
        return rst;
    };
    thi$.restoreCachedExpand = function(nodes, e) {
        nodes = nodes || this.nodes;
        var len = nodes ? nodes.length : 0, cache, keys, key, jlen, node, item, doo = false;
        for (var i = 0; i < len; i++) {
            node = nodes[i];
            if (!node || !node.isEnabled()) {
                continue;
            }
            cache = this.getExpandStateCache(node);
            if (!cache || cache.key === key) {
                continue;
            }
            System.log.println(">>> Tree::Restore: " + JSON.stringify(cache));
            key = cache.key;
            keys = cache.keys;
            jlen = keys ? keys.length : 0;
            for (var j = 0; j < jlen; j++) {
                item = this.getTreeItemByKey(keys[j], node);
                if (item && item.isEnabled()) {
                    doo = true;
                    this.expandToItem(item, e, false);
                    if (item.isEnabled() && !item.isExpanded()) {
                        this._expandItem(item);
                    }
                }
            }
        }
        if (doo) {
            _setMaxSize.$delay(this, 50, doo);
            _keepScroll.$delay(this, 50, true);
        }
    };
    thi$.onAfterExpand = function() {
        _adjustItemLayers.call(this);
    };
    thi$.getNodes = function(filter, recursive) {
        var nodes = this.nodes, i, len, item, ret = [];
        for (i = 0, len = nodes.length; i < len; i++) {
            item = nodes[i];
            if (typeof filter == "function") {
                if (filter(item.def)) {
                    ret.push(item);
                }
            } else {
                ret.push(item);
            }
            if (recursive === true && item.hasChildren()) {
                item.getNodes(0, null, filter, true, ret);
            }
        }
        return ret;
    };
    thi$.getNodeIndex = function(item) {
        var nodes = this.nodes;
        for (var i = 0; i < nodes.length; i++) {
            if (nodes[i] == item) {
                return i;
            }
        }
        return -1;
    };
    thi$.getAllNodes = function() {
        return this.nodes;
    };
    thi$.getAllSelected = function() {
        return this.selected;
    };
    thi$.clearAllSelected = function() {
        var selected = this.selected, item;
        while (selected.length > 0) {
            item = selected.shift();
            item.setHover(false);
            item.setTriggered(false);
        }
        this._doSort();
    };
    thi$.getAllMarked = function() {
        return this.marked;
    };
    thi$.clearAllMarked = function(doSort) {
        var marked = this.marked, item;
        while (marked.length > 0) {
            item = marked.shift();
            item.mark(false);
        }
        if (doSort !== false) {
            this._doSort();
        }
    };
    thi$.markNode = function(item) {
        if (!item.isMarkable()) {
            return;
        }
        item.mark(!item.isMarked());
        if (item.isMarked()) {
            this.marked.push(item);
        } else {
            this.marked.remove(item);
        }
        this._doSort();
    };
    thi$.setMultiEnable = function(b) {
        this.def.multiEnable = b === true;
    };
    thi$.isMultiEnable = function() {
        return this.def.multiEnable;
    };
    thi$.getMoveObjectDef = function(item) {
        return {};
    };
    thi$.getMoveObject = function(e) {
        var moveObj = this.moveObj, item, iidef, mdef, mClz, absXY, size, bounds, state;
        if (!moveObj) {
            absXY = e.eventXY();
            item = this.cache[e.srcElement.uuid];
            iidef = item.def;
            if (iidef.isExecute == false) {
                return null;
            }
            if (this.selected.length == 0) {
                state = new js.awt.State(this.getState());
                state.setHover(false);
                state.setTriggered(true);
                item.setState(state.getState());
                this.selected.push(item);
                this._doSort();
            }
            mdef = this.getMoveObjectDef(item) || {};
            mClz = mdef.classType;
            if (Class.isString(mClz) && mClz.length > 0) {
                mClz = Class.forName(mClz);
            }
            mClz = mClz || js.awt.TreeMoveObject;
            moveObj = this.moveObj = new mClz(mdef, this.Runtime(), this);
            moveObj.setMovingPeer(this);
            moveObj.appendTo(document.body);
            size = moveObj.getPreferredSize();
            moveObj.setBounds(absXY.x + 8, absXY.y + 8, size.width, size.height, 5);
        }
        return moveObj;
    };
    var _keepScroll = function(restore) {
        var U = this._local, el = this.view;
        if (!restore) {
            U.scrollLeft = el.scrollLeft;
            U.scrollTop = el.scrollTop;
        } else {
            el.scrollLeft = U.scrollLeft;
            el.scrollTop = U.scrollTop;
        }
    };
    var _adjustTreeView = function() {
        var bounds = DOM.getBounds(this._treeShell), MBP = bounds.MBP;
        DOM.setSize(this._treeView, bounds.width - MBP.BPW, bounds.height - MBP.BPH);
    };
    var _setMaxSize = function(force) {
        var rect = _getMaxSize.call(this, force), box = this.getBounds(), cw = box.innerWidth, ch = box.innerHeight, treeShell = this._treeShell, supports = J$VM.supports, w, h, wrest, hrest, changed = false;
        if (rect.width >= cw) {
            w = rect.width;
            wrest = 0;
        } else {
            w = cw;
            wrest = cw - rect.width;
        }
        if (rect.height >= ch) {
            h = rect.height;
            hrest = 0;
        } else {
            h = ch;
            hrest = ch - rect.height;
        }
        if (wrest > 0 || hrest > 0) {
            if (wrest == 0 && hrest > 0) {
                h -= Math.min(hrest, supports.hscrollbar);
            }
            if (hrest == 0 && wrest > 0) {
                w -= Math.min(wrest, supports.vscrollbar);
            }
        }
        box = DOM.getBounds(treeShell);
        if (w !== box.width || h !== box.height) {
            this.view.style.overflow = "hidden";
            DOM.setSize(treeShell, w, h);
            this.view.style.overflow = "auto";
        }
        _adjustTreeView.call(this);
    };
    var _getMaxSize = function(force) {
        var treeview = this._treeView, ret = this._local.maxSize, bounds;
        if (force !== true && ret) {
            System.log.println("The cached maxSize: " + JSON.stringify(ret));
            return ret;
        }
        treeview.style.overflow = "hidden";
        DOM.setSize(treeview, 0, 0);
        ret = this._local.maxSize = {
            width: treeview.scrollWidth,
            height: treeview.scrollHeight
        };
        treeview.style.overflow = "visible";
        bounds = DOM.getBounds(this._treeShell);
        ret.width += bounds.MBP.BPW;
        ret.height += bounds.MBP.BPH;
        System.log.println("The computed maxSize: " + JSON.stringify(ret));
        return ret;
    };
    thi$.onResized = function(fire) {
        delete this._local.maxSize;
        $super(this);
    }.$override(this.onResized);
    thi$.doLayout = function(force) {
        if ($super(this)) {
            _setMaxSize.call(this);
            return true;
        }
        return false;
    }.$override(this.doLayout);
    thi$.getOptimalSize = function() {
        var size = _getMaxSize.call(this), bounds = this.getBounds(), w = size.width, h = size.height;
        w += bounds.MBP.BPW;
        h += bounds.MBP.BPH;
        return {
            width: w,
            height: h
        };
    };
    thi$.scrollTo = function(ele) {
        var view = this.view, bounds, MBP, box, x, y, x0, y0, scrollLeft, scrollTop;
        if (!ele || !DOM.contains(this._treeView, ele)) {
            return;
        }
        bounds = this.getBounds();
        MBP = bounds.MBP;
        x = bounds.absX;
        y = bounds.absY;
        x0 = x + (bounds.clientWidth - MBP.BPW);
        y0 = y + (bounds.clientHeight - MBP.BPH);
        scrollLeft = view.scrollLeft;
        scrollTop = view.scrollTop;
        System.log.println("Scroll Position: (" + scrollLeft + ", " + scrollTop + ")");
        box = DOM.getBounds(ele);
        if (box.absX < x) {
            scrollLeft -= x - box.absX;
        } else {
            if (box.absX >= x0) {
                scrollLeft += box.absX - x0 + box.width;
            }
        }
        if (box.absY < y) {
            scrollTop -= y - box.absY;
        } else {
            if (box.absY >= y0) {
                scrollTop += box.absY - y0 + box.height;
            }
        }
        System.log.println("New Scroll Position: (" + scrollLeft + ", " + scrollTop + ")");
        if (scrollLeft != view.scrollLeft) {
            view.scrollLeft = scrollLeft;
        }
        if (scrollTop != view.scrollTop) {
            view.scrollTop = scrollTop;
        }
    };
    var _notifySelectChange = function(e, item) {
        if (!e) {
            e = new Event("selectchanged", {}, this);
            e.srcElement = item ? item.view : this._treeView;
        }
        if (item) {
            e.setEventTarget(item);
        }
        e.setType("selectchanged");
        e.setData(this.getAllSelected());
        this.notifyPeer(this.msgType(), e);
    };
    thi$.selectItem = function(item, e) {
        if (!e) {
            e = new Event("selectchanged", {}, this);
            e.srcElement = item ? item.view : this._treeView;
        }
        var isMulti = this.def.multiEnable, selected = this.selected, tmp, doo = false;
        if (item && item.isEnabled()) {
            if (item.canDrag()) {
                doo = true;
                if (isMulti && e.ctrlKey === true) {
                    item.setTriggered(!item.isTriggered());
                    if (item.isTriggered()) {
                        selected.push(item);
                    } else {
                        selected.remove(item);
                    }
                } else {
                    if (isMulti && e.shiftKey === true) {
                        var first = selected.length > 0 ? selected[selected.length - 1] : undefined;
                        if (first == undefined) {
                            item.setTriggered(true);
                            selected.push(item);
                        } else {
                            this.clearAllSelected();
                        }
                        if (first && item) {
                            if (first.parentItem() == item.parentItem()) {
                                var nodes = first.parentItem().getNodes(first, item), node;
                                for (var i = 0, len = nodes.length; i < len; i++) {
                                    node = nodes[i];
                                    node.setTriggered(true);
                                    selected.push(node);
                                }
                            } else {
                                item.setTriggered(true);
                                selected.push(item);
                            }
                        }
                    } else {
                        if (item.isTriggered()) {
                            doo = false;
                        } else {
                            this.clearAllSelected();
                            item.setTriggered(true);
                            selected.push(item);
                        }
                    }
                }
                this._doSort();
                e.setEventTarget(item);
            }
        }
        if (doo) {
            _notifySelectChange.call(this, e);
        }
    };
    var _doSelect = function(e) {
        var el = e.srcElement, item = this.cache[el.uuid];
        if (item && !item.isMarkable()) {
            this.selectItem(item, e);
        }
    };
    var _onclick = function(e) {
        var isW = this.def.itemWholeTrigger !== false, el = e.srcElement, uuid = el.uuid, item = this.cache[uuid];
        if (item && item.isEnabled()) {
            if (e.getType() == "click") {
                if (this.isFakeMoreItem(item)) {
                    this.loadNextPiece(item);
                    return;
                }
                if ((el === item.branch || isW && !item.canDrag()) && item.canExpand()) {
                    this.expand(item, undefined, e);
                } else {
                    if ((el === item.marker || isW) && item.isMarkable()) {
                        this.markNode(item);
                        e.setType("markchanged");
                        e.setEventTarget(item);
                        this.notifyPeer(this.msgType(), e);
                    } else {
                        if (this.def.itemLabelOnlyTrigger && el !== item.marker && isW === false && item.isMarkable()) {
                            e.setType("selectchanged");
                            this.selectItem(item, e);
                        }
                    }
                }
            }
        }
    };
    var _onmouseover = function(e) {
        var from = e.fromElement, to = e.toElement, fid = from ? from.uuid : undefined, tid = to ? to.uuid : undefined, fitem, titem, cache = this.cache;
        if (fid !== tid) {
            fitem = cache[fid];
            titem = cache[tid];
            if (fitem && fitem.isHover() && fitem.isEnabled()) {
                fitem.setHover(false);
            }
            if (titem && !titem.isHover() && titem.isEnabled()) {
                titem.setHover(true);
            }
        }
    };
    var _onmousedown = function(e) {
        var xy = e.eventXY(), el, uuid, item;
        if (DOM.isInScrollbar(xy.x, xy.y, this.view, this.getBounds())) {
            return e.cancelDefault();
        }
        el = e.srcElement;
        item = this.cache[el.uuid];
        if (item && el === item.branch) {
            return e.cancelDefault();
        }
        if (!this.isFakeMoreItem(item)) {
            _doSelect.call(this, e);
        }
        return e.cancelDefault();
    };
    thi$.destroy = function() {
        this.removeAllNodes(true);
        delete this.nodes;
        delete this.cache;
        delete this.selected;
        delete this.marked;
        delete this.dataProvider;
        delete this._local.itemDefs;
        var ele = this._treeView;
        delete this._treeView;
        DOM.remove(ele, true);
        ele = this._treeShell;
        delete this._treeShell;
        DOM.remove(ele, true);
        $super(this);
    }.$override(this.destroy);
    var _ondrag = function(e) {
        this.notifyPeer(this.msgType(), e);
    };
    thi$.spotIndex = function(ele) {
        var item = ele ? this.cache[ele.uuid] : null;
        return item && item.canDrag() ? item.spotIndex(ele) : -1;
    };
    thi$.setClassName = function(className, force) {
        $super(this);
        var ele = this._treeShell;
        if (ele) {
            ele.className = DOM.combineClassName(this.className, "treeshell");
        }
    }.$override(this.setClassName);
    thi$._init = function(def, Runtime, dataProvider) {
        if (def == undefined) {
            return;
        }
        def.classType = def.classType || "js.awt.Tree";
        def.className = def.className || "jsvm_tree";
        def.stateless = true;
        def.mover = def.mover || {};
        def.mover.longpress = def.mover.longpress || 10;
        def.multiEnable = def.multiEnable === true;
        $super(this, def, Runtime);
        this._local.alwaysRemoveChild = def.alwaysRemoveChild;
        this.canPiecewise = def.piecewise === true;
        this.cache = {};
        this.selected = LinkedList.$decorate([]);
        this.marked = LinkedList.$decorate([]);
        this.showTip(def.showTip);
        var treeShell = this._treeShell = DOM.createElement("DIV");
        treeShell.className = DOM.combineClassName(this.className, "treeshell");
        treeShell.style.cssText = "position:relative;width:100%;height:100%;" + "overflow:visible;";
        DOM.appendTo(treeShell, this.view);
        var treeView = this._treeView = DOM.createElement("DIV");
        treeView.style.cssText = "position:relative;overflow:visible;" + "border:0 none;padding:0px;";
        DOM.appendTo(treeView, treeShell);
        this.setDataProvider(dataProvider || new js.awt.AbstractTreeDataProvider(this.Runtime()));
        if (def.nodes && def.nodes.length > 0) {
            this.insertNodes(0, def.nodes);
        }
        this.attachEvent("mouseover", 4, this, _onmouseover);
        this.attachEvent("mouseout", 4, this, _onmouseover);
        this.attachEvent("click", 4, this, _onclick);
        this.attachEvent("dblclick", 4, this, _onclick);
        this.attachEvent("mousedown", 4, this, _onmousedown);
        if (this.isMovable()) {
            MQ.register(this.dataProvider.getDragMsgType(), this, _ondrag);
        }
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Component).$implements(js.awt.TreeDataFilter);

js.awt.AbstractTreeDataProvider = function(Runtime, imageMap, expandMap, dragMap) {
    var CLASS = js.awt.AbstractTreeDataProvider, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System;
    thi$.destroy = function() {
        delete this.imageMap;
        delete this.expandMap;
        delete this.dragMap;
        $super(this);
    }.$override(this.destroy);
    thi$._init = function(Runtime, imageMap, expandMap, dragMap) {
        if (Runtime == undefined) {
            return;
        }
        this._local = this._local || {};
        this.setImageMap(imageMap);
        this.setExpandableMap(expandMap);
        this.setDragableMap(dragMap);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.lang.Object).$implements(js.awt.TreeDataProvider);

js.awt.TreeMoveObject = function(def, Runtime, tree) {
    var CLASS = js.awt.TreeMoveObject, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, dataProvider;
    thi$.getMovingData = function() {
        return this.movingPeer.selected;
    };
    thi$.getMovingMsgType = function() {
        return dataProvider.getDragMsgType();
    };
    thi$.getMovingMsgRecvs = function() {
        return dataProvider.getDragMsgRecvs();
    };
    thi$.releaseMoveObject = function() {
        var tree = this.movingPeer;
        tree.clearAllSelected();
        $super(this);
    }.$override(this.releaseMoveObject);
    thi$.getPreferredSize = function(nocache) {
        var ret = this.def.prefSize, ele, d, w = 0, h = 0, ch = 0;
        if (nocache === true || !ret) {
            d = this.getBounds();
            w += d.MBP.BPW;
            h += d.MBP.BPH;
            ele = this.icon;
            if (ele) {
                d = DOM.getBounds(ele);
                w += d.width + d.MBP.marginLeft + d.MBP.marginRight;
                ch = d.height;
            }
            ele = this.label;
            d = DOM.getBounds(ele);
            w += d.width + d.MBP.marginLeft + d.MBP.marginRight;
            h += Math.max(ch, d.height);
            ret = {
                width: w,
                height: h
            };
        }
        return ret;
    }.$override(this.getPreferredSize);
    thi$.repaint = function() {
        if ($super(this)) {
            var bounds = this.getBounds(), buf = new js.lang.StringBuffer(), left = bounds.MBP.paddingLeft, top = bounds.MBP.paddingTop, width = bounds.innerWidth, icon = this.icon, label, s;
            if (icon) {
                buf.append("position:absolute;left:").append(left).append("px;").append("top:").append(top).append("px;");
                icon.style.cssText = buf.toString();
                bounds = this.icon.bounds;
                left += bounds.width + bounds.MBP.marginRight;
                width -= left;
            }
            label = this.label;
            if (width <= 0 && label.textContent) {
                width = label.scrollWidth + 2;
            }
            buf.clear().append("position:absolute;left:").append(left).append("px;").append("top:").append(top).append("px;").append("width:").append(width).append("px;");
            label.style.cssText = buf.toString();
        }
    }.$override(this.repaint);
    thi$._init = function(def, Runtime, tree) {
        if (def === undefined) {
            return;
        }
        def.classType = "js.awt.TreeMoveObject";
        var selected = tree.selected, treeClazz, ext, item, icon, label, text, D;
        if (!def.className) {
            treeClazz = tree.def.className || tree.className;
            ext = selected.length === 1 ? "moveobj0" : "moveobj1";
            def.className = DOM.combineClassName(treeClazz, ext);
        }
        def.css = "position:absolute;" + (def.css || "");
        def.stateless = true;
        $super(this, def, Runtime);
        dataProvider = tree.dataProvider;
        item = selected[0];
        icon = item ? item.icon : null;
        if (icon) {
            D = DOM.getBounds(icon);
            icon = this.icon = icon.cloneNode(true);
            icon.bounds = System.objectCopy(D || {}, {}, true);
            DOM.appendTo(icon, this.view);
        }
        text = item ? item.getText() : "";
        label = this.label = item.label.cloneNode(true);
        label.innerHTML = js.lang.String.encodeHtml(text || "");
        DOM.appendTo(label, this.view);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Component).$implements(js.awt.MoveObject);

$package("js.awt");

js.awt.Frame = function() {
    var CLASS = js.awt.Frame, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM;
    thi$.getWindow = function() {
        if (this.instanceOf(js.awt.IFrame)) {
            try {
                return this.view.contentWindow;
            } catch (x) {
                return null;
            }
        }
        return null;
    };
    thi$.getDocument = function() {
        var win = this.getWindow();
        try {
            return win ? win.document : null;
        } catch (x) {}
        return null;
    };
    thi$.getBody = function() {
        var doc = this.getDocument();
        return doc ? doc.body : null;
    };
    thi$.setSrc = function(url) {
        this.def.src = url;
    };
    thi$.getSrc = function() {
        return this.def.src;
    };
    thi$.setContent = function(html, href) {
        if (this.instanceOf(js.awt.IFrame)) {
            var doc = this.getDocument();
            if (doc) {
                doc.open();
                doc.write(html);
                doc.close();
            }
        } else {}
    };
    var _load = function(url) {
        F.fetch(url, {
            method: "GET"
        }).then(function(resp) {
            resp.status === 200 || resp.status === 304 ? this.setContent(resp.body) : this.setContent(resp.status + ":" + resp.statusText);
        }.bind(this), function(ex) {
            F.error(ex);
        }.bind(this));
    };
    thi$.load = function() {
        if (this.instanceOf(js.awt.IFrame)) {
            Event.attachEvent(self, "scroll", 0, this, function() {
                if (self.scrollY != 0) {
                    self.scrollTo(0, 0);
                }
            });
            this.view.src = this.def.src;
        } else {
            _load.call(this, this.def.src);
        }
    };
    thi$.refresh = function() {};
};

js.awt.ScriptScope = function(host) {
    var CLASS = js.awt.ScriptScope, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ;
    thi$.exec = function(script) {
        var host = this.host;
        (function(s) {
            eval(s);
        }).$delay(this, 1, script);
    };
    thi$.clear = function() {
        for (var p in this) {
            if (this.hasOwnProperty(p)) {
                delete this.p;
            }
        }
    };
    thi$._init = function(host) {
        if (host == undefined) {
            return;
        }
        this.host = host;
    };
    this._init.apply(this, arguments);
}.$extend(js.util.EventTarget);

$package("js.awt");

js.awt.IFrame = function(def, Runtime) {
    var CLASS = js.awt.IFrame, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ;
    thi$.refresh = function() {
        var win = this.getWindow();
        if (win) {
            MQ.post("refresh", "", [], win);
        }
    }.$override(this.refresh);
    var _showCover = function() {
        this.showMoveCover(true);
    };
    var _hideCover = function() {
        this.showMoveCover(false);
    };
    thi$.onload = function(e) {
        var doc = this.getDocument();
        if (doc && doc.URL != "about:blank") {
            try {
                Event.attachEvent(doc, "mousedown", 0, this, this.onmousedown);
            } catch (x) {
                var err = e ? e.message : "Can't attach mousedown event to IFrame";
                System.err.println(err);
            }
        }
        return true;
    };
    var _onunload = function(e) {
        var doc = this.getDocument();
        if (doc && doc.URL != "about:blank") {
            try {
                Event.detachEvent(doc, "mousedown", 0, this, this.onmousedown);
            } catch (x) {}
        }
        return true;
    };
    thi$.onmousedown = function(e) {
        var win = this.getWindow();
        if (win && win.parent != win.self) {
            MQ.post("js.awt.event.LayerEvent", new Event("message", "", this), [ this.Runtime().uuid() ]);
        }
    };
    thi$._init = function(def, Runtime) {
        if (def == undefined) {
            return;
        }
        def.classType = def.classType || "js.awt.IFrame";
        def.className = def.className || "jsvm_iframe";
        def.viewType = "IFRAME";
        def.css = "border:0px none;" + (def.css || "");
        $super(this);
        this.setAttribute("frameBorder", "0");
        this.setAttribute("flex", "none");
        if (def.src) {
            this.setSrc(def.src);
        }
        Event.attachEvent(this.view, "load", 0, this, this.onload);
        Event.attachEvent(this.view, "unload", 0, this, _onunload);
        MQ.register(Event.SYS_EVT_MOVING, this, _showCover);
        MQ.register(Event.SYS_EVT_MOVED, this, _hideCover);
        MQ.register(Event.SYS_EVT_RESIZING, this, _showCover);
        MQ.register(Event.SYS_EVT_RESIZED, this, _hideCover);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Component).$implements(js.awt.Frame);

$package("js.awt");

js.awt.VFrame = function(def, Runtime) {
    var CLASS = js.awt.VFrame, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ;
    thi$.setContent = function(html, href, scope) {
        if (!_destroyScope.call(this)) {
            return;
        }
        this.scope = scope || new js.awt.ScriptScope(this.getPeerComponent() || this);
        var script, testre = /<script\b[\s\S]*?>([\s\S]*?)<\/script/i;
        html = html.replace(/<!--[\s\S]*?-->/g, "");
        this.view.innerHTML = html.replace(/<script.*?>[\s\S]*?<\/.*?script>/gi, "");
        if (testre.test(html)) {
            var re = /<script\b[\s\S]*?>([\s\S]*?)<\/script/gi;
            while (script = re.exec(html)) {
                this.scope.exec(script[1]);
            }
        }
        if (href === undefined || href === null) {
            _convert.call(this, this.view, this.scope);
        }
        this.scope.fireEvent(new Event("load"));
    };
    var _destroyScope = function() {
        var scope = this.scope;
        if (Class.typeOf(scope) != "object") {
            return true;
        }
        if (typeof scope.onunload == "function") {
            if (!scope.onunload()) {
                return false;
            }
        }
        scope.destroy();
        this.scope = null;
        return true;
    };
    var _convert = function(o, scope) {
        var evnames = [ "onchange", "onsubmit", "onreset", "onselect", "onblur", "onfocus", "onkeydown", "onkeypress", "onkeyup", "onclick", "ondblclick", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup" ];
        var code;
        function attachEventCode(code, scope) {
            if (typeof code != "string") {
                code = code.toString();
                code = code.substr(code.indexOf("{") + 1);
                code = code.substr(0, code.lastIndexOf("}"));
            }
            return function(e) {
                var fn = new Function("e", "scope", code);
                return fn.call(scope, e, scope);
            };
        }
        var elements = o.getElementsByTagName("*");
        for (var a = 0; a < elements.length; a++) {
            var c = elements[a];
            for (var b = 0; b < evnames.length; b++) {
                if (c.getAttribute && (code = c.getAttribute(evnames[b]))) {
                    c[evnames[b]] = attachEventCode(code, scope);
                }
            }
            if (c.tagName == "A" && c.target == "" && (code = c.getAttribute("href"))) {
                if (code.toLowerCase() != "javascript:void(0)" && code != "#") {
                    c.onclick = function(w, c) {
                        return function() {
                            w.setSrc(c);
                            w.load();
                            return false;
                        };
                    }(this, code);
                }
            }
        }
    };
    thi$._init = function(def, Runtime) {
        if (def == undefined) {
            return;
        }
        def.classType = def.classType || "js.awt.VFrame";
        def.className = def.className || "jsvm_vframe";
        var layout = def.layout = def.layout || {};
        layout.classType = layout.classType || "js.awt.BorderLayout";
        $super(this);
        if (def.src) {
            this.setSrc(def.src);
        }
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Container).$implements(js.awt.Frame);

$package("js.awt");

js.awt.LayerManager = function(def, Runtime, view) {
    var CLASS = js.awt.LayerManager, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ;
    thi$.removeComponent = function(comp) {
        comp = $super(this);
        this.stack.remove(comp);
    }.$override(this.removeComponent);
    thi$.removeAll = function() {
        this.stack.clear();
        $super(this);
    }.$override(this.removeAll);
    thi$.cleanLayers = function(e) {
        if (window.parent != window.self) {
            MQ.post("js.awt.event.LayerEvent", "", [], window.parent);
        }
        return this.onHide(e);
    };
    thi$.indexOf = function(layer) {
        return this.stack.indexOf(layer);
    };
    var _calHRect = function(rect, w, h) {
        var bodySize = this._bodySize, hRect = {
            x: 0,
            y: 0
        }, x, y, avWidth, avHeight, area;
        x = rect.x;
        y = rect.y + rect.height;
        avWidth = bodySize.width - x;
        avHeight = bodySize.height - y;
        area = {
            AID: "A",
            x: x,
            y: y,
            width: avWidth,
            height: avHeight
        };
        if (avHeight >= h && avWidth >= w) {
            hRect.x = x;
            hRect.y = y;
            hRect.area = area;
            return hRect;
        }
        var bAvRect = {
            x: x,
            y: y,
            width: avWidth,
            height: avHeight,
            x1: avWidth >= w ? x : x + avWidth - w,
            y1: avHeight >= h ? y : y + avHeight - h,
            area: area
        };
        x = rect.x + rect.width;
        avWidth = x;
        area = {
            AID: "D",
            x: 0,
            y: y,
            width: avWidth,
            height: avHeight
        };
        if (avHeight >= h && avWidth >= w) {
            hRect.x = x - w;
            hRect.y = y;
            hRect.area = area;
            return hRect;
        }
        if (avWidth >= bAvRect.width) {
            bAvRect.x = x - w;
            bAvRect.y = y;
            bAvRect.width = avWidth;
            bAvRect.x1 = bAvRect.x;
            bAvRect.area = area;
        }
        x = rect.x;
        y = rect.y;
        avWidth = bodySize.width - x;
        avHeight = y;
        area = {
            AID: "B",
            x: x,
            y: 0,
            width: avWidth,
            height: avHeight
        };
        if (avHeight >= h && avWidth >= w) {
            hRect.x = x;
            hRect.y = y - h;
            hRect.area = area;
            return hRect;
        }
        var tAvRect = {
            x: x,
            y: y - h,
            width: avWidth,
            height: avHeight,
            x1: avWidth >= w ? x : x + avWidth - w,
            y1: y - h,
            area: area
        };
        x = rect.x + rect.width;
        avWidth = x;
        area = {
            AID: "C",
            x: 0,
            y: 0,
            width: avWidth,
            height: avHeight
        };
        if (avHeight >= h && avWidth >= w) {
            hRect.x = x - w;
            hRect.y = y - h;
            hRect.area = area;
            return hRect;
        }
        if (avWidth >= tAvRect.width) {
            tAvRect.x = x - w;
            tAvRect.y = y - h;
            tAvRect.width = avWidth;
            tAvRect.x1 = tAvRect.x;
            tAvRect.area = area;
        }
        var avRect = undefined;
        if (bAvRect.height >= h && tAvRect.height >= h) {
            avRect = bAvRect.width >= tAvRect.width ? bAvRect : tAvRect;
        } else {
            var bArea = Math.min(bAvRect.width, w) * Math.min(bAvRect.height, h);
            var tArea = Math.min(tAvRect.width, w) * Math.min(tAvRect.height, h);
            avRect = bArea >= tArea ? bAvRect : tAvRect;
        }
        avRect.narrow = true;
        return avRect;
    };
    var _calVRect = function(rect, w, h) {
        var bodySize = this._bodySize, vRect = {
            x: 0,
            y: 0
        }, x, y, avWidth, avHeight, area;
        x = rect.x + rect.width;
        y = rect.y;
        avWidth = bodySize.width - x;
        avHeight = bodySize.height - y;
        area = {
            AID: "C",
            x: x,
            y: y,
            width: avWidth,
            height: avHeight
        };
        if (avWidth >= w && avHeight >= h) {
            vRect.x = x;
            vRect.y = y;
            vRect.area = area;
            return vRect;
        }
        var rightAvRect = {
            x: x,
            y: y,
            width: avWidth,
            height: avHeight,
            x1: avWidth >= w ? x : x + avWidth - w,
            y1: avHeight >= h ? y : y + avHeight - h,
            area: area
        };
        y = rect.y + rect.height;
        avHeight = y;
        area = {
            AID: "D",
            x: x,
            y: 0,
            width: avWidth,
            height: avHeight
        };
        if (avWidth >= w && avHeight >= h) {
            vRect.x = x;
            vRect.y = y - h;
            vRect.area = area;
            return vRect;
        }
        if (avHeight > rightAvRect.height) {
            rightAvRect.x = x;
            rightAvRect.y = y - h;
            rightAvRect.height = avHeight;
            rightAvRect.y1 = rightAvRect.y;
            rightAvRect.area = area;
        }
        x = rect.x;
        y = rect.y;
        avWidth = x;
        avHeight = bodySize.height - y;
        area = {
            AID: "B",
            x: 0,
            y: y,
            width: avWidth,
            height: avHeight
        };
        if (avWidth >= w && avHeight >= h) {
            vRect.x = x - w;
            vRect.y = y;
            vRect.area = area;
            return vRect;
        }
        var leftAvRect = {
            x: x - w,
            y: y,
            width: avWidth,
            height: avHeight,
            x1: x - w,
            y1: avHeight >= h ? y : y + avHeight - h,
            area: area
        };
        y = rect.y + rect.height;
        avHeight = y;
        area = {
            AID: "A",
            x: 0,
            y: 0,
            width: avWidth,
            height: avHeight
        };
        if (avWidth >= w && avHeight >= h) {
            vRect.x = x - w;
            vRect.y = y - h;
            vRect.area = area;
            return vRect;
        }
        if (avHeight > leftAvRect.height) {
            leftAvRect.x = x - w;
            leftAvRect.y = y - h;
            leftAvRect.height = avHeight;
            leftAvRect.y1 = leftAvRect.y;
            leftAvRect.area = area;
        }
        var avRect = undefined;
        if (leftAvRect.width >= w && rightAvRect.width >= w) {
            avRect = leftAvRect.height > rightAvRect.height ? leftAvRect : rightAvRect;
        } else {
            var leftArea = Math.min(leftAvRect.width, w) * Math.min(leftAvRect.height, h);
            var rightArea = Math.min(rightAvRect.width, w) * Math.min(rightAvRect.height, h);
            avRect = leftArea > rightArea ? leftAvRect : rightAvRect;
        }
        avRect.narrow = true;
        return avRect;
    };
    var _calAvaiRect = function(rect, w, h) {
        if (rect.isVertical) {
            return _calVRect.call(this, rect, w, h);
        } else {
            return _calHRect.call(this, rect, w, h);
        }
    };
    var _show = function(layer, rect) {
        System.log.println(new Date().toString() + " : show " + layer.uuid() + "-" + layer.className);
        var styles = {
            visibility: "hidden",
            position: "absolute",
            left: "-10000px",
            top: "-10000px"
        };
        layer.applyStyles(styles);
        if (this.indexOf(layer) < 0) {
            this.addComponent(layer);
            this.stack.push(layer);
            layer.onLayerAppended();
        }
        var M = layer.def, size = layer.getPreferredSize(), w = size.width, h = size.height, avaiRect = _calAvaiRect.call(this, rect, w, h);
        System.log.println("Layer Size: " + JSON.stringify(size || {}));
        System.log.println("Available Rectangle: " + JSON.stringify(avaiRect));
        var x, y, bounds;
        if (avaiRect.narrow == true) {
            var b = layer.isAdjustPosToFit();
            x = !b ? avaiRect.x : avaiRect.x1;
            y = !b ? avaiRect.y : avaiRect.y1;
            x = x <= 0 ? 0 : x;
            y = y <= 0 ? 0 : y;
            w = Math.min(avaiRect.width, w);
            h = Math.min(avaiRect.height, h);
        } else {
            x = avaiRect.x <= 0 ? 0 : avaiRect.x;
            y = avaiRect.y <= 0 ? 0 : avaiRect.y;
        }
        M.x = null;
        M.y = null;
        layer.setPosition(x, y, 1);
        bounds = {
            x: x,
            y: y,
            width: w,
            height: h
        };
        layer.setCallback(bounds, avaiRect.area, rect);
        layer.applyStyles({
            visibility: "visible"
        });
        if (layer.focusBox != undefined && (layer.getPMFlag() & js.awt.PopupLayer.F_FOCUSBOXBLUR) != 0) {
            layer.focusItem = layer.focusBox;
            layer.focusBox.focus();
        }
        layer.setAutoHide(true);
        layer.startTimeout();
    };
    thi$.showAt = function(layer, x, y, v, m) {
        this._bodySize = DOM.outerSize(this.view);
        v = v === true;
        var nofly = {
            x: x,
            y: y,
            width: v && !isNaN(m) ? m : 0,
            height: !v && !isNaN(m) ? m : 0,
            isVertical: v
        };
        _show.call(this, layer, nofly);
    };
    var _calNofly = function(rect, v, m) {
        if (isNaN(m) || m <= 0) {
            return rect;
        }
        var bodySize = this._bodySize;
        if (v) {
            if (m - rect.width >= 2) {
                rect.x = Math.max(0, rect.x - (m - rect.width) / 2);
                rect.width = m;
            } else {
                if (rect.width - m >= 2) {
                    rect.x = Math.min(bodySize.width, rect.x + (rect.width - m) / 2);
                    rect.width = m;
                }
            }
        } else {
            if (m - rect.height >= 2) {
                rect.y = Math.max(0, rect.y - (m - rect.height) / 2);
                rect.height = m;
            } else {
                if (rect.height - m >= 2) {
                    rect.y = Math.max(bodySize.height, rect.y + (rect.height - m) / 2);
                    rect.height = m;
                }
            }
        }
        return rect;
    };
    thi$.showBy = function(layer, by, v, m) {
        this._bodySize = DOM.outerSize(this.view);
        v = v === true;
        var rect = DOM.outerSize(by);
        rect.x = rect.left + document.documentElement.scrollLeft;
        rect.y = rect.top + document.documentElement.scrollTop;
        rect.isVertical = v;
        var nofly = _calNofly.call(this, rect, v, m);
        _show.call(this, layer, nofly);
    };
    thi$.onHide = function(e) {
        var POPUP = js.awt.PopupLayer, pop, root = this.stack[0];
        while (this.stack.length > 0) {
            pop = this.stack[this.stack.length - 1];
            if (pop.canHide(e)) {
                pop = this.stack.pop();
                System.log.println(new Date().toString() + " : hide " + pop.uuid() + "-" + pop.className + ' on "' + e.getType() + '" - Flag: ' + pop.getPMFlag().toString(2));
                if (pop != root) {
                    root.focusItem = root.focusBox;
                    if (root.focusBox) {
                        root.focusBox.focus();
                    }
                }
                pop.beforeRemoveLayer(e);
                this.removeComponent(pop);
                pop.afterRemoveLayer(e);
            } else {
                return;
            }
        }
    };
    thi$.clearStack = function(e) {
        var etype = e ? e.getType() : null, ele, type, evt, pop;
        System.log.println(new Date().toString() + " : clearStack " + ' on "' + (etype || "unknown") + '" event.');
        if (etype && etype === Event.W3C_EVT_RESIZE) {
            ele = e.srcElement;
            type = ele ? Class.typeOf(ele) : undefined;
            if (type && type.toLowerCase() === "window") {
                evt = e.clone("hide", e.getData(), e.getEventTarget());
                evt.srcElement = e.srcElement;
            }
        }
        while (this.stack.length > 0) {
            pop = this.stack.pop();
            pop.beforeRemoveLayer(evt);
            this.removeComponent(pop);
            pop.afterRemoveLayer(evt);
        }
    };
    thi$.elementFromPoint = function(x, y, nothese) {
        var stack = this.stack, comp, ret = null;
        if (stack.length > 0) {
            comp = stack[stack.length - 1];
            if (!nothese || !nothese.$contains(comp)) {
                ret = comp.elementFromPoint(x, y, nothese);
            }
        }
        return ret;
    }.$override(this.elementFromPoint);
    thi$.destroy = function() {
        this.removeAll(true);
    }.$override(this.destroy);
    thi$._init = function(def, Runtime, view) {
        $super(this);
        this.stack = [].$getLinkedList();
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Container);

$package("js.awt");

$import("js.awt.Container");

js.awt.Desktop = function(Runtime) {
    var CLASS = js.awt.Desktop, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ, R;
    var lastresize = 0;
    this.onresize = function(e) {
        System.updateLastAccessTime(e);
        if (e && e.getTimeStamp().getTime() - lastresize <= System.getProperty("j$vm_threshold", 15)) {
            e.cancelBubble();
            return e.cancelDefault();
        }
        $super(this);
        this.LM.clearStack(e);
        for (var appid in apps) {
            var app = this.getApp(appid);
            app.getBounds().dirty = true;
            app.fireEvent(e);
        }
        lastresize = new Date().getTime();
        return e.cancelDefault();
    }.$override(this.onresize);
    var _onkeyevent = function(e) {
        System.updateLastAccessTime(e);
        MQ.post("js.awt.event.KeyEvent", e);
    };
    var drags = {}, lasts = {}, curtargets = {}, CC = 2;
    var _onTargetMousemove = function(target, e) {
        var b = target ? target.checkCaptures(e) : false;
        if (b) {
            e.cancelBubble();
        } else {
            var t = curtargets[e.pointerId], eType = e.getType();
            if (t !== target) {
                if (t && !t.destroied) {
                    e.setType("mouseout");
                    e.setEventTarget(t);
                    t.fireEvent(e, true);
                } else {
                    curtargets[e.pointerId] = null;
                }
                if (target) {
                    e.setType("mouseover");
                    e.setEventTarget(target);
                    target.fireEvent(e, true);
                    curtargets[e.pointerId] = target;
                }
            }
            if (target) {
                e.setType(eType);
                e.setEventTarget(target);
                target.fireEvent(e, true);
            }
        }
    };
    var _onmousemove = function(e) {
        var ele, target, drag, last, now, spot, XY, dropTarget;
        System.updateLastAccessTime(e);
        last = lasts[e.pointerId] || 0;
        if (e.getTimeStamp().getTime() - last <= System.getProperty("j$vm_threshold", 15)) {
            e.cancelBubble();
            return e.cancelDefault();
        }
        drag = drags[e.pointerId];
        if (drag && drag.status < CC) {
            drag.status += 1;
            if (drag.status === CC) {
                fireDragStart.call(this, drag);
            }
            e.cancelBubble();
            return e.cancelDefault();
        }
        ele = e.srcElement;
        target = e.getEventTarget();
        XY = e.eventXY();
        if (!drag) {
            if (target !== this) {
                _onTargetMousemove.call(this, target, e);
            }
        } else {
            if (!this._local.notified) {
                MQ.post(Event.SYS_EVT_MOVING, "");
                this._local.notified = true;
            }
            DOM.showMouseCapturer();
            DOM.setDynamicCursor(ele, drag.spot);
            if (drag.spot >= 8) {
                var hoverObj, parent, fmEle, moveObj, data;
                target = null;
                drag.target.processMoving(e);
                moveObj = drag.target.getMoveObject(e);
                data = moveObj.getMovingData();
                fmEle = moveObj.view.parentNode;
                parent = fmEle === this.view ? this : DOM.getComponent(fmEle);
                hoverObj = parent.elementFromPoint(XY.x, XY.y, [ drag.target ]);
                if (hoverObj) {
                    if (drag.dropObj !== hoverObj) {
                        fmEle = drag.dropObj ? drag.dropObj.view : null;
                        target = drag.dropObj;
                        if (target) {
                            fireDragEvent(e, Event.W3C_EVT_DRAGLEAVE, data, target, fmEle, hoverObj.view);
                        }
                        target = hoverObj;
                        if (target) {
                            dropTarget = target.getDropableTarget(XY.x, XY.y, data);
                            if (dropTarget) {
                                fireDragEvent(e, Event.W3C_EVT_DRAGENTER, data, dropTarget, fmEle, hoverObj.view);
                            }
                        }
                        drag.dropObj = hoverObj;
                    }
                    target = target || hoverObj;
                    if (target) {
                        dropTarget = target.getDropableTarget(XY.x, XY.y, data);
                        if (dropTarget) {
                            fireDragEvent(e, Event.W3C_EVT_DRAGOVER, data, dropTarget, drag.dropObj.view, hoverObj.view);
                        }
                    }
                } else {
                    if (drag.dropObj) {
                        target = drag.dropObj;
                        if (target) {
                            fireDragEvent(e, Event.W3C_EVT_DRAGLEAVE, data, target, target.view, null);
                        }
                        drag.dropObj = null;
                    }
                }
            } else {
                drag.target.processSizing(e, drag.spot);
            }
            e.cancelBubble();
            e.cancelDefault();
        }
        lasts[e.pointerId] = new Date().getTime();
        return e._default;
    };
    var _onmouseover = function(e) {
        var ele, target, drag;
        ele = e.srcElement;
        target = e.getEventTarget();
        drag = drags[e.pointerId];
        if (!drag) {
            var t = curtargets[e.pointerId];
            if (t && t !== target) {
                if (!t.destroied) {
                    e.setType("mouseout");
                    e.setEventTarget(t);
                    t.fireEvent(e, true);
                }
                curtargets[e.pointerId] = null;
                e.setType("mouseover");
                e.setEventTarget(target);
            }
            if (target && target !== this) {
                target.fireEvent(e, true);
                e.cancelBubble();
            }
        }
        return e._default;
    };
    var _onmouseout = function(e) {
        var ele, target, drag;
        ele = e.srcElement;
        target = e.getEventTarget();
        drag = drags[e.pointerId];
        if (!drag) {
            if (target && target !== this) {
                target.fireEvent(e, true);
                e.cancelBubble();
            }
        }
        return e._default;
    };
    var _onmousedown = function(e) {
        var ele, xy, target, spot;
        System.updateLastAccessTime(e);
        this.LM.cleanLayers(e, this);
        ele = e.srcElement;
        xy = e.eventXY();
        target = e.getEventTarget();
        if (target && target !== this) {
            if (target.activate) {
                if (!target.isCovered()) {
                    target.activate(e);
                }
            }
            target.fireEvent(e, true);
            if (e.button === 1 && (target.isMovable() || target.isResizable() || target.isMoverSpot(ele, xy.x, xy.y))) {
                target = target.isMoverSpot(ele, xy.x, xy.y) ? target.getMoveTarget() : target;
                spot = target.spotIndex(ele, xy);
                if (spot >= 0) {
                    fireDrag.call(this, e.pointerId, {
                        event: e,
                        absXY: xy,
                        srcElement: ele,
                        target: target,
                        spot: spot,
                        status: 0
                    });
                    e.cancelDefault();
                }
            }
            e.cancelBubble();
        }
        return e._default;
    };
    var _onmouseup = function(e) {
        var ele, target, drag, XY;
        System.updateLastAccessTime(e);
        ele = e.srcElement;
        target = e.getEventTarget();
        drag = drags[e.pointerId];
        if (drag && drag.status < CC) {
            drags[e.pointerId] = null;
            drag = null;
        }
        XY = e.eventXY();
        if (!drag) {
            if (target && target !== this) {
                target.fireEvent(e, true);
                e.cancelBubble();
            }
        } else {
            MQ.post(Event.SYS_EVT_MOVED, "");
            this._local.notified = false;
            if (drag.spot >= 8) {
                var moveObj, data;
                target = drag.dropObj;
                moveObj = drag.target.getMoveObject(e);
                data = moveObj.getMovingData();
                drag.target.endMoving(e);
                if (target) {
                    var dropTarget = target.getDropableTarget(XY.x, XY.y, data);
                    if (dropTarget) {
                        fireDragEvent(e, Event.W3C_EVT_DROP, data, dropTarget, dropTarget.view, dropTarget.view);
                    }
                }
                target = drag.target;
                fireDragEvent(e, Event.W3C_EVT_DRAGEND, data, target, target.view, target.view);
            } else {
                drag.target.endSizing(e, drag.spot);
            }
            e.cancelBubble();
            e.cancelDefault();
        }
        drags[e.pointerId] = null;
        DOM.cleanDynamicCursor();
        return e._default;
    };
    var fireDrag = function(id, drag) {
        drags[id] = drag;
        DOM.setDynamicCursor(drag.srcElement, drag.spot);
    };
    var fireDragStart = function(drag) {
        var target, moveObj, data, e;
        target = drag.target;
        e = drag.event;
        if (drag.spot >= 8) {
            target.startMoving(e, drag.spot);
            moveObj = target.getMoveObject(e);
            data = moveObj.getMovingData();
            fireDragEvent(e, Event.W3C_EVT_DRAGSTART, data, target, target.view, target.view);
        } else {
            target.startSizing(e, drag.spot);
        }
    };
    var fireDragEvent = function(e, type, data, target, fmEle, toEle) {
        var evt;
        evt = e.clone(type, data, target);
        evt.srcElement = evt.toElement = toEle;
        evt.fromElement = fmEle;
        target.fireEvent(evt, true);
    };
    var _onmousewheel = function(e) {
        var ele, target;
        System.updateLastAccessTime(e);
        this.LM.cleanLayers(e, this);
        ele = e.srcElement;
        target = e.getEventTarget();
        if (target && target !== this) {
            target.fireEvent(e, true);
            e.cancelBubble();
        }
        return e._default;
    };
    var _oncontextmenu = function(e) {
        var ele = e.srcElement, target = e.getEventTarget();
        if (target && target !== this) {
            target.fireEvent(e, true);
            e.cancelDefault();
        }
        return e._default;
    };
    var _onclick = function(e) {
        var ele, target, drag;
        ele = e.srcElement;
        target = e.getEventTarget();
        drag = drags[e.pointerId];
        if (!drag && target && target !== this) {
            target.fireEvent(e, true);
            e.cancelBubble();
        }
        return e._default;
    };
    var _onhtmlevent = function(e) {
        var target;
        target = e.getEventTarget();
        if (target) {
            target.fireEvent(e, false);
        }
        e.cancelBubble();
        return e._default;
    };
    var dispatchEvent = function(target, e) {
        e.simulate = true;
        return target.dispatchEvent(e);
    };
    var TR = {}, lt;
    var _ontouchstart = function(e) {
        var te = e._event, touch, target, id, me, arg, now = new Date().getTime(), pre = TR.pre, abs = Math.abs, max = Math.max;
        _longpress.$clearTimer(lt);
        if (te.touches.length <= 1) {
            touch = te.changedTouches.item(0);
            id = touch.identifier;
            target = touch.target;
            arg = _touch2mouse(te, touch);
            TR.startTime = now;
            TR.startX = TR.endX = arg.pageX;
            TR.startY = TR.endY = arg.pageY;
            TR.dbl = false;
            TR.ctxmenu = false;
            if (pre && max(abs(pre.startX - TR.startX), abs(pre.startY - TR.startY)) < 10 && TR.startTime - pre.startTime < 300) {
                TR.dbl = true;
            }
            TR.pre = {
                startTime: TR.startTime,
                startX: TR.startX,
                startY: TR.startY
            };
            me = new MouseEvent("mouseover", arg);
            me.pointerId = id;
            dispatchEvent(target, me);
            me = new MouseEvent("mousedown", arg);
            me.pointerId = id;
            dispatchEvent(target, me);
            target.focus();
            lt = _longpress.$delay(this, 650, target, id, arg);
        } else {}
        return e.cancelDefault();
    };
    var _longpress = function(target, id, arg) {
        var me;
        arg.button = 2;
        TR.ctxmenu = true;
        me = new MouseEvent("longpress", arg);
        me.pointerId = id;
        dispatchEvent(target, me);
        me = new MouseEvent("mouseup", arg);
        me.pointerId = id;
        dispatchEvent(target, me);
    };
    var _ontouchmove = function(e) {
        var te = e._event, touch, target, id, me, arg, now = new Date().getTime(), abs = Math.abs;
        if (te.touches.length <= 1) {
            touch = te.changedTouches.item(0);
            id = touch.identifier;
            target = touch.target;
            arg = _touch2mouse(te, touch);
            arg.deltaX = TR.endX - arg.pageX;
            arg.deltaY = TR.endY - arg.pageY;
            if (abs(arg.deltaX) > abs(arg.deltaY)) {
                arg.deltaY = 0;
            } else {
                arg.deltaX = 0;
            }
            arg.deltaMode = 0;
            TR.endX = arg.pageX;
            TR.endY = arg.pageY;
            if (_maxOffset(TR) > 10) {
                _longpress.$clearTimer(lt);
            }
            me = new WheelEvent("mousewheel", arg);
            me.pointerId = id;
            dispatchEvent(target, me);
            me = new MouseEvent("mousemove", arg);
            me.pointerId = id;
            dispatchEvent(target, me);
        } else {
            _longpress.$clearTimer(lt);
        }
        return e.cancelDefault();
    };
    var _ontouchend = function(e) {
        var te = e._event, touch, target, id, me, arg, now = new Date().getTime();
        _longpress.$clearTimer(lt);
        if (te.touches.length <= 1) {
            touch = te.changedTouches.item(0);
            id = touch.identifier;
            target = touch.target;
            arg = _touch2mouse(te, touch);
            if (!TR.ctxmenu) {
                me = new MouseEvent("mouseup", arg);
                me.pointerId = id;
                me.moved = _maxOffset(TR);
                me.elapsed = now - TR.startTime;
                dispatchEvent(target, me);
                if (!TR.dbl) {
                    if (_maxOffset(TR) < 10 && now - TR.startTime < 450) {
                        me = new MouseEvent("tap", arg);
                        me.pointerId = id;
                        dispatchEvent(target, me);
                        me = new MouseEvent("click", arg);
                        me.pointerId = id;
                        dispatchEvent(target, me);
                    }
                } else {
                    if (now - TR.startTime < 250) {
                        me = new MouseEvent("dbltap", arg);
                        me.pointerId = id;
                        dispatchEvent(target, me);
                        me = new MouseEvent("dblclick", arg);
                        me.pointerId = id;
                        dispatchEvent(target, me);
                    }
                }
            }
            me = new MouseEvent("mouseout", arg);
            me.pointerId = id;
            dispatchEvent(target, me);
        } else {}
        return e.cancelDefault();
    };
    var _ontouchcancel = function(e) {};
    var _maxOffset = function(p) {
        var abs = Math.abs, max = Math.max;
        return max(abs(p.endX - p.startX), abs(p.endY - p.startY));
    };
    var _touch2mouse = function(e, touch) {
        var arg = {};
        arg.bubbles = true;
        arg.cancelable = true;
        arg.altKey = e.altKey;
        arg.ctrlKey = e.ctrlKey;
        arg.shiftKey = e.shiftKey;
        arg.metaKey = e.metaKey;
        arg.button = 0;
        arg.which = e.which;
        arg.pageX = touch.pageX;
        arg.pageY = touch.pageY;
        arg.clientX = touch.clientX;
        arg.clientY = touch.clientY;
        arg.screenX = touch.screenX;
        arg.screenY = touch.screenY;
        arg.relatedTarget = null;
        return arg;
    };
    thi$.fireHtmlEvent = function(e) {
        _onhtmlevent.call(this, e);
    };
    var apps = {}, appItems = [].$getLinkedList();
    thi$.getApps = function() {
        return apps;
    };
    thi$.getApp = function(id) {
        return apps[id];
    };
    thi$.registerApp = function(id, app) {
        if (!apps[id]) {
            appItems.push(id);
        }
        apps[id] = app;
    };
    thi$.unregisterApp = function(id) {
        appItems.remove(id);
        delete apps[id];
    };
    thi$.elementFromPoint = function(x, y, nothese) {
        var i, comp, ret = null;
        ret = this.LM.elementFromPoint(x, y, nothese);
        if (ret) {
            return ret;
        }
        ret = this.DM.elementFromPoint(x, y, nothese);
        if (ret && ret !== this.DM) {
            return ret;
        }
        ret = null;
        for (i = appItems.length - 1; i >= 0; i--) {
            comp = this.getApp(appItems[i]);
            ret = comp.elementFromPoint(x, y, nothese);
            if (ret) {
                break;
            }
        }
        return ret;
    }.$override(this.elementFromPoint);
    thi$.showCover = function(b, style) {
        $super(this, b, style || "jsvm_desktop_mask");
        if (b) {
            this.setCoverZIndex(this.DM.def.zbase - 5);
        }
    }.$override(this.showCover);
    var styles = [ "jsvm.css" ];
    thi$.registerStyleFiles = function(files) {
        if (Class.isArray(files)) {
            for (var i = 0, len = files.length; i < len; i++) {
                styles.push(files[i]);
            }
            this.updateTheme(R.theme());
        }
    };
    thi$.updateTheme = function(theme, old) {
        if (old) {}
        for (var i = 0, len = styles.length; i < len; i++) {
            this.updateThemeCSS(theme, styles[i]);
        }
        this.applyCSS();
        this.updateThemeImages(theme, old);
    };
    var IMGSREG = /images\//gi;
    var IMGREG = /url\(["]?.*images\/(.[^\)"]+)["]?\)/g;
    thi$.updateThemeCSS = function(theme, file) {
        var stylePath = DOM.makeUrlPath(J$VM.j$vm_home, "../style/" + theme + "/"), styleText = J$VM.styles["" + theme + "/" + file + ""], images = J$VM.env.images;
        if (styleText) {
            styleText = F.Base64Decode(styleText);
        } else {
            styleText = Class.getResource(stylePath + file, true);
        }
        if (styleText && styleText.length !== 0) {
            if (images) {
                styleText = styleText.replace(IMGREG, function($0, $1) {
                    if (images[$1]) {
                        return 'url("' + images[$1] + '")';
                    } else {
                        return 'url("' + stylePath + "images/" + $1 + '")';
                    }
                });
            } else {
                styleText = styleText.replace(IMGSREG, stylePath + "images/");
            }
            this.applyCSSCode(file, styleText);
        }
    };
    thi$.updateThemeLinks = function(theme, old, file) {
        var dom = self.document, links, link, src, path, found;
        path = DOM.makeUrlPath(J$VM.j$vm_home, "../style/" + old + "/");
        links = dom.getElementsByTagName("link");
        for (var i = 0, len = links.length; i < len; i++) {
            link = links[i];
            src = decodeURI(link.href);
            if (src && src.indexOf(path) != -1) {
                src = src.replace(old, theme);
                link.href = src;
                found = true;
            }
        }
        if (!found) {
            link = dom.createElement("link");
            link.type = "text/css";
            link.rel = "stylesheet";
            link.href = DOM.makeUrlPath(J$VM.j$vm_home, "../style/" + theme + "/" + file);
            DOM.insertBefore(link, dom.getElementById("j$vm"));
        }
    };
    thi$.updateThemeImages = function(theme, old) {
        var dom = self.document, links, link, src, path;
        path = DOM.makeUrlPath(J$VM.j$vm_home, "../style/" + old + "/images/");
        links = dom.getElementsByTagName("img");
        for (var i = 0, len = links.length; i < len; i++) {
            link = links[i];
            src = decodeURI(link.src);
            if (src && src.indexOf(path) != -1) {
                src = src.replace(old, theme);
                link.src = src;
            }
        }
    };
    thi$.cssIds = [];
    thi$.cssCodes = {};
    thi$.applyCSSCode = function(id, css) {
        var sheets = this.cssIds, set = this.cssCodes;
        if (set[id] === undefined) {
            sheets.push(id);
        }
        set[id] = css;
    };
    thi$.applyCSS = function() {
        var styleSheet, sheets = this.cssIds, set = this.cssCodes, buf, css;
        styleSheet = DOM.getStyleSheetBy("j$vm-css");
        buf = [];
        for (var i = 0, len = sheets.length; i < len; i++) {
            buf.push(set[sheets[i]]);
        }
        css = buf.join("\r\n");
        styleSheet.applyCSS(css);
    };
    thi$.destroy = function() {
        var id, app;
        for (id in apps) {
            app = apps[id];
            app.closeApp();
            app.destroy();
        }
        apps = null;
        this.DM.destroy();
        this.DM = null;
        this.LM.destroy();
        this.LM = null;
        $super(this);
    }.$override(this.destroy);
    thi$._init = function(Runtime) {
        var dom = self.document, body = dom.body, def = {
            classType: "js.awt.Desktop",
            id: body.id,
            uuid: "desktop",
            zorder: true,
            stateless: true,
            zbase: 1,
            __contextid__: Runtime.uuid()
        };
        $super(this, def, Runtime, body);
        var LM = this.LM = new js.awt.LayerManager({
            classType: "js.awt.LayerManager",
            id: body.id,
            uuid: "layer-manager",
            zorder: true,
            stateless: true,
            zbase: J$VM.DOM.LM_ZBASE
        }, Runtime, body);
        var DM = this.DM = new js.awt.Container({
            classType: "js.awt.Container",
            id: body.id,
            uuid: "dialog-manager",
            zorder: true,
            stateless: true,
            zbase: J$VM.DOM.DM_ZBASE
        }, Runtime, body);
        DM.destroy = function() {
            this.removeAll(true);
        }.$override(DM.destroy);
        if (!System.getProperty("j$vm_isapi")) {
            var styleText = J$VM.styles["jsvm_reset.css"];
            if (styleText) {
                styleText = F.Base64Decode(styleText);
            } else {
                styleText = Class.getResource(J$VM.j$vm_home + "../style/jsvm_reset.css", true);
            }
            this.applyCSSCode("jsvm_reset.css", styleText);
            _bindEvents.call(this);
        }
        R = Runtime;
    }.$override(this._init);
    var _bindEvents = function() {
        var dom = self.document, EVENTS = [ [ self, Event.W3C_EVT_RESIZE, this.onresize ], [ dom, Event.W3C_EVT_KEY_DOWN, _onkeyevent ], [ dom, Event.W3C_EVT_KEY_UP, _onkeyevent ], [ dom, Event.W3C_EVT_MOUSE_MOVE, _onmousemove ], [ dom, Event.W3C_EVT_MOUSE_OVER, _onmouseover ], [ dom, Event.W3C_EVT_MOUSE_OUT, _onmouseout ], [ dom, Event.W3C_EVT_MOUSE_DOWN, _onmousedown ], [ dom, Event.W3C_EVT_MOUSE_UP, _onmouseup ], [ dom, Event.W3C_EVT_MOUSE_CLICK, _onclick ], [ dom, Event.W3C_EVT_MOUSE_DBCLICK, _onclick ], [ dom, Event.W3C_EVT_MOUSE_WHEEL, _onmousewheel ], [ dom, Event.W3C_EVT_CONTEXTMENU, _oncontextmenu ], [ dom, Event.W3C_EVT_TOUCH_START, _ontouchstart ], [ dom, Event.W3C_EVT_TOUCH_MOVE, _ontouchmove ], [ dom, Event.W3C_EVT_TOUCH_END, _ontouchend ], [ dom, Event.W3C_EVT_TOUCH_CANCEL, _ontouchcancel ], [ dom, Event.SYS_EVT_ELE_APPEND, _onhtmlevent ] ], item;
        for (var i = 0, len = EVENTS.length; i < len; i++) {
            item = EVENTS[i];
            Event.attachEvent(item[0], item[1], 0, this, item[2]);
        }
        this.onmousemove = function(e) {
            DOM.showMouseCapturer();
        };
    };
    this._init.apply(this, arguments);
}.$extend(js.awt.Container);

$package("js.awt");

$import("js.awt.Container");

js.awt.Window = function(def, Runtime, view) {
    var CLASS = js.awt.Window, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ, titleItemMap = {
        btnMin: {
            iconImage: "edit2.gif"
        },
        btnMax: {
            iconImage: "remove.gif"
        },
        btnClose: {
            iconImage: "sort2.png"
        }
    };
    var _getTitle = function() {
        return this.title && this.title.labTitle ? this.title.labTitle : undefined;
    };
    thi$.getTitle = function() {
        var title = _getTitle.call(this);
        return title ? title.getText() : null;
    };
    thi$.setTitle = function(s) {
        var title = _getTitle.call(this);
        if (title) {
            title.setText(s, true);
        }
    };
    thi$.isFloatTitle = function() {
        return (this.def.tstyle & 1) != 0;
    };
    thi$.setTitleStyle = function(tstyle, bstyle) {
        var title = this.title, style;
        if (!title) {
            return;
        }
        style = title.def;
        tstyle = (tstyle || 0) & 3;
        bstyle = (bstyle || 0) & 3;
        if (style.bstyle !== bstyle) {
            style.bstyle = bstyle;
            switch (bstyle) {
              case 0:
              case 2:
                this.showtitlebutton(true);
                break;

              case 1:
              case 3:
                this.showtitlebutton(false);
                break;
            }
        }
        if (style.tstyle !== tstyle) {
            style.tstyle = tstyle;
            switch (tstyle) {
              case 0:
              case 2:
                title = this.delController();
                this.addComponent(title, title.def.constraints);
                title.setVisible(true);
                break;

              case 1:
              case 3:
                title = this.title = this.removeComponent("title");
                this.setController(title);
                title.setVisible(false);
                break;

              default:
                break;
            }
            if (this.isDOMElement()) {
                this.doLayout(true);
            }
        }
    };
    thi$.getTitleStyle = function() {
        var style = this.title.def;
        return {
            tstyle: style.tstyle,
            bstyle: style.bstyle
        };
    };
    thi$.showLoading = function(b, styleClass) {
        this.client.showLoading(b, styleClass);
    }.$override(this.showLoading);
    thi$.needLayout = function(force) {
        return $super(this) || this.isMaximized();
    }.$override(this.needLayout);
    thi$.doLayout = function(force) {
        var p, ele, styles, scroll, overflowX, overflowY, width, height;
        if (this.needLayout(force)) {
            if (this.isMaximized()) {
                p = this.view.parentNode;
                scroll = DOM.hasScrollbar(p);
                styles = DOM.currentStyles(p);
                overflowX = styles.overflowX;
                overflowY = styles.overflowY;
                width = overflowX === "hidden" ? p.clientWidth : scroll.hscroll ? p.scrollWidth : p.clientWidth;
                height = overflowY === "hidden" ? p.clientHeight : scroll.vscroll ? p.scrollHeight : p.clientHeight;
                if (this.getWidth() != width || this.getHeight() != height) {
                    this.setBounds(0, 0, width, height);
                }
                $super(this);
            } else {
                ele = this.client.view;
                styles = DOM.currentStyles(ele);
                overflowX = styles.overflowX;
                overflowY = styles.overflowY;
                ele.style.overflow = "hidden";
                $super(this);
                ele.style.overflowX = overflowX;
                ele.style.overflowY = overflowY;
            }
            return true;
        }
        return false;
    }.$override(this.doLayout);
    var _setSizeTo = function(winsize) {
        var U = this._local, d, m, r;
        winsize = winsize || "normal";
        switch (winsize) {
          case "maximized":
            var p = this.view.parentNode;
            d = {
                x: 0,
                y: 0,
                width: p.scrollWidth,
                height: p.scrollHeight
            };
            U.movable = this.isMovable();
            U.resizable = this.isResizable();
            U.alwaysOnTop = this.isAlwaysOnTop();
            m = false;
            r = false;
            break;

          case "minimized":
            d = this.getMinimumSize();
            d.x = U.userX;
            d.y = U.userY;
            U.movable = this.isMovable();
            U.resizable = this.isResizable();
            m = this.isMovable();
            r = false;
            break;

          default:
            d = {
                width: U.userW,
                height: U.userH
            };
            d.x = U.userX;
            d.y = U.userY;
            m = U.movable || this.isMovable();
            r = U.resizable || this.isResizable();
            break;
        }
        this.setMovable(m);
        this.setResizable(r);
        this.setBounds(d.x, d.y, d.width, d.height, 3);
    };
    thi$.onbtnMin = function(button) {
        var U = this._local;
        if (this.isMinimized()) {
            this.setMinimized(false);
            _setSizeTo.call(this, "normal");
        } else {
            if (this.isMaximized()) {
                this.setMovable(U.movable);
                this.setResizable(U.resizable);
            }
            this.setMinimized(true);
            _setSizeTo.call(this, "minimized");
        }
    };
    thi$.onbtnMax = function(button) {
        var U = this._local, R = this.Runtime();
        if (this.isMaximized()) {
            this.setMaximized(false);
            _setSizeTo.call(this, "normal");
            button.setTriggered(false);
            button.setTipText(R.nlsText("btnMax_tip"));
        } else {
            if (this.isMinimized()) {
                this.setMovable(U.movable);
                this.setResizable(U.resizable);
            }
            this.setMaximized(true);
            _setSizeTo.call(this, "maximized");
            button.setTriggered(true);
            button.setTipText(R.nlsText("btnMin_tip"));
        }
    };
    thi$.onbtnClose = function(button) {
        this.close();
    };
    thi$.close = function() {
        if (typeof this.beforClose == "function") {
            this.beforClose();
        }
        if (this.container instanceof js.awt.Container) {
            this.container.removeComponent(this);
        }
        this.destroy();
    };
    thi$.refresh = function() {
        var client = this.client;
        if (typeof client.refresh == "function") {
            client.refresh();
        }
    };
    thi$.onrefresh = function(target) {
        this.refresh();
    };
    thi$.notifyIFrame = function(msgId, msgData) {
        var win = this.client.getWindow();
        if (win) {
            MQ.post(msgId, msgData, [], win, 1);
        }
    };
    thi$.loadUrl = function(url) {
        var client = this.client;
        if (client.instanceOf(js.awt.Frame)) {
            client.setSrc(url);
            client.load();
        } else {
            throw "This window does not support this ability.";
        }
    };
    thi$.setContent = function(html, href) {
        var client = this.client;
        if (client.instanceOf(js.awt.Frame)) {
            client.setContent(html, href);
        } else {
            throw "This window does not support this ability.";
        }
    };
    thi$.onmouseover = function(e) {
        var title = this.title, ele, xy, style;
        if (!title) {
            return;
        }
        ele = e.toElement;
        xy = this.relative(e.eventXY());
        style = this.getTitleStyle();
        if (this.contains(ele, true) && xy.y < 50) {
            if (style.tstyle === 3) {
                title.setVisible(true);
            }
            if (style.bstyle === 3) {
                if (title.contains(ele, true)) {
                    this.showtitlebutton(true);
                } else {
                    this.showtitlebutton(false);
                }
            }
        }
        this.setHover(true);
    }.$override(this.onmouseover);
    thi$.onmouseout = function(e) {
        var title = this.title, ele, style;
        if (!title) {
            return;
        }
        ele = e.toElement;
        style = this.getTitleStyle();
        if (!this.contains(ele, true) && ele !== this._coverView) {
            if (style.tstyle === 3) {
                title.setVisible(false);
            }
            if (style.bstyle === 3) {
                this.showtitlebutton(false);
            }
        }
        this.setHover(false);
    }.$override(this.onmouseout);
    thi$.showtitlebutton = function(b) {
        var title = this.title, items = title.items0(), item;
        for (var i = 0, len = items.length; i < len; i++) {
            item = title[items[i]];
            if (item.id.indexOf("btn") == 0) {
                item.setVisible(b);
            }
        }
        if (title.isDOMElement()) {
            title.doLayout(true);
        }
    };
    thi$.destroy = function() {
        delete this._local.restricted;
        $super(this);
    }.$override(this.destroy);
    thi$.getTitleItemDef = function(iid, def, R) {
        var tmp, idef;
        switch (iid) {
          case "labTitle":
            idef = {
                classType: "js.awt.Label",
                rigid_w: false,
                rigid_h: false,
                align_x: 0,
                align_y: 1
            };
            break;

          case "btnMin":
          case "btnMax":
          case "btnClose":
            idef = {
                classType: "js.awt.Button",
                className: "jsvm_title_button",
                rigid_w: true,
                rigid_h: false
            }, tmp = titleItemMap[iid];
            idef.iconImage = tmp.iconImage;
            if (tmp.nlsKey) {
                idef.tip = R.nlsText(tmp.nlskey, tmp.defaultTip);
            }
            break;

          default:
            break;
        }
        return idef;
    };
    var _preTitleDef = function(def, R) {
        var tdef = def.title || {}, items = tdef.items = def.titleItems || tdef.items || [ "labTitle", "btnMin", "btnMax", "btnClose" ], iid, idef;
        tdef.classType = tdef.classType || "js.awt.HBox";
        for (var i = 0, len = items.length; i < len; i++) {
            iid = items[i];
            idef = this.getTitleItemDef(iid, def, R);
            if (Class.isObject(tdef[iid])) {
                idef = System.objectCopy(tdef[iid], idef);
            }
            tdef[iid] = idef;
        }
        idef = tdef["labTitle"];
        if (idef) {
            if (Class.isString(def.titleText)) {
                idef.text = def.titleText;
            } else {
                idef.text = Class.isString(idef.text) ? idef.text : "J$VM";
            }
        }
        return tdef;
    };
    var _preDef = function(def, R) {
        var items = def.items = def.items || [ "title", "client" ], iid, idef;
        for (var i = 0, len = items.length; i < len; i++) {
            iid = items[i];
            switch (iid) {
              case "title":
                idef = def[iid] = _preTitleDef.call(this, def, R);
                idef.rigid_w = idef.rigid_w === true;
                idef.rigid_h = idef.rigid_h !== false;
                idef.constraints = idef.constraints || "north";
                break;

              case "client":
                idef = def[iid] = def[iid] || {
                    classType: "js.awt.VFrame"
                };
                idef.rigid_w = idef.rigid_w === true;
                idef.rigid_h = idef.rigid_h === true;
                idef.constraints = idef.constraints || "center";
                break;
            }
        }
        if (!def.layout) {
            def.layout = {
                classType: "js.awt.BorderLayout",
                mode: 0,
                hgap: 0,
                vgap: 0
            };
        }
        def.resizable = def.resizable !== false;
        def.resizer = def.resizer || 255;
        def.movable = def.movable !== false;
        def.mover = def.mover || {
            bt: 1,
            br: 0,
            bb: 0,
            bl: 1
        };
        def.shadow = def.shadow !== false;
        def.rigid_w = def.rigid_w !== false;
        def.rigid_w = def.rigid_w !== false;
        def.maxiSize = def.maxiSize || {
            width: 65535,
            height: 65535
        };
        return def;
    };
    thi$._init = function(def, Runtime, view) {
        if (def == undefined) {
            return;
        }
        def.classType = def.classType || "js.awt.Window";
        def.className = def.className || "jsvm_win";
        _preDef.apply(this, arguments);
        var tdef = def.title;
        if (tdef) {
            tdef.className = tdef.className || DOM.combineClassName(def.className, "title");
            (function(iid) {
                var item = tdef[iid], clazz;
                if (iid.indexOf("lab") == 0) {
                    if (!item.className) {
                        item.className = DOM.combineClassName(tdef.className, "label");
                    }
                    item.css = (item.css || "") + "white-space:nowrap;" + "test-overflow:ellipsis;" + "overflow:hidden;cursor:default;";
                } else {
                    if (iid.indexOf("btn") == 0) {
                        if (!item.className) {
                            clazz = DOM.combineClassName(tdef.className, "button");
                            item.className = "jsvm_title_button $jsvm_title_button" + " " + clazz;
                        }
                    } else {
                        item.className = item.className || DOM.combineClassName(tdef.className, iid);
                    }
                }
            }).$forEach(this, tdef.items);
        }
        tdef = def.client;
        tdef.className = tdef.className || DOM.combineClassName(def.className, "client");
        def.css = "position:absolute;" + (def.css || "") + "overflow:hidden;";
        $super(this);
        var target = this, title = this.title;
        if (title) {
            title.setPeerComponent(target);
            title.setMoveTarget(target);
            (function(name) {
                var item = this.title[name];
                item.setPeerComponent(this);
                if (name.indexOf("btn") == 0) {
                    item.icon.uuid = item.uuid();
                } else {
                    item.setMoveTarget(target);
                }
            }).$forEach(this, title.def.items);
            var tstyle = title.def.tstyle, bstyle = title.def.bstyle;
            title.def.tstyle = 0;
            title.def.bstyle = 0;
            this.setTitleStyle(tstyle, bstyle);
        }
        this.client.setPeerComponent(this);
        MQ.register("js.awt.event.ButtonEvent", this, js.awt.Button.eventDispatcher);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Container);

js.awt.Window.DEFAULTDEF = function() {
    return {
        classType: "js.awt.Window",
        className: "jsvm_win",
        items: [ "title", "client" ],
        title: {
            classType: "js.awt.HBox",
            constraints: "north",
            items: [ "labTitle", "btnMin", "btnMax", "btnClose" ],
            labTitle: {
                classType: "js.awt.Label",
                text: "J$VM",
                rigid_w: false,
                rigid_h: false
            },
            btnMin: {
                classType: "js.awt.Button",
                className: "jsvm_title_button",
                iconImage: "minimize.gif"
            },
            btnMax: {
                classType: "js.awt.Button",
                className: "jsvm_title_button",
                iconImage: "maximize.png"
            },
            btnClose: {
                classType: "js.awt.Button",
                className: "jsvm_title_button",
                iconImage: "close.png"
            }
        },
        client: {
            classType: "js.awt.VFrame",
            constraints: "center",
            rigid_w: false,
            rigid_h: false
        },
        layout: {
            classType: "js.awt.BorderLayout",
            mode: 0,
            hgap: 0,
            vgap: 0
        },
        resizer: 255,
        resizable: true,
        mover: {
            bt: 1,
            br: 0,
            bb: 0,
            bl: 1
        },
        movable: true,
        shadow: true,
        width: 400,
        height: 300,
        rigid_w: true,
        rigid_h: true,
        miniSize: {
            width: 72,
            height: 24
        },
        prefSize: {
            width: 640,
            height: 480
        }
    };
};

J$VM.Factory.registerClass(js.awt.Window.DEFAULTDEF());

$package("js.awt");

js.awt.Application = function(def, Runtime, entryId) {
    var CLASS = js.awt.Application, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ, Desktop;
    thi$.getAppID = function() {
        return this.uuid();
    };
    thi$.startApp = function() {
        var cview = this._local.entry;
        if (this.view != cview) {
            var children = cview.children;
            if (children.length === 0) {
                this.appendTo(cview);
            } else {
                this.insertBefore(children[0]);
            }
        }
    };
    thi$.closeApp = function() {
        var U = this._local, cview = U.entry;
        if (this.view != cview) {
            this.removeFrom(cview);
        }
        Desktop.unregisterApp(this.getAppID());
        U.closed = true;
    };
    thi$.changeTheme = function(theme, old) {
        Desktop.updateTheme(theme, old);
    };
    thi$.destroy = function() {
        var U = this._local;
        this.setMsgType(null);
        if (!U.closed) {
            this.closeApp();
        }
        $super(this);
    }.$override(this.destroy);
    thi$._init = function(def, Runtime, entryId) {
        if (def == undefined) {
            return;
        }
        def.classType = def.classType || "js.awt.Application";
        def.className = DOM.combineClassName([ "jsvm_", def.className || "" ].join(" "), [ "entry", "app" ]);
        def.id = def.uuid = entryId;
        def.__contextid__ = Runtime.uuid();
        var entry = self.document.querySelector("[jsvm_entry='" + entryId + "']");
        if (entry.getAttribute("jsvm_asapp")) {
            $super(this, def, Runtime, entry);
        } else {
            $super(this, def, Runtime);
        }
        this._local.entry = entry;
        this.putContextAttr("appid", this.getAppID());
        this.putContextAttr("app", this);
        MQ.register("js.awt.event.ButtonEvent", this, js.awt.Button.eventDispatcher);
        Desktop = Runtime.getDesktop();
        this.setMsgType(this.getMsgType());
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Container).$implements(js.util.MessageBox);

$package("js.awt");

$import("js.awt.Window");

js.awt.DialogObject = function() {
    var CLASS = js.awt.DialogObject, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM;
    thi$.getDialogData = function() {
        return {};
    };
    thi$.validateData = function(okFunc) {
        if (typeof okFunc == "function") {
            okFunc();
        }
    };
    thi$.getDialogMsgType = function() {
        if (!this._local.msgtype) {
            this._local.msgtype = Math.uuid();
        }
        return this._local.msgtype;
    };
    thi$.getHelpID = function() {
        return "";
    };
    thi$.setTitle = function(text) {
        var dialog = this.getPeerComponent();
        if (dialog instanceof js.awt.Dialog) {
            dialog.setTitle(text);
        }
    };
    thi$.initialize = function() {};
};

js.awt.Dialog = function(def, Runtime) {
    var CLASS = js.awt.Dialog, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ, DlgBtnMap = {
        btnHelp: {
            nlsKey: "btnHelp",
            defaultNLS: "Help"
        },
        btnApply: {
            nlsKey: "btnApply",
            defaultNLS: "Apply"
        },
        btnOK: {
            nlsKey: "btnOK",
            defaultNLS: "OK"
        },
        btnCancel: {
            nlsKey: "btnCancel",
            defaultNLS: "cancel"
        }
    };
    thi$.setDialogObject = function(dialogObj, handler) {
        if (!dialogObj || !dialogObj.instanceOf(js.awt.DialogObject)) {
            throw "Request a js.awt.DialogObj instance";
        }
        dialogObj.id = "dialogObj";
        dialogObj.setPeerComponent(this);
        this.client.addComponent(dialogObj, "center");
        if (handler) {
            this._local.handler = handler;
            MQ.register(dialogObj.getDialogMsgType(), this.getPeerComponent(), handler);
        }
    };
    thi$.getDialogObject = function() {
        return this.client.dialogObj;
    };
    thi$.getDialogMsgType = function() {
        var dialogObj = this.client.dialogObj;
        return dialogObj ? dialogObj.getDialogMsgType() : null;
    };
    thi$.getDialogDate = function() {
        var dialogObj = this.client.dialogObj;
        return dialogObj ? dialogObj.getDialogData() : null;
    };
    var _showMaskCover = function(b) {
        var peer = this.getPeerComponent();
        if (this.def.modal === true) {
            if (peer && peer !== this.Runtime()) {
                peer.showMaskCover(b);
            }
        } else {
            var event = this.buildDialogEvent(b ? "show" : "hide", false);
            this.notifyPeer(event.msgId, event);
        }
    };
    thi$.show = function() {
        _showMaskCover.call(this, true);
        var dlgObj = this.getDialogObject(), M = this.def, x = M.x, y = M.y, DM = this.Runtime().getDesktop().DM, pox = DM.getBounds();
        if (J$VM.mobile) {
            M.width = Math.min(M.width, pox.width);
            M.height = Math.min(M.height, pox.height);
        }
        if (!Class.isNumber(x)) {
            x = (pox.width - M.width) * .5;
            x = x < 0 ? 0 : x;
        }
        if (!Class.isNumber(y)) {
            y = (pox.height - M.height) * .5;
            y = y < 0 ? 0 : y;
        }
        DM.addComponent(this);
        dlgObj.initialize.$delay(dlgObj, 0);
        if (this.btnpane) {
            this.btnpane.doLayout(true);
        }
        if (Class.isNumber(x) || Class.isNumber(y)) {
            this.setPosition(x, y);
        }
    };
    thi$.showLoading = function(b) {
        $super(this);
        if (this.btnpane) {
            this.btnpane.showLoading(b);
        }
    }.$override(this.showLoading);
    thi$.onbtnHelp = function(button) {
        MQ.post("js.awt.event.ShowHelpEvent", new Event("helpid", this.getDialogObject().getHelpID()));
    };
    thi$.onbtnApply = function(button) {
        var obj = this.getDialogObject();
        obj.validateData(function() {
            var event = this.buildDialogEvent("apply");
            this.notifyPeer(event.msgId, event, true);
        }.$bind(this));
    };
    thi$.onbtnOK = function(button) {
        var obj = this.getDialogObject();
        obj.validateData(function() {
            var event = this.buildDialogEvent("ok");
            this.notifyPeer(event.msgId, event, true);
            this.close();
        }.$bind(this));
    };
    thi$.onbtnCancel = function(button) {
        var event = this.buildDialogEvent("cancel", false);
        this.notifyPeer(event.msgId, event, true);
        this.close();
    };
    thi$.onbtnDispatcher = function(button) {
        var btnId = button.id || "", idx = btnId.indexOf("btn"), cmd, event;
        if (idx >= 0) {
            cmd = btnId.substr(idx + 3);
            cmd = cmd.toLowerCase();
        }
        event = this.buildDialogEvent(cmd || btnId, true);
        this.notifyPeer(event.msgId, event, true);
        this.close();
    };
    thi$.buildDialogEvent = function(type, hasData) {
        var dialogObj = this.client.dialogObj, msgId = dialogObj.getDialogMsgType(), data, event;
        if (hasData !== false) {
            data = dialogObj.getDialogData();
        }
        event = new Event(type, data, this);
        event.msgId = msgId;
        return event;
    };
    thi$.onbtnClose = function(button) {
        var event = this.buildDialogEvent("close", false);
        this.notifyPeer(event.msgId, event, true);
        $super(this);
    }.$override(this.onbtnClose);
    thi$.close = function() {
        var peer = this.getPeerComponent(), handler = this._local.handler;
        if (typeof handler == "function") {
            MQ.cancel(this.getDialogMsgType(), peer, handler);
            this._local.handler = null;
        }
        _showMaskCover.call(this, false);
        $super(this);
    }.$override(this.close);
    thi$.destroy = function() {
        var dialogObj = this.client.dialogObj;
        if (dialogObj) {
            dialogObj.setPeerComponent(null);
        }
        this.opener = null;
        $super(this);
    }.$override(this.destroy);
    var _preBtnpaneDef = function(def, R) {
        var tdef = def.btnpane = def.btnpane || {}, items = tdef.items = tdef.items || [ "btnApply", "btnOK", "btnCancel" ], iid, idef, tmp, layout = tdef.layout;
        tdef.classType = tdef.classType || "js.awt.HBox";
        for (var i = 0, len = items.length; i < len; i++) {
            iid = items[i];
            switch (iid) {
              case "btnHelp":
              case "btnApply":
              case "btnOK":
              case "btnCancel":
                idef = {
                    classType: "js.awt.Button",
                    className: "jsvm_button",
                    effect: true,
                    rigid_w: true,
                    rigid_h: true
                };
                tmp = DlgBtnMap[iid];
                idef.labelText = R.nlsText(tmp.nlsKey, tmp.defaultNLS);
                break;

              default:
                idef = {};
                break;
            }
            if (idef) {
                if (Class.isObject(tdef[iid])) {
                    idef = System.objectCopy(tdef[iid], idef);
                }
                tdef[iid] = idef;
            }
        }
        tdef.layout = {
            gap: 4,
            align_x: 1,
            align_y: .5
        };
        if (layout) {
            tdef.layout = System.objectCopy(layout, tdef.layout);
        }
        return tdef;
    };
    var _preDef = function(def, R) {
        var items = def.items = def.items || [ "title", "client", "btnpane" ], iid, idef, theDef;
        for (var i = 0, len = items.length; i < len; i++) {
            iid = items[i];
            switch (iid) {
              case "title":
                idef = def[iid] = def[iid] || {};
                idef.items = idef.items || [ "labTitle", "btnHelp", "btnClose" ];
                idef.rigid_w = idef.rigid_w === true;
                idef.rigid_h = idef.rigid_h !== false;
                idef.constraints = idef.constraints || "north";
                idef = idef["labTitle"];
                if (idef) {
                    if (Class.isString(def.titleText)) {
                        idef.text = def.titleText;
                    } else {
                        idef.text = Class.isString(idef.text) ? idef.text : "J$VM";
                    }
                }
                break;

              case "client":
                idef = def[iid] = def[iid] || {
                    classType: "js.awt.Container",
                    layout: {
                        classType: "js.awt.BorderLayout"
                    }
                };
                idef.rigid_w = idef.rigid_w === true;
                idef.rigid_h = idef.rigid_h === true;
                idef.constraints = idef.constraints || "center";
                break;

              case "btnpane":
                idef = def[iid] = def[iid] = _preBtnpaneDef.apply(this, arguments);
                idef.rigid_w = idef.rigid_w === true;
                idef.rigid_h = idef.rigid_h !== false;
                idef.constraints = idef.constraints || "south";
            }
        }
        def.modal = def.modal !== false;
        return def;
    };
    thi$._init = function(def, Runtime) {
        if (def == undefined) {
            return;
        }
        def.classType = def.classType || "js.awt.Dialog";
        def.className = def.className || "jsvm_dlg";
        _preDef.apply(this, arguments);
        var tdef = def.btnpane, item;
        if (tdef) {
            tdef.className = tdef.className || DOM.combineClassName(def.className, "btnpane");
            (function(name) {
                if (name.indexOf("btn") == 0) {
                    item = tdef[name];
                    item.className = item.className || DOM.combine(tdef.className, "button");
                }
            }).$forEach(this, tdef.items);
        }
        $super(this);
        var btnpane = this.btnpane;
        if (btnpane) {
            (function(name) {
                if (name.indexOf("btn") == 0) {
                    item = this.btnpane[name];
                    item.setPeerComponent(this);
                }
            }).$forEach(this, btnpane.def.items);
        }
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Window);

js.awt.AbstractDialogObject = function(def, Runtime) {
    var CLASS = js.awt.AbstractDialogObject, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM;
    thi$.getDialogMsgType = function() {
        if (!this._local.msgtype) {
            this._local.msgtype = Math.uuid();
        }
        return this._local.msgtype;
    }.$override(this.getDialogMsgType);
    this._init.apply(this, arguments);
}.$extend(js.awt.Component).$implements(js.awt.DialogObject);

js.awt.Dialog.DEFAULTDEF = function() {
    var R = J$VM.Runtime;
    return {
        classType: "js.awt.Dialog",
        className: "jsvm_dlg",
        items: [ "title", "client", "btnpane" ],
        title: {
            classType: "js.awt.HBox",
            constraints: "north",
            items: [ "labTitle", "btnHelp", "btnClose" ],
            labTitle: {
                classType: "js.awt.Label",
                text: "Dialog",
                rigid_w: false,
                rigid_h: false
            },
            btnHelp: {
                classType: "js.awt.Button",
                className: "jsvm_title_button",
                iconImage: "dialog_help.png"
            },
            btnClose: {
                classType: "js.awt.Button",
                className: "jsvm_title_button",
                iconImage: "close.png"
            }
        },
        client: {
            classType: "js.awt.Container",
            constraints: "center",
            layout: {
                classType: "js.awt.BorderLayout"
            }
        },
        btnpane: {
            classType: "js.awt.HBox",
            constraints: "south",
            items: [ "btnApply", "btnOK", "btnCancel" ],
            btnApply: {
                classType: "js.awt.Button",
                className: "jsvm_button",
                labelText: R.nlsText("btnApply", "Apply"),
                effect: true
            },
            btnOK: {
                classType: "js.awt.Button",
                className: "jsvm_button",
                labelText: R.nlsText("btnOK", "OK"),
                effect: true
            },
            btnCancel: {
                classType: "js.awt.Button",
                className: "jsvm_button",
                labelText: R.nlsText("btnCancel", "Cancel"),
                effect: true
            },
            layout: {
                gap: 4,
                align_x: 1,
                align_y: 0
            }
        },
        modal: true
    };
};

J$VM.Factory.registerClass(js.awt.Dialog.DEFAULTDEF());

js.awt.Dialog.MSGDIALOGDEF = function() {
    var R = J$VM.Runtime;
    return {
        classType: "js.awt.Dialog",
        className: "jsvm_msg",
        items: [ "title", "client", "btnpane" ],
        title: {
            classType: "js.awt.HBox",
            constraints: "north",
            items: [ "labTitle" ],
            labTitle: {
                classType: "js.awt.Label",
                text: "Dialog"
            }
        },
        client: {
            classType: "js.awt.Container",
            constraints: "center",
            layout: {
                classType: "js.awt.BorderLayout",
                hgap: 0,
                vgap: 0
            }
        },
        btnpane: {
            classType: "js.awt.HBox",
            constraints: "south",
            items: [ "btnOK" ],
            btnOK: {
                classType: "js.awt.Button",
                className: "jsvm_button",
                labelText: R.nlsText("btnOK", "OK"),
                effect: true
            },
            layout: {
                gap: 4,
                align_x: 1,
                align_y: 0
            }
        },
        modal: false,
        width: 400,
        height: 300,
        prefSize: {
            width: 400,
            height: 300
        }
    };
};

J$VM.Factory.registerClass(js.awt.Dialog.MSGDIALOGDEF());

$package("js.awt");

$import("js.awt.Component");

$import("js.awt.Dialog");

js.awt.MessageBox = function(def, Runtime) {
    var CLASS = js.awt.MessageBox, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ, Str = js.lang.String, icons = {
        info: "info.gif",
        warn: "alert.gif",
        error: "error.gif",
        confirm: "confirm.gif"
    };
    thi$.getDialogData = function() {
        return this.def.model;
    }.$override(this.getDialogData);
    thi$.doLayout = function(force) {
        if ($super(this)) {
            var bounds = this.getBounds(), icon = this.icon, label = this.label, text = this.text, h, top;
            if (label) {
                DOM.setSize(label, bounds.innerWidth - label.offsetLeft);
                h = icon.offsetHeight - label.offsetHeight;
                h = icon.offsetTop + (h > 0 ? h / 2 : 0);
                DOM.setPosition(label, undefined, h);
            } else {
                h = icon.offsetHeight - text.offsetHeight;
                top = icon.offsetTop + (h > 0 ? h / 2 : 0);
                DOM.setPosition(text, undefined, top);
            }
            DOM.setSize(text, bounds.innerWidth - text.offsetLeft, bounds.innerHeight - text.offsetTop);
            return true;
        }
        return false;
    }.$override(this.doLayout);
    thi$.initialize = function() {
        var m = this.def.model, title = m.title, R = this.Runtime();
        if (!title) {
            switch (m.msgType) {
              case CLASS.INFO:
                title = R.nlsText("msgDlgInfoTitle", "Information");
                break;

              case CLASS.WARN:
                title = R.nlsText("msgDlgWarnTitle", "Warning");
                break;

              case CLASS.ERROR:
                title = R.nlsText("msgDlgErrTitle", "Error");
                break;

              case CLASS.CONFIRM:
                title = R.nlsText("msgDlgConfirmTitle", "Confirm");
                break;
            }
        }
        this.setTitle(title || "");
    }.$override(this.initialize);
    thi$.createElements = function(model) {
        var R = this.Runtime(), icon, label, text, styleClass;
        icon = this.icon = DOM.createElement("IMG");
        styleClass = DOM.combineClassName(this.className, "icon");
        DOM.setClassName(icon, styleClass);
        icon.src = R.imagePath() + icons[model.msgType];
        this.view.appendChild(icon);
        if (model.msgSubject) {
            label = this.label = DOM.createElement("SPAN");
            styleClass = DOM.combineClassName(this.className, "subject");
            DOM.setClassName(label, styleClass);
            label.innerHTML = model.msgSubject;
            this.view.appendChild(label);
        }
        text = this.text = DOM.createElement("TEXTAREA");
        styleClass = DOM.combineClassName(this.className, "content");
        DOM.setClassName(text, styleClass);
        text.readOnly = "true";
        text.innerHTML = model.msgContent || "";
        this.view.appendChild(text);
    };
    thi$._init = function(def, Runtime) {
        if (typeof def !== "object") {
            return;
        }
        def.classType = def.classType || "js.awt.MessageBox";
        def.className = def.className || "jsvm_msg";
        $super(this);
        var model = this.def.model || {
            msgType: "info",
            msgSubject: "Info subject",
            msgContent: "Info content"
        };
        this.createElements(model);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Component).$implements(js.awt.DialogObject);

(function() {
    var CLASS = js.awt.MessageBox;
    CLASS.INFO = "info";
    CLASS.WARN = "warn";
    CLASS.ERROR = "error";
    CLASS.CONFIRM = "confirm";
})();

$package("js.awt");

js.awt.Color = function(r, g, b, a) {
    var CLASS = js.awt.Color, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, System = J$VM.System;
    CLASS.DEFAULT_MIN_LUM = 180;
    CLASS.DEFAULT_MAX_LUM = 230;
    CLASS.RGB2HSL = function(R, G, B) {
        var vmax, vmin, delta;
        R = R / 255;
        G = G / 255;
        B = B / 255;
        vmin = Math.min(R, G, B);
        vmax = Math.max(R, G, B);
        delta = vmax - vmin;
        var h, s, l, dr, dg, db;
        l = (vmax + vmin) / 2;
        if (0 == delta) {
            h = 0;
            s = 0;
        } else {
            if (l < .5) {
                s = delta / (vmax + vmin);
            } else {
                s = delta / (2 - vmax - vmin);
            }
            dr = ((vmax - R) / 6 + delta / 2) / delta;
            dg = ((vmax - G) / 6 + delta / 2) / delta;
            db = ((vmax - B) / 6 + delta / 2) / delta;
            if (R == vmax) {
                h = db - dg;
            } else {
                if (G == vmax) {
                    h = 1 / 3 + dr - db;
                } else {
                    if (B == vmax) {
                        h = 2 / 3 + dg - dr;
                    }
                }
            }
            if (h < 0) {
                h += 1;
            }
            if (h > 1) {
                h -= 1;
            }
        }
        h = Math.round(h * 240);
        s = Math.round(s * 240);
        l = Math.round(l * 240);
        return {
            H: h,
            S: s,
            L: l
        };
    };
    CLASS.HSL2RGB = function(H, S, L) {
        H = H / 240;
        S = S / 240;
        L = L / 240;
        var r, g, b, temp1, temp2;
        if (S == 0) {
            r = L * 255;
            g = L * 255;
            b = L * 255;
        } else {
            if (L < .5) {
                temp2 = L * (1 + S);
            } else {
                temp2 = L + S - S * L;
            }
            temp1 = 2 * L - temp2;
            r = 255 * _Hue2RGB(temp1, temp2, H + 1 / 3);
            g = 255 * _Hue2RGB(temp1, temp2, H);
            b = 255 * _Hue2RGB(temp1, temp2, H - 1 / 3);
        }
        r = Math.round(r);
        g = Math.round(g);
        b = Math.round(b);
        return {
            R: r,
            G: g,
            B: b
        };
    };
    var _Hue2RGB = function(v1, v2, vH) {
        if (vH < 0) {
            vH += 1;
        }
        if (vH > 1) {
            vH -= 1;
        }
        if (6 * vH < 1) {
            return v1 + (v2 - v1) * 6 * vH;
        }
        if (2 * vH < 1) {
            return v2;
        }
        if (3 * vH < 2) {
            return v1 + (v2 - v1) * (2 / 3 - vH) * 6;
        }
        return v1;
    };
    CLASS.parseColorString = function(s) {
        var v = 4278190080;
        if (s.indexOf("#") == 0) {
            v = (parseInt(s.substring(1), 16) | 4278190080) >>> 0;
        } else {
            if (s.toLowerCase() == "transparent") {
                v = 16777215;
            } else {
                if (s.indexOf("rgb") == 0) {
                    s = s.substring(s.indexOf("(") + 1, s.indexOf(")"));
                    var arr = s.split(","), r = parseInt(arr[0]), g = parseInt(arr[1]), b = parseInt(arr[2]), a = arr[3] !== undefined ? Math.round((parseFloat(arr[3]) || 0) * 255) : 255;
                    v = _makeValue(r, g, b, a);
                }
            }
        }
        return v;
    };
    CLASS.randomColor = function(uuid, type) {
        var v = uuid ? F.atoi(uuid) : F.rand32(), c = new js.awt.Color(v), ret;
        c.setRGBA(c.R(), c.G(), c.B(), 255);
        type = type || "obj";
        switch (type) {
          case "obj":
            ret = c;
            break;

          default:
            ret = c.toString(type);
            break;
        }
        return ret;
    };
    CLASS.gradient = function(sColor, eColor, min, max, value) {
        sColor = Class.isObject(sColor) ? sColor : new CLASS(sColor);
        eColor = Class.isObject(eColor) ? eColor : new CLASS(eColor);
        var Rs = sColor.R(), Re = eColor.R(), Gs = sColor.G(), Ge = eColor.G(), Bs = sColor.B(), Be = eColor.B(), As = sColor.A(), Ae = eColor.A(), Rn = Re - Rs, Gn = Ge - Gs, Bn = Be - Bs, An = Ae - As, range = max != min ? max - min : 1, v = value - min, s = v / range, r = Rs + s * Rn, g = Gs + s * Gn, b = Bs + s * Bn, a = As + s * An;
        return new CLASS(r, g, b, a);
    };
    var _makeValue = function(r, g, b, a) {
        a = Class.isNumber(a) ? a : 255;
        return (a << 24 | r << 16 | g << 8 | b) & 4294967295;
    };
    thi$.setRGBA = function(r, g, b, a) {
        this.value = _makeValue(r, g, b, a);
    };
    thi$.getRGB = function() {
        return this.value;
    };
    thi$.R = function() {
        return this.value >> 16 & 255;
    };
    thi$.G = function() {
        return this.value >> 8 & 255;
    };
    thi$.B = function() {
        return this.value >> 0 & 255;
    };
    thi$.A = function() {
        return this.value >> 24 & 255;
    };
    thi$.getHSL = function() {
        return CLASS.RGB2HSL(this.R(), this.G(), this.B());
    };
    thi$.toString = function(type) {
        var ret, buf, tmp, s;
        type = type || "hex";
        switch (type) {
          case "hex":
            if (this.A() === 0) {
                ret = "Transparent";
            } else {
                tmp = this.value & 16777215;
                s = "00000" + tmp.toString(16);
                ret = "#" + s.slice(-6);
            }
            break;

          case "rgb":
            buf = new js.lang.StringBuffer("rgb(");
            buf.append(this.R()).append(",").append(this.G()).append(",").append(this.B()).append(")");
            ret = buf.toString();
            break;

          case "rgba":
            buf = new js.lang.StringBuffer("rgba(");
            buf.append(this.R()).append(",").append(this.G()).append(",").append(this.B()).append(",").append((this.A() / 255).toFixed(3)).append(")");
            ret = buf.toString();
            break;

          case "uuid":
            ret = F.uuid(this.value);
            break;
        }
        return ret;
    };
    thi$._init = function() {
        var s;
        switch (arguments.length) {
          case 1:
            s = arguments[0];
            if (Class.isNumber(s)) {
                this.value = (s | 4278190080) >>> 0;
            } else {
                if (Class.isString(s)) {
                    s = s.trim();
                    this.value = CLASS.parseColorString(s);
                } else {
                    this.value = 4278190080;
                }
            }
            break;

          case 3:
          case 4:
            this.setRGBA(arguments[0], arguments[1], arguments[2], arguments[3]);
            break;

          default:
            this.value = 4278190080;
        }
    };
    this._init.apply(this, arguments);
};

new js.awt.Color(0);

$package("js.awt");

js.awt.Font = function(family, size, style, weight, variant) {
    var CLASS = js.awt.Font, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, System = J$VM.System;
    thi$.toString = function() {
        var buf = [], v, h;
        v = this.fontStyle;
        if (v && v !== "normal") {
            buf.push(v);
        }
        v = this.fontVariant;
        if (v && v !== "normal") {
            buf.push(v);
        }
        v = this.fontWeight;
        if (v && v !== "normal") {
            buf.push(CLASS.Weight[v]);
        }
        v = parseInt(this.fontSize);
        v = Class.isNumber(v) ? v : 10;
        v += "px";
        h = parseInt(this.lineHeight);
        if (Class.isNumber(h)) {
            v += "/" + h + "px";
        }
        buf.push(v);
        v = this.fontFamily;
        v = v || "sans-serif";
        buf.push(v);
        return buf.join(" ");
    };
    thi$._init = function(family, size, style, weight, variant, lineHeight) {
        this.fontFamily = family;
        this.fontSize = size;
        this.lineHeight = lineHeight;
        this.fontStyle = style;
        this.fontWeight = weight;
        this.fontVariant = variant;
    };
    this._init.apply(this, arguments);
};

(function(CLASS) {
    CLASS.Attrs = [ "fontStyle", "fontVariant", "fontWeight", "fontSize", "fontFamily" ];
    CLASS.Style = {
        normal: "normal",
        italic: "italic",
        oblique: "oblique"
    };
    CLASS.Variant = {
        normal: "normal",
        "small-caps": "small-caps"
    };
    CLASS.Weight = {
        normal: "normal",
        bold: "bold",
        bolder: "bolder",
        lighter: "ligher",
        "100": "normal",
        "200": "normal",
        "300": "normal",
        "400": "normal",
        "500": "normal",
        "600": "bold",
        "700": "bold",
        "800": "bold",
        "900": "bold"
    };
    CLASS.parseFont = function(str) {
        var s = str.split(" "), font = new CLASS(), tmp, v;
        if (s.length > 0) {
            font.fontFamily = s.pop();
        }
        if (s.length > 0) {
            tmp = s.pop();
            tmp = tmp.split("/");
            font.fontSize = parseInt(tmp[0]);
            if (tmp.length > 1) {
                font.lineHeight = parseInt(tmp[1]);
            }
        }
        if (s.length > 0) {
            tmp = s.pop();
            if (CLASS.Weight[tmp]) {
                font.fontWeight = CLASS.Weight[tmp];
            } else {
                if (CLASS.Variant[tmp]) {
                    font.fontVariant = tmp;
                } else {
                    if (CLASS.Style[tmp]) {
                        font.fontStyle = tmp;
                    }
                }
            }
        }
        if (s.length > 0) {
            tmp = s.pop();
            if (CLASS.Variant[tmp]) {
                font.fontVariant = tmp;
            } else {
                if (CLASS.Style[tmp]) {
                    font.fontStyle = tmp;
                }
            }
        }
        if (s.length > 0) {
            tmp = s.pop();
            font.fontStyle = tmp;
        }
        return font;
    };
    CLASS.initFont = function(fontStyles) {
        var font;
        if (typeof fontStyles == "object") {
            font = new CLASS(fontStyles["fontFamily"], fontStyles["fontSize"], fontStyles["fontStyle"], fontStyles["fontWeight"], fontStyles["fontVariant"], fontStyles["lineHeight"]);
        } else {
            font = new CLASS();
        }
        return font;
    };
    CLASS.FFCANVASFONTWEIGHTS = {
        normal: "normal",
        bold: "bold",
        lighter: "lighter",
        bolder: "bolder",
        "100": "normal",
        "200": "normal",
        "300": "normal",
        "400": "normal",
        "500": "normal",
        "600": "bold",
        "700": "bold",
        "800": "bold",
        "900": "bold"
    };
    CLASS.STYLE_BOLD = 1 << 0;
    CLASS.STYLE_ITALIC = 1 << 1;
    CLASS.isFontBold = function(fontStyle) {
        return (fontStyle & CLASS.STYLE_BOLD) != 0;
    };
    CLASS.isFontItalic = function(fontStyle) {
        return (fontStyle & CLASS.STYLE_ITALIC) != 0;
    };
    CLASS.getFontStyle = function(isBold, isItalic) {
        var fontStyle = 0;
        if (isBold) {
            fontStyle |= CLASS.STYLE_BOLD;
        } else {
            fontStyle &= ~CLASS.STYLE_BOLD;
        }
        if (isItalic) {
            fontStyle |= CLASS.STYLE_ITALIC;
        } else {
            fontStyle &= ~CLASS.STYLE_ITALIC;
        }
        return fontStyle;
    };
})(js.awt.Font);

$package("js.awt");

js.awt.Grid = function(def) {
    var CLASS = js.awt.Grid, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Object = js.lang.Object, System = J$VM.System;
    thi$.rowNum = function() {
        return this.rows.length;
    };
    thi$.colNum = function() {
        return this.cols.length;
    };
    thi$.row = function(index) {
        return this.rows[index];
    };
    thi$.column = function(index) {
        return this.cols[index];
    };
    thi$.cell = function(rowIndex, colIndex) {
        return this.acells[rowIndex][colIndex];
    };
    thi$.extractCells = function(force) {
        var cells = force === true ? null : this.cells;
        if (!Class.isArray(cells)) {
            cells = [];
            var acells = this.acells, rowNum = this.rowNum(), colNum = this.colNum(), i, j, cell;
            for (i = 0; i < rowNum; i++) {
                for (j = 0; j < colNum; j++) {
                    cell = acells[i][j];
                    if (Class.isObject(cell)) {
                        cell.rowIndex = i;
                        cell.colIndex = j;
                        cells.push(cell);
                    }
                }
            }
            this.cells = cells;
        }
        return cells;
    };
    thi$.expandCells = function(force) {
        var acells = force === true ? null : this.acells;
        if (!Class.isArray(acells)) {
            var rowNum = this.rowNum(), colNum = this.colNum(), cells = this.cells, cell, i, ilen;
            acells = new Array(rowNum);
            for (i = 0; i < rowNum; i++) {
                acells[i] = new Array(colNum);
            }
            for (i = 0, ilen = cells.length; i < ilen; i++) {
                cell = cells[i];
                acells[cell.rowIndex][cell.colIndex] = cell;
            }
            this.acells = acells;
        }
        return acells;
    };
    thi$.rowAttrs = function(index, attrs) {
        _dimAttrs.call(this, this.rows, index, attrs);
    };
    thi$.colAttrs = function(index, attrs) {
        _dimAttrs.call(this, this.cols, index, attrs);
    };
    var _dimAttrs = function(dims, index, attrs) {
        var dim, p;
        if (Class.isObject(attrs) && (index >= 0 && index < dims.length)) {
            dim = dims[index];
            for (p in attrs) {
                if (attrs.hasOwnProperty(p)) {
                    switch (p) {
                      case "rigid":
                        if (dim.rigid !== attrs.rigid) {
                            dim.rigid = attrs.rigid;
                            dims.dirty |= 1;
                        }
                        break;

                      case "visible":
                        if (dim.visible !== attrs.visible) {
                            dim.visible = attrs.visible;
                            dims.dirty |= 1;
                        }
                        break;

                      default:
                        dim[p] = attrs[p];
                    }
                }
            }
        }
    };
    var _mergeArea = function(set, index, area, isV) {
        var preIndex, preArea, nextIndex, nextArea, p0, p1;
        for (var i = index; i >= 0; i--) {
            preArea = set[i];
            if (preArea) {
                preIndex = i;
                break;
            }
        }
        for (var j = index + 1, len = set.length; j < len; j--) {
            nextArea = set[j];
            if (nextArea) {
                nextIndex = j;
                break;
            }
        }
        p0 = isV ? "y0" : "x0";
        p1 = isV ? "y1" : "x1";
        if (preArea && preArea[p0] <= area[p0] && preArea[p1] >= area[p1]) {} else {
            if (preArea && preArea[p1] >= area[p0] && nextArea && nextArea[p0] <= area[p1]) {
                preArea[p1] = nextArea[p1];
                set.splice(nextIndex, 1);
            } else {
                if (preArea && preArea[p1] >= area[p0]) {
                    preArea[p1] = area[p1];
                } else {
                    if (nextArea && nextArea[p0] <= area[p1]) {
                        area[p1] = nextArea[p1];
                        set.splice(nextIndex, 1);
                        set[index] = area;
                    } else {
                        set[index] = area;
                    }
                }
            }
        }
        return set;
    };
    var _getHLineMatrix = function(lineMatrixes, cell) {
        var rIndex = cell.rowIndex, cIndex = cell.colIndex, hlines = lineMatrixes.hlines, rowSpan = cell.rowSpan, x0 = cell.x, x1 = x0 + cell.width, y0 = cell.y, y1 = y0 + cell.height, index, hline, xs;
        index = rIndex;
        hline = hlines[index] = hlines[index] || {
            y: y0,
            xs: []
        };
        xs = hline.xs;
        _mergeArea.call(this, xs, cIndex, {
            x0: x0,
            x1: x1
        }, false);
        index = rIndex + rowSpan;
        hline = hlines[index] = hlines[index] || {
            y: y1,
            xs: []
        };
        xs = hline.xs;
        _mergeArea.call(this, xs, cIndex, {
            x0: x0,
            x1: x1
        }, false);
    };
    var _getVLineMatrix = function(lineMatrixes, cell) {
        var rIndex = cell.rowIndex, cIndex = cell.colIndex, vlines = lineMatrixes.vlines, colSpan = cell.colSpan, x0 = cell.x, x1 = x0 + cell.width, y0 = cell.y, y1 = y0 + cell.height, index, vline, ys;
        index = cIndex;
        vline = vlines[index] = vlines[index] || {
            x: x0,
            ys: []
        };
        ys = vline.ys;
        _mergeArea.call(this, ys, rIndex, {
            y0: y0,
            y1: y1
        }, true);
        index = cIndex + colSpan;
        vline = vlines[index] = vlines[index] || {
            x: x1,
            ys: []
        };
        ys = vline.ys;
        _mergeArea.call(this, ys, rIndex, {
            y0: y0,
            y1: y1
        }, true);
    };
    var _getLineMatrix = function(lineMatrixes, cell) {
        switch (lineMatrixes.level) {
          case 0:
            _getHLineMatrix.apply(this, arguments);
            _getVLineMatrix.apply(this, arguments);
            break;

          case 1:
            _getHLineMatrix.apply(this, arguments);
            break;

          case 2:
            _getVLineMatrix.apply(this, arguments);
            break;

          default:
            break;
        }
    };
    var _compress = function(lines, prop) {
        var len = lines ? lines.length : 0, line, p0, ps, pa, tmp, cnt;
        for (var i = 0; i < len; i++) {
            line = lines[i];
            ps = line[prop];
            cnt = ps.length;
            if (cnt <= 1) {
                continue;
            }
            tmp = line[prop] = [];
            for (var j = 0; j < cnt; j++) {
                pa = ps[j];
                if (pa) {
                    tmp.push(pa);
                }
            }
        }
    };
    thi$.getLineMatrixes = function(level, force) {
        if (level !== 1 && level !== 2) {
            level = 0;
        }
        var lineMatrixes = this.lineMatrixes, cells = this.extractCells(), hlines, vlines;
        if (force !== true && lineMatrixes && lineMatrixes.level == level) {
            return lineMatrixes;
        }
        switch (level) {
          case 1:
            lineMatrixes = {
                hlines: []
            };
            break;

          case 2:
            lineMatrixes = {
                vlines: []
            };
            break;

          default:
            lineMatrixes = {
                hlines: [],
                vlines: []
            };
            break;
        }
        lineMatrixes.level = level;
        this.lineMatrixes = lineMatrixes;
        for (var i = 0, len = cells.length; i < len; i++) {
            _getLineMatrix.call(this, lineMatrixes, cells[i]);
        }
        hlines = lineMatrixes.hlines;
        if (hlines && hlines.length > 0) {
            _compress.call(this, hlines, "xs");
        }
        vlines = lineMatrixes.vlines;
        if (vlines && vlines.length > 0) {
            _compress.call(this, vlines, "ys");
        }
        return lineMatrixes;
    };
    thi$.layout = function(xbase, ybase, width, height) {
        this.update();
        _calcDimsMeasure.call(this, this.rows, ybase, height);
        _calcDimsMeasure.call(this, this.cols, xbase, width);
        _calcCellsMeasure.call(this);
        delete this.lineMatrixes;
    };
    thi$.update = function() {
        if (this.rows.dirty & 1 !== 0) {
            _adjustWeight.call(this, this.rows);
        }
        if (this.cols.dirty & 1 !== 0) {
            _adjustWeight.call(this, this.cols);
        }
        if (this.acells) {
            this.extractCells(true);
        }
    };
    var _adjustWeight = function(dims) {
        var dim, i, len, weight = 1, v, tmps = [];
        for (i = 0, len = dims.length; i < len; i++) {
            dim = dims[i];
            if (!dim.rigid && dim.visible) {
                v = dim.weight;
                if (Class.isNumber(v)) {
                    weight -= v;
                } else {
                    tmps.push(dim);
                }
            }
        }
        if (tmps.length > 0) {
            weight /= tmps.length;
            while (tmps.length > 0) {
                tmps.shift().weight = weight;
            }
        }
        dims.dirty &= ~1;
    };
    var _initDims = function(dims, dimDefs) {
        var dlen = dims.length, dimDef, dim, i, len, index, v;
        dims.dirty = 0;
        if (Class.isArray(dimDefs)) {
            for (i = 0, len = dimDefs.length; i < len; i++) {
                dimDef = dimDefs[i];
                index = dimDef.index;
                if (index >= 0 && index < dlen) {
                    v = dimDef.measure;
                    dims[index] = {
                        visible: !(dimDef.visible === false),
                        measure: Class.isNumber(v) ? v : 0,
                        weight: dimDef.weight,
                        rigid: dimDef.rigid === true
                    };
                }
            }
        }
        for (i = 0; i < dlen; i++) {
            dim = dims[i];
            if (dim === undefined) {
                dim = dims[i] = {
                    visible: true,
                    rigid: false
                };
            }
        }
        _adjustWeight.call(this, dims);
    };
    var _initCells = function(cells, cellDefs) {
        var rows = this.rows, cols = this.cols, m = rows.length, n = cols.length, cellDef, cell, i, j, len, rspan, cspan, pt, pr, pb, pl, ri, cj, visible, padding = this.cellpadding;
        if (Class.isArray(cellDefs)) {
            for (i = 0, len = cellDefs.length; i < len; i++) {
                cellDef = cellDefs[i];
                ri = cellDef.rowIndex, cj = cellDef.colIndex;
                if (ri >= 0 && ri < m && cj >= 0 && cj < n) {
                    rspan = cellDef.rowSpan;
                    cspan = cellDef.colSpan;
                    pt = cellDef.paddingTop;
                    pr = cellDef.paddingRight;
                    pb = cellDef.paddingBottom;
                    pl = cellDef.paddingLeft;
                    cells[ri][cj] = {
                        rowSpan: Class.isNumber(rspan) ? rspan : 1,
                        colSpan: Class.isNumber(cspan) ? cspan : 1,
                        paddingTop: Class.isNumber(pt) ? pt : padding[0],
                        paddingRight: Class.isNumber(pr) ? pr : padding[1],
                        paddingBottom: Class.isNumber(pb) ? pb : padding[2],
                        paddingLeft: Class.isNumber(pl) ? pl : padding[3]
                    };
                }
            }
        }
        for (i = 0; i < m; i++) {
            for (j = 0; j < n; j++) {
                cell = cells[i][j];
                if (cell === null) {
                    continue;
                }
                if (cell === undefined) {
                    cell = cells[i][j] = {
                        rowSpan: 1,
                        colSpan: 1,
                        paddingTop: padding[0],
                        paddingRight: padding[1],
                        paddingBottom: padding[2],
                        paddingLeft: padding[3]
                    };
                }
                visible = false;
                rspan = cell.rowSpan - 1;
                while (rspan >= 0) {
                    cspan = cell.colSpan - 1;
                    while (cspan >= 0) {
                        if (rspan != 0 || cspan != 0) {
                            ri = i + rspan;
                            cj = j + cspan;
                            cells[ri][cj] = null;
                            visible = visible || rows[ri].visible && cols[cj].visible;
                        }
                        cspan--;
                    }
                    rspan--;
                }
                cell.visible = visible || rows[i].visible && cols[j].visible;
            }
        }
    };
    var _calcDimsMeasure = function(dims, base, total) {
        var dim, i, len = dims.length, tmps = [];
        for (i = 0; i < len; i++) {
            dim = dims[i];
            if (!dim.visible) {
                continue;
            }
            if (dim.rigid) {
                total -= dim.measure;
            } else {
                tmps.push(dim);
            }
        }
        var rest = total, v;
        while (tmps.length > 0) {
            dim = tmps.shift();
            v = Math.round(total * dim.weight);
            rest -= v;
            dim.measure = v;
        }
        if (Class.isNumber(v)) {
            dim.measure = v + rest;
        }
        for (i = 0; i < len; i++) {
            dim = dims[i];
            dim.offset = base;
            base += dim.visible ? dim.measure : 0;
        }
    };
    var _calcCellsMeasure = function() {
        var cells = this.extractCells(), cell, dim, span, offset, v, i, j, len;
        for (i = 0, len = cells.length; i < len; i++) {
            cell = cells[i];
            offset = -1;
            v = 0;
            span = cell.colSpan;
            for (j = 0; j < span; j++) {
                dim = this.column(cell.colIndex + j);
                if (dim.visible === true) {
                    v += dim.measure;
                    if (offset < 0) {
                        offset = dim.offset;
                    }
                }
            }
            cell.x = offset;
            cell.width = v;
            cell.innerWidth = v - cell.paddingLeft - cell.paddingRight;
            offset = -1;
            v = 0;
            span = cell.rowSpan;
            for (j = 0; j < span; j++) {
                dim = this.row(cell.rowIndex + j);
                if (dim.visible === true) {
                    v += dim.measure;
                    if (offset < 0) {
                        offset = dim.offset;
                    }
                }
            }
            cell.y = offset;
            cell.height = v;
            cell.innerHeight = v - cell.paddingTop - cell.paddingBottom;
        }
    };
    thi$._init = function(def) {
        if (def == undefined) {
            return;
        }
        var m, n;
        this.cellpadding = def.cellpadding || [ 0, 0, 0, 0 ];
        m = def.rowNum;
        m = Class.isNumber(m) ? m > 0 ? m : 1 : 1;
        this.rows = new Array(m);
        _initDims.call(this, this.rows, def.rows);
        n = def.colNum;
        n = Class.isNumber(n) ? n > 0 ? n : 1 : 1;
        this.cols = new Array(n);
        _initDims.call(this, this.cols, def.cols);
        this.acells = new Array(m);
        for (var i = 0; i < m; i++) {
            this.acells[i] = new Array(n);
        }
        _initCells.call(this, this.acells, def.cells);
    };
    this._init.apply(this, arguments);
}.$extend(js.lang.Object);

$package("js.awt");

js.awt.Bidirectional = function() {
    var CLASS = js.awt.Bidirectional, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        return;
    }
    CLASS.__defined__ = true;
    CLASS.HORIZONTAL = 0;
    CLASS.VERTICAL = 1;
    var Class = js.lang.Class;
    thi$.isHorizontal = function() {
        return this.def.direction === CLASS.HORIZONTAL;
    };
    thi$.isVertical = function() {
        return !this.isHorizontal();
    };
    thi$.getStart = function(comp) {
        comp = comp || this;
        return this.isHorizontal() ? comp.getX() : comp.getY();
    };
    thi$.getPStart = function(comp) {
        comp = comp || this;
        return this.isHorizontal() ? comp.getY() : comp.getX();
    };
    thi$.getUPosition = function(comp) {
        comp = comp || this;
        var p = comp.getPosition();
        if (this.isHorizontal()) {
            p.start = p.x;
            p.pstart = p.y;
        } else {
            p.start = p.y;
            p.pstart = p.x;
        }
        return p;
    };
    thi$.setUPosition = function(start, pstart, fire, comp) {
        comp = comp || this;
        if (this.isHorizontal()) {
            comp.setPosition(start, pstart, fire);
        } else {
            comp.setPosition(pstart, start, fire);
        }
    };
    thi$.getMeasure = function(comp) {
        comp = comp || this;
        return this.isHorizontal() ? comp.getWidth() : comp.getHeight();
    };
    thi$.getPMeasure = function(comp) {
        comp = comp || this;
        return this.isHorizontal() ? comp.getHeight() : comp.getWidth();
    };
    thi$.getUSize = function(comp) {
        comp = comp || this;
        var d = comp.getSize();
        if (this.isHorizontal()) {
            d.measure = d.width;
            d.pmeasure = d.height;
        } else {
            d.measure = d.height;
            d.pmeasure = d.width;
        }
        return d;
    };
    thi$.setUSize = function(measure, pmeasure, fire, comp) {
        comp = comp || this;
        if (this.isHorizontal()) {
            comp.setSize(measure, pmeasure, fire);
        } else {
            comp.setSize(pmeasure, measure, fire);
        }
    };
    thi$.getUBounds = function(comp) {
        comp = comp || this;
        var b = comp.getBounds(), MBP = b.MBP;
        if (this.isHorizontal()) {
            b.measure = b.width;
            b.innerMeasure = b.innerWidth;
            b.pmeasure = b.height;
            b.innerPMeasure = b.innerHeight;
            MBP.borderM0 = MBP.borderLeftWidth;
            MBP.borderM1 = MBP.borderRightWidth;
            MBP.borderPM0 = MBP.borderTopWidth;
            MBP.borderPM1 = MBP.borderBottomWidth;
            MBP.BM = MBP.BW;
        } else {
            b.measure = b.height;
            b.innerMeasure = b.innerHeight;
            b.pmeasure = b.width;
            b.innerPMeasure = b.innerWidth;
            MBP.borderM0 = MBP.borderTopWidth;
            MBP.borderM1 = MBP.borderBottomWidth;
            MBP.borderPM0 = MBP.borderLeftWidth;
            MBP.borderPM1 = MBP.borderRightWidth;
            MBP.BM = MBP.BH;
        }
        return b;
    };
    thi$.setUBounds = function(start, pstart, measure, pmeasure, fire, comp) {
        comp = comp || this;
        if (this.isHorizontal()) {
            comp.setBounds(start, pstart, measure, pmeasure, fire);
        } else {
            comp.setBounds(pstart, start, pmeasure, measure, fire);
        }
    };
    thi$.setUEndStyle = function(v, comp) {
        comp = comp || this;
        if (this.isHorizontal()) {
            comp.view.style.right = v + "px";
        } else {
            comp.view.style.bottom = v + "px";
        }
    };
    thi$.setUMinimumSize = function(measure, pmeasure, comp) {
        comp = comp || this;
        if (this.isHorizontal()) {
            comp.setMinimumSize(measure, pmeasure);
        } else {
            comp.setMinimumSize(pmeasure, measure);
        }
    };
};

$package("js.awt");

js.awt.Slider = function(def, Runtime) {
    var CLASS = js.awt.Slider, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ;
    thi$.isSingle = function() {
        return this.def.type === 0;
    };
    thi$.setDuration = function(duration) {
        this.def.duration = duration;
    };
    thi$.getDuration = function() {
        return this.def.duration;
    };
    thi$.isPlaying = function() {
        return this.playing || false;
    };
    thi$.setDataCount = function(count) {
        this.datacount = count;
    };
    thi$.getMoveGrid = function() {
        return this.slipper.def.mover.grid;
    };
    thi$.getTrackLength = function() {
        return this.trackLen;
    };
    thi$.first = function() {
        if (this.isFirst == true) {
            return;
        }
        var o = this.getOffset();
        this.setOffset(0, o.offset1p - o.offset0p);
    };
    thi$.last = function() {
        if (this.isLast == true) {
            return;
        }
        var o = this.getOffset();
        this.setOffset(o.offset0p + 1 - o.offset1p, 1);
    };
    thi$.getOffset = function() {
        var slipper = this.slipper, trackLen = this.getTrackLength(), grid = this.getMoveGrid(), count = this.datacount, offset0 = slipper.getOffset0() - slipper.offset0, offset1 = slipper.getOffset1() - slipper.offset0, offset0p = offset0 / trackLen, offset1p = offset1 / trackLen, index0 = grid > 1 ? Math.round(offset0 * (count - 1) / trackLen) : Class.isBigInt(count) ? count.minus(1).multiply(offset0).divid(trackLen).round() : Math.round(offset0p * (count - 1)), index1 = grid > 1 ? Math.round(offset1 * (count - 1) / trackLen) : Class.isBigInt(count) ? count.minus(1).multiply(offset1).divid(trackLen).round() : Math.round(offset1p * (count - 1));
        return {
            offset0: offset0,
            offset1: offset1,
            offset0p: offset0p,
            offset1p: offset1p,
            index0: index0,
            index1: index1,
            count: count
        };
    };
    thi$.setOffset = function(offset0, offset1, doLayout) {
        var slipper = this.slipper, trackLen = this.trackLen, p0 = Math.round(trackLen * offset0), p1 = Math.round(trackLen * offset1);
        if (this.isSingle()) {
            if (offset0 !== 0 && p0 === 0) {
                p0 = 1;
            }
            slipper.setPosition(p0, null, 4);
            _updateTrack.call(this, p0, this.getBounds());
        } else {
            var w = slipper.getSizeByRange(p1 - p0);
            slipper.setBounds(p0, null, w, null, 4);
        }
        _layout.call(this, this.getBounds(), doLayout !== false ? 1 : 0);
    };
    thi$.play = function(b) {
        b = b || false;
        if (this.playing == b) {
            return;
        }
        if (b) {
            var o = this.getOffset();
            if (o.offset0p == 1) {
                return;
            }
            var t0 = new Date().getTime();
            this.timer = _play.$delay(this, 0, o.offset0, t0);
            if (typeof this.onPlay == "function") {
                this.playing = true;
                this.onPlay();
            }
        } else {
            _play.$clearTimer(this.timer);
            this.timer = null;
            this.playing = false;
            if (typeof this.onStop == "function") {
                this.onStop();
            }
        }
    };
    var _play = function(b, t0) {
        this.playing = true;
        var o = this.getOffset();
        var slipper = this.slipper, c = this.getTrackLength(), d = this.getDuration() * 1e3, p = o.offset0 + 1;
        p = p > c ? c : p;
        this.setOffset(p / c, null, true);
        if (p < c) {
            this.timer = _play.$delay(this, d / c, b, t0);
        } else {
            this.play(false);
        }
    };
    thi$.doLayout = function(force) {
        if ($super(this)) {
            this.slipper.doLayout(true);
            var bounds = this.getBounds();
            if (this.offset) {
                var slipper = this.slipper, o = this.offset;
                this.trackLen = bounds.innerWidth - (slipper.offset0 - slipper.offset1);
                this.setOffset(o.offset0p, o.offset1p, false);
            }
            _layout.call(this, bounds, 0);
            return true;
        }
        return false;
    }.$override(this.doLayout);
    var _layout = function(bounds, fire) {
        var slipper = this.slipper, off0, off1, p;
        bounds = bounds || this.getBounds();
        this.trackLen = bounds.innerWidth - (slipper.offset0 - slipper.offset1);
        this.maxOffset = bounds.innerWidth - slipper.getWidth();
        this.offset = this.getOffset();
        this.isFirst = false;
        this.isLast = false;
        p = slipper.getX();
        if (p == 0) {
            this.isFirst = true;
        } else {
            if (p >= this.maxOffset) {
                this.isLast = true;
            }
        }
        _notifyMove.call(this, fire ? 1 : 0);
    };
    var _setMoverGrid = function(count) {
        var grid, mover = this.slipper.def.mover;
        if (count > 1) {
            grid = this.getTrackLength() / (count - 1);
            grid = Class.isNumber(grid) ? grid < 1 ? 1 : grid : 1;
            mover.grid = grid;
        } else {
            if (count == 1) {
                mover.grid = 1;
            }
        }
    };
    var _onMoving = function(e) {
        var data = e.getData();
        if (this.isSingle()) {
            _updateTrack.call(this, data.nx, this.getBounds());
        }
        _notifyMove.call(this, 0);
        e.cancelBubble();
    };
    var _updateTrack = function(x, bounds) {
        var track = this._track;
        track.style.borderLeftWidth = x + "px";
        track.bounds = null;
        DOM.setSize(track, bounds.innerWidth);
    };
    var _onResizing = function(e) {
        var data = e.getData();
        _notifyMove.call(this, 0);
        e.cancelBubble();
    };
    var _onMoveEnd = function(e) {
        _notifyMove.call(this, 1);
        e.cancelBubble();
    };
    var _notifyMove = function(fire) {
        this.offset = this.getOffset();
        if (Class.isFunction(this.onSliderChanged)) {
            var U = this._local, slipper = this.slipper;
            U.off0 = slipper.getOffset0();
            U.off1 = slipper.getOffset1();
            this.onSliderChanged.$delay(this, 1, fire);
        }
    };
    var _onTraceMouse = function(e) {
        var xy = e.eventXY(), bounds = this.getBounds();
        xy = DOM.relative(xy.x, xy.y, bounds);
        e.cancelBubble();
    };
    var _createElements = function() {
        var R = this.Runtime(), uuid = this.uuid(), track0, track, slipper;
        track0 = this._tack0 = DOM.createElement("DIV");
        track0.uuid = uuid;
        track0.className = [ this.className, "_track0" ].join("");
        this.view.appendChild(track0);
        track = this._track = DOM.createElement("DIV");
        track.id = [ uuid, "track" ].join("-");
        track.uuid = uuid;
        track.className = [ this.className, "_track" ].join("");
        this.view.appendChild(track);
        var slipperName = "_slipper";
        if (J$VM.mobile) {
            slipperName = "_slipper_mobile";
        }
        slipper = this.slipper = new js.awt.Slipper({
            type: this.def.type,
            direction: this.def.direction,
            className: [ this.className, slipperName ].join(""),
            id: [ uuid, "slipper" ].join("-"),
            stateless: true,
            movable: true,
            mover: {
                grid: 1,
                bt: 1,
                br: 1,
                bb: 1,
                bl: 1,
                freedom: 1,
                longpress: 10
            }
        }, R);
        slipper.setPeerComponent(this);
        this.view.appendChild(slipper.view);
    };
    thi$.destroy = function() {
        this.slipper.destroy();
        this.slipper = null;
        this._track = null;
        this._track0 = null;
        this.detachEvent("elementMoving", 4, this, _onMoving);
        this.detachEvent("elementMoveEnd", 4, this, _onMoveEnd);
        this.detachEvent("elementResizing", 4, this, _onResizing);
        this.detachEvent("elementResizeEnd", 4, this, _onMoveEnd);
        this.detachEvent(Event.W3C_EVT_MOUSE_DOWN, 4, this, _onTraceMouse);
        $super(this);
    }.$override(this.destroy);
    thi$._init = function(def, Runtime) {
        if (def == undefined) {
            return;
        }
        def.classType = def.classType || "js.awt.Slider";
        def.type = Class.isNumber(def.type) ? def.type : 0;
        def.duration = Class.isNumber(def.duration) ? def.duration : 1;
        $super(this);
        _createElements.call(this);
        this.attachEvent("elementMoving", 4, this, _onMoving);
        this.attachEvent("elementMoveEnd", 4, this, _onMoveEnd);
        this.attachEvent("elementResizing", 4, this, _onResizing);
        this.attachEvent("elementResizeEnd", 4, this, _onMoveEnd);
        this.attachEvent(Event.W3C_EVT_MOUSE_DOWN, 4, this, _onTraceMouse);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Component);

js.awt.Slipper = function(def, Runtime) {
    var CLASS = js.awt.Slipper, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ;
    thi$.isSingle = function() {
        return this.def.type === 0;
    };
    thi$.getOffset0 = function() {
        return this.getX() + this.offset0;
    };
    thi$.getOffset1 = function() {
        return this.getX() + this.getWidth() + this.offset1;
    };
    thi$.getWidth = function() {
        return this.getBounds().offsetWidth;
    };
    thi$.doLayout = function(force) {
        var bounds, mbp, w;
        if ($super(this)) {
            bounds = this.getBounds();
            if (this.isSingle()) {
                this.offset0 = bounds.offsetWidth / 2;
                this.offset1 = -this.offset0;
            } else {
                mbp = bounds.MBP;
                w = DOM.getBounds(this.ctrl0).offsetWidth;
                this.offset0 = mbp.borderLeftWidth + w;
                this.offset1 = -(mbp.borderRightWidth + w);
                this.def.miniSize = {
                    width: 2 * w + 0,
                    height: bounds.height
                };
            }
            return true;
        }
        return false;
    }.$override(this.doLayout);
    thi$.getSizeObject = function() {
        var sizeObj = this.sizeObj, B;
        if (!sizeObj) {
            sizeObj = this.sizeObj = this;
            sizeObj.setSizingPeer(this);
            B = this.getBounds();
            sizeObj.setBounds(B.x, B.y, B.width, B.heigth, 4);
        }
        return sizeObj;
    }.$override(this.getSizeObject);
    thi$.getSizeByRange = function(range) {
        var D = this.getBounds(), d;
        if (this.isSingle()) {
            return D.offsetWidth;
        }
        d = DOM.getBounds(this.ctrl0);
        return range + 2 * d.width + D.MBP.BW;
    };
    var w = 3, w2 = w * 2;
    thi$.showResizeCapture = function(e) {
        if (J$VM.mobile) {
            return false;
        }
        var xy = e.eventXY(), bounds = this.getBounds(), idxes = DOM.offsetIndexes(xy.x, xy.y, bounds), idx = idxes[2], d, spot, ret = false;
        if (idx < 3) {
            d = DOM.getBounds(this.ctrl0);
            bounds = {
                x: d.absX - w,
                y: d.absY - w,
                width: d.width,
                height: d.height + w2
            };
            spot = 1;
        } else {
            if (idx > 3 && idx < 8) {
                d = DOM.getBounds(this.ctrl1);
                bounds = {
                    x: d.absX + w,
                    y: d.absY - w,
                    width: d.width,
                    height: d.height + w2
                };
                spot = 5;
            }
        }
        if (d) {
            DOM.showMouseCapturer(bounds, this.uuid(), spot);
            ret = true;
        }
        return ret;
    };
    var _createElements = function() {
        var view = this.view, uuid, className, ctrl0, ctrl1;
        if (!this.isSingle()) {
            className = this.className;
            uuid = this.uuid();
            this.ctrl0 = ctrl0 = DOM.createElement("DIV");
            ctrl0.id = [ uuid, "ctrl0" ].join("-");
            ctrl0.uuid = uuid;
            ctrl0.className = [ className, "_ctrl0" ].join("");
            ctrl0.spot = 1;
            view.appendChild(ctrl0);
            this.ctrl1 = ctrl1 = DOM.createElement("DIV");
            ctrl1.id = [ uuid, "ctrl1" ].join("-");
            ctrl1.uuid = uuid;
            ctrl1.className = [ className, "_ctrl1" ].join("");
            ctrl1.spot = 5;
            view.appendChild(ctrl1);
        }
    };
    thi$._init = function(def, Runtime) {
        if (def == undefined) {
            return;
        }
        def.classType = def.classType || "js.awt.Slipper";
        def.className = def.className || "jsvm_slipper";
        def.stateless = true;
        def.movable = true;
        if (def.type !== 0) {
            def.resizable = true;
            def.resizer = 34;
        }
        $super(this);
        _createElements.call(this);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Component);

$package("js.awt");

js.awt.Scrollbar = function(def, Runtime) {
    var CLASS = js.awt.Scrollbar, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ, WIN_MAX_SIZE = 8192;
    thi$.isHorizontal = function() {
        return this.def.axis === 0;
    };
    thi$.setDataSize = function(max, win, limitW, limitH) {
        var isH = this.isHorizontal(), bounds = this.getBounds();
        win = win || {
            w: max.w,
            h: max.h
        };
        win.w = Math.max(Math.min(win.w, limitW || WIN_MAX_SIZE), bounds.innerWidth);
        win.h = Math.max(Math.min(win.h, limitH || WIN_MAX_SIZE), bounds.innerHeight);
        var U = this._local, brace = this.brace;
        if (!brace) {
            brace = this.brace = DOM.createElement("DIV");
            brace.className = isH ? "xbrace" : "ybrace";
            brace.style.cssText = "position:absolute;";
            DOM.insertBefore(brace, this.view.firstChild, this.view);
        }
        if (isH) {
            DOM.setSize(brace, max.w, 1);
        } else {
            DOM.setSize(brace, 1, max.h);
        }
        U.paper = {
            maxW: max.w,
            maxH: max.h,
            winW: win.w,
            winH: win.h
        };
        Event.attachEvent(this.view, "scroll", 1, this, _onscroll);
    };
    var _onscroll = function(e) {
        var U = this._local, scroll = U.scroll, view = this.view, bounds = this.getBounds(), MBP = bounds.MBP, paper = U.paper, vieW = bounds.clientWidth - (MBP.paddingLeft + MBP.paddingRight), vieH = bounds.clientHeight - (MBP.paddingTop + MBP.paddingBottom), maxW = paper.maxW, maxH = paper.maxH, winW = paper.winW, winH = paper.winH, Xw = scroll.Xw, Yw = scroll.Yw, Xv, X1, Yv, Y1, reload = false;
        Xv = Math.min(maxW - vieW, view.scrollLeft);
        Yv = Math.min(maxH - vieH, view.scrollTop);
        X1 = _getWinPs(maxW, winW, vieW, Xv, Xw);
        Y1 = _getWinPs(maxH, winH, vieH, Yv, Yw);
        if (X1 != Xw) {
            reload = true;
            Xw = scroll.Xw = X1;
        }
        if (Y1 != Yw) {
            reload = true;
            Yw = scroll.Yw = Y1;
        }
        this.fireEvent(new Event("scroll", {
            scrollLeft: Xv,
            scrollTop: Yv,
            Xw: Xw,
            Yw: Yw,
            reload: reload
        }, this));
    };
    var _getWinPs = function(M, W, V, vp, wp) {
        return vp >= 0 && vp <= W - V ? 0 : vp >= M - W && vp <= M - V ? M - W : vp < wp || vp >= wp + W - V ? vp - (W - V) / 2 : wp;
    };
    thi$.destroy = function() {
        var brace, scroll = false;
        brace = this.brace;
        if (brace) {
            scroll = true;
            DOM.removeFrom(brace, this.view);
            delete this.brace;
        }
        if (scroll) {
            Event.detachEvent(this.view, "scroll", 1, this, _onscroll);
        }
        $super(this);
    }.$override(this.destroy);
    thi$._init = function(def, Runtime) {
        if (def == undefined) {
            return;
        }
        var axis = def.axis, css;
        if (axis !== 0 && axis !== 1) {
            axis = def.axis = 0;
        }
        css = axis === 0 ? "overflow-x:scroll;overflow-y:hidden;" : "overflow-x:hidden;overflow-y:scroll;";
        def.css = css + (def.css || "");
        $super(this);
        var U = this._local;
        U.scroll = {
            Xw: 0,
            Yw: 0
        };
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Component);

$package("js.awt");

js.awt.Gridding = function() {
    var CLASS = js.awt.Gridding, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, System = J$VM.System, DOM = J$VM.DOM, MQ = J$VM.MQ, LINE = [ "vline", "hline" ], MOVING = [ "vmoving", "hmoving" ], EDGE = [ [ "vmove", "hmove" ], [ "vedge", "hedge" ] ];
    thi$.initGridding = function(grid, lineDef) {
        var U = this._local, thisObj = this;
        U.gridlineDef = lineDef;
        this._getGrid = function() {
            return grid;
        };
        grid.setPeerComponent(this);
        MQ.register("js.awt.GridEx.changed", this, _onGridChanged);
        MQ.register("js.awt.GridEx.lineMoving", this, _onLineMoving);
    };
    thi$.onGridChanged = function(e) {};
    var _onGridChanged = function(e) {
        this.onGridChanged(e);
        _updateLines.call(this);
    };
    var _onLineMoving = function(e) {
        var type = e.getType(), target, peer, bounds, dir;
        if ("mouseup" === type) {
            target = e.getEventTarget();
            peer = target.getMovingPeer();
            bounds = peer.getBounds();
            dir = peer.def.dir;
            this._getGrid().moveDim(target.getID(), dir === 0 ? target.getX() + bounds.width / 2 : target.getY() + bounds.height / 2, dir);
        }
    };
    var _updateLines = function() {
        var U = this._local, G = this._getGrid(), style = U.gridlineDef, lines, ylines, xlines, line;
        if (!G) {
            return;
        }
        lines = System.objectCopy(G.getAllLines(), [], true);
        xlines = lines[0];
        ylines = lines[1];
        if (!style.close) {
            xlines.shift();
            xlines.pop();
            ylines.shift();
            ylines.pop();
        }
        this.drawLines(G, xlines, ylines);
    };
    thi$.drawLines = function(G, xlines, ylines) {
        var U = this._local, newlines = [], cache = U.gridlines = U.gridlines || {};
        cache.__lastlayout__ = new Date().getTime();
        adjustLine(G, xlines, cache, newlines);
        adjustLine(G, ylines, cache, newlines);
        _createLines.call(this, newlines, cache);
        this.eraseLines(true);
    };
    thi$.isMoverSpot = function(ele, x, y) {
        return ele === this.view;
    };
    thi$.eraseLines = function(onlyDirty) {
        var U = this._local, cache = U.gridlines, comp, last;
        if (cache) {
            last = cache.__lastlayout__;
            for (var k in cache) {
                if (k === "__lastlayout__") {
                    continue;
                }
                comp = cache[k];
                if (!onlyDirty || onlyDirty && comp.lastmodify !== last) {
                    comp.destroy();
                    delete cache[k];
                }
            }
        }
    };
    var adjustLine = function(G, lines, cache, newlines) {
        var line, comp, b, w, h, last = cache.__lastlayout__;
        while (lines.length > 0) {
            line = lines.shift();
            b = line.bounds;
            comp = cache[line.id];
            if (comp) {
                w = b[2] - b[0];
                h = b[3] - b[1];
                comp.setBounds(b[0], b[1], w, h);
                comp.setMoveRange(line.minX, line.minY, line.maxX, line.maxY);
                comp.setLayoutBounds(G.getLayoutBounds());
                comp.lastmodify = last;
            } else {
                newlines.push(line);
            }
        }
    };
    var _createLines = function(lines, cache) {
        var U = this._local, style = U.gridlineDef, line, comp, def, b, w, h, className, R, parent, G = this._getGrid(), last = cache.__lastlayout__;
        R = this.Runtime();
        parent = this.view;
        className = style.className || "jsvm_grid";
        while (lines.length > 0) {
            line = lines.shift();
            b = line.bounds;
            w = b[2] - b[0];
            h = b[3] - b[1];
            def = {
                blassName: className,
                className: DOM.combineClassName(className, [ LINE[line.dir], EDGE[line.edge][line.dir] ]),
                id: line.id,
                stateless: true,
                movable: line.edge != 1,
                dir: line.dir
            };
            if (def.movable) {
                def.mover = style.mover || {};
                def.mover.bound = def.mover.bound || 10;
                def.mover.freedom = line.dir ? 2 : 1;
            }
            comp = new Line(def, R);
            comp.setPeerComponent(this);
            comp.setMoveRange(line.minX, line.minY, line.maxX, line.maxY);
            comp.setLayoutBounds(G.getLayoutBounds());
            cache[line.id] = comp;
            comp.appendTo(parent);
            comp.setBounds(b[0], b[1], w, h);
            comp.lastmodify = last;
        }
    };
    var Line = function(def, Runtime) {
        var CLASS = Line, thi$ = CLASS.prototype;
        if (CLASS.__defined__) {
            this._init.apply(this, arguments);
            return;
        }
        CLASS.__defined__ = true;
        thi$.setBounds = function(x, y, width, height) {
            var bounds = this.getBounds(), dir = this.def.dir;
            if (dir == 1) {
                y -= bounds.height / 2;
                height = bounds.height;
            } else {
                x -= bounds.width / 2;
                width = bounds.width;
            }
            $super(this, x, y, width, height);
        }.$override(this.setBounds);
        thi$.inside = function() {
            return true;
        };
        thi$.getMoveObject = function() {
            var moveObj = this.moveObj, def = this.def, className;
            if (!moveObj) {
                className = [ this.className, DOM.combineClassName(def.blassName, [ MOVING[def.dir] ]) ].join(" ");
                moveObj = this.moveObj = new js.awt.Component({
                    className: className,
                    id: this.getID(),
                    stateless: true
                }, this.Runtime(), this.cloneView());
                moveObj.getMovingMsgRecvs = _getMovingMsgRecvs.$bind(this);
                moveObj.getMovingMsgType = _getMovingMsgType.$bind(this);
                moveObj.showMoveCover = _showMoveCover.$bind(this);
                moveObj.getMovingContext = _getMovingContext.$bind(this);
                moveObj.appendTo(this.view.parentNode);
                moveObj.setMovingPeer(this);
            }
            var mb = moveObj.getBounds(), lb = this.layoutbounds;
            if (def.dir === 0) {
                moveObj.setBounds(mb.x, lb.y, mb.width, lb.height);
            } else {
                moveObj.setBounds(lb.x, mb.y, lb.width, mb.height);
            }
            return moveObj;
        };
        var _showMoveCover = function(b) {};
        var _getMovingContext = function() {
            return {
                container: this.getPeerComponent(),
                range: this.moverange
            };
        };
        thi$.showMoveCapture = function(e) {
            var bounds = this.getBounds(), spot = this.spotIndex(), r = {};
            switch (spot) {
              case 9:
                r.x = bounds.absX - 4, r.y = bounds.absY, r.width = bounds.width + 8, r.height = bounds.height;
                break;

              case 10:
                r.x = bounds.absX;
                r.y = bounds.absY - 4, r.width = bounds.width, r.height = bounds.height + 8;
                break;
            }
            DOM.showMouseCapturer(r, this.uuid(), spot);
            return true;
        };
        thi$.spotIndex = function() {
            return this.def.dir === 0 ? 9 : 10;
        }.$override(this.spotIndex);
        thi$.setMoveRange = function(minX, minY, maxX, maxY) {
            this.moverange = [ minX, minY, maxX, maxY ];
        };
        thi$.setLayoutBounds = function(bounds) {
            this.layoutbounds = bounds;
        };
        var _getMovingMsgRecvs = function() {
            return [ this.getPeerComponent().uuid() ];
        };
        var _getMovingMsgType = function() {
            return "js.awt.GridEx.lineMoving";
        };
        this._init.apply(this, arguments);
    }.$extend(js.awt.Component);
};

$package("js.awt");

js.awt.GridEx = function(def) {
    var CLASS = js.awt.GridEx, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    CLASS.MSG_CHANGED = "js.awt.GridEx.changed";
    var Class = js.lang.Class, J$Math = js.lang.Math, START = 0, END = 2, XD = 0, YD = 1, CS = 2, X0 = 0, Y0 = 1, X1 = 2, Y1 = 3, MOVEADJ = [ [ [ 0, 0 ], [ -1, 0 ], [ -1, 0 ], [ -1, -1 ], [ -1, -1 ] ], [ [ null, 0 ], [ null, 0 ], [ null, 0 ], [ null, 0 ], [ 0, 0 ] ], [ [ +1, 0 ], [ +1, 0 ], [ 0, 0 ], [ 0, -1 ], [ 0, -1 ] ], [ [ 0, 0 ], [ 0, null ], [ 0, null ], [ 0, null ], [ 0, null ] ], [ [ +1, +1 ], [ +1, +1 ], [ 0, +1 ], [ 0, +1 ], [ 0, 0 ] ], [ [ +1, +1 ], [ +1, +1 ], [ 0, +1 ], [ 0, +1 ], [ 0, 0 ] ], [ [ -1, -1 ], [ 0, -1 ], [ 0, -1 ], [ 0, 0 ], [ 0, 0 ] ] ], DIRTY = [ 1 << 0, 1 << 1, 1 << 2 ];
    var _makeDim = function(def, dir) {
        def = def || {};
        var dims = this.dims[dir], total = dims.total, dim = {
            uuid: def.uuid || J$Math.uuid()
        };
        dim.visible = Class.isBoolean(def.visible) ? def.visible : true;
        if (this.forlayout) {
            dim.rigid = def.rigid || false;
            if (def.measure) {
                dim.measure = def.measure;
                if (total) {
                    dim.weight = dim.measure / total;
                }
            } else {
                if (def.weight) {
                    dim.weight = dim.def_weight = def.weight;
                } else {
                    dim.measure = this.min_cellsize[dir];
                    if (total) {
                        dim.weight = dim.measure / total;
                    }
                }
            }
        } else {
            dim.rigid = true;
            dim.measure = def.measure || this.def_cellsize[dir];
            dim.weight = dim.def_weight = 0;
        }
        return dim;
    };
    var _initDims = function(dimDefs, dir) {
        var dims = this.dims[dir], map = this.dimap, dim, i, len, forlayout = this.forlayout, flexes = [], v, weight = 1;
        dimDefs = dimDefs || [];
        for (i = 0, len = dimDefs.length; i < len; i++) {
            dim = dimDefs[i];
            dims[dim.index] = _makeDim.call(this, dim, dir);
        }
        for (i = 0, len = dims.length; i < len; i++) {
            dim = dims[i];
            if (!dim) {
                dim = dims[i] = _makeDim.call(this, null, dir);
            }
            map[dim.uuid] = i;
            if (!forlayout || dim.rigid || !dim.visible) {
                continue;
            }
            v = dim.def_weight;
            if (Class.isNumber(v)) {
                weight -= v;
                dim.weight = v;
            } else {
                flexes.push(dim);
            }
        }
        len = flexes.length;
        if (!forlayout || len === 0) {
            return;
        }
        if (weight <= 0) {
            throw new Error("The grid space is not enough.");
        }
        v = weight / len;
        weight = Math.floor(v * 1e4) / 1e4;
        v -= weight;
        while (flexes.length > 0) {
            dim = flexes.shift();
            dim.weight = weight;
        }
        dim.weight += v;
    };
    var _layoutDims = function(base, total, dir) {
        var dims = this.dims[dir], dim, i, len = dims.length, forlayout = this.forlayout, flexes = [], rest, v;
        dims.base = base;
        dims.total = total;
        for (i = 0; i < len; i++) {
            dim = dims[i];
            if (!dim.visible) {
                continue;
            }
            if (forlayout) {
                if (dim.rigid) {
                    dim.offset = base;
                    v = dim.measure;
                    dim.weight = v / dims.total;
                    base += v;
                    total -= v;
                } else {
                    flexes.push(dim);
                }
            } else {
                dim.offset = base;
                v = dim.measure;
                base += v;
            }
        }
        if (forlayout) {
            rest = total;
            while (flexes.length > 0) {
                dim = flexes.shift();
                dim.offset = base;
                v = Math.round(total * dim.weight);
                dim.measure = v;
                dim.weight = v / dims.total;
                base += v;
                rest -= v;
            }
            if (Class.isNumber(v)) {
                rest += v;
                dim.measure = rest;
                dim.weight = rest / dims.total;
            }
        }
        this.setDirty(false, DIRTY[dir]);
    };
    var _insertDim = function(dim, to, keeplayout, dir) {
        var cells = _allCells.call(this), idx;
        if (to.length === 1) {
            return;
        }
        _shiftDim.call(this, dim, to, keeplayout, dir);
        idx = _id2idx.call(this, dim.uuid);
        _adjustCells.call(this, cells, -5, idx, dir);
    };
    var _removeDim = function(dim, keeplayout, dir) {
        var cells = _allCells.call(this), idx;
        if (this.dims[dir].length === 1) {
            return;
        }
        idx = _id2idx.call(this, dim.uuid);
        _shiftDim.call(this, dim, null, keeplayout, dir);
        _adjustCells.call(this, cells, -6, idx, dir);
    };
    var _adjustCells = function(cells, oidx, nidx, dir) {
        var end = dir + END, max = this.dims[dir].length, cell, range, rf, cf, r, v;
        while (cells.length > 0) {
            cell = cells.shift();
            range = cell.range;
            rf = inRange(range, oidx, dir);
            cf = inRange(range, nidx, dir);
            r = MOVEADJ[rf][cf];
            v = r[dir >> 1];
            if (v === null) {
                range[dir] = nidx;
            } else {
                range[dir] += v;
                v = range[dir];
                range[dir] = v < 0 ? 0 : v;
            }
            v = r[end >> 1];
            if (v === null) {
                range[end] = nidx;
            } else {
                range[end] += v;
                v = range[end];
                range[end] = v < 0 ? 0 : v;
            }
            _updateCell.call(this, cell);
        }
    };
    var _shiftDim = function(dim, to, keeplayout, dir) {
        var dims = this.dims[dir], idx, delta, insert = !!to;
        if (insert) {
            idx = _id2idx.call(this, to[0].uuid);
            _shareSpace.call(this, -dim.measure, dims[idx], keeplayout, dir);
            dims.splice(idx + 1, 0, dim);
        } else {
            idx = _id2idx.call(this, dim.uuid);
            delta = idx === 0 ? 0 : -1;
            delete this.dimap[dim.uuid];
            dims.splice(idx, 1);
            _shareSpace.call(this, dim.measure, dims[idx + delta], keeplayout, dir);
        }
        mapIndex(this.dimap, dims, idx);
        _layoutDims.call(this, dims.base, dims.total, dir);
        this.setDirty(true, DIRTY[CS]);
    };
    var _shareSpace = function(measure, dim, keeplayout, dir) {
        var dims = this.dims[dir], flexes, total, i;
        if (!this.forlayout) {
            return;
        }
        total = dims.total;
        if (keeplayout) {
            if (dim && !dim.rigid) {
                dim.weight = (dim.measure + measure) / total;
                return;
            }
        } else {
            flexes = flexCountOf(dims);
            if (flexes <= 0) {
                return;
            }
            measure = measure / flexes;
        }
        for (i = dims.length - 1; i >= 0; i--) {
            dim = dims[i];
            if (!dim.rigid && dim.visible) {
                dim.weight = (dim.measure + measure) / total;
                if (keeplayout) {
                    break;
                }
            }
        }
    };
    var flexCountOf = function(dims) {
        var dim, i, len, count = 0;
        for (i = 0, len = dims.length; i < len; i++) {
            dim = dims[i];
            if (dim.rigid || !dim.visible) {
                continue;
            }
            count += 1;
        }
        return count;
    };
    var inRange = function(r, i, dir) {
        var io = r[dir], ix = r[dir + END], ret;
        if (i < 0) {
            ret = Math.abs(i);
        } else {
            if (i < io) {
                ret = 0;
            } else {
                if (i === io) {
                    ret = 1;
                } else {
                    if (i > io && i < ix) {
                        ret = 2;
                    } else {
                        if (i === ix) {
                            ret = 3;
                        } else {
                            ret = 4;
                        }
                    }
                }
            }
        }
        return ret;
    };
    var _id2idx = function(id) {
        return this.dimap[id.split("-")[0]];
    };
    var _position2dims = function(offset, dir) {
        var dims = this.dims[dir], dim, i, len = dims.length, delta = this.snapdelta, v, ret = [];
        for (i = 0; i < len; i++) {
            dim = dims[i];
            v = dim.offset;
            if (offset <= v + delta && offset >= v - delta) {
                ret.push(dim);
                break;
            } else {
                if (offset > v + delta && offset < dim.offset + dim.measure - delta) {
                    ret.push(dim, dims[i + 1]);
                    break;
                }
            }
        }
        return ret;
    };
    var _compress0 = function(dir) {
        var dims = this.dims[dir], i, len, dim;
        for (i = 0, len = dims.length; i < len; i++) {
            dim = dims[i];
            if (dim.measure != 0) {
                continue;
            }
            _removeDim.call(this, dim, true, dir);
            len -= 1;
        }
    };
    var mapIndex = function(map, dims, from) {
        for (var i = from, len = dims.length; i < len; i++) {
            map[dims[i].uuid] = i;
        }
    };
    thi$.rowNum = function() {
        return this.dims[YD].length;
    };
    thi$.colNum = function() {
        return this.dims[XD].length;
    };
    thi$.row = function(index) {
        return this.dims[YD][index];
    };
    thi$.col = function(index) {
        return this.dims[XD][index];
    };
    thi$.column = function(index) {
        return this.col(index);
    };
    thi$.insertRow = function(index, def, keeplayout) {
        var dims = this.dims[YD];
        _insertDim.call(this, _makeDim.call(this, def, YD), [ dims[index], dims[index + 1] ], keeplayout, YD);
    };
    thi$.insertCol = function(index, def, keeplayout) {
        var dims = this.dims[XD];
        _insertDim.call(this, _makeDim.call(this, def, XD), [ dims[index], dims[index + 1] ], keeplayout, XD);
    };
    thi$.removeRow = function(index, keeplayout) {
        _removeDim.call(this, this.dims[YD][index], keeplayout, YD);
    };
    thi$.removeCol = function(index, keeplayout) {
        _removeDim.call(this, this.dims[XD][index], keeplayout, XD);
    };
    thi$.moveDim = function(id, offset, dir) {
        var dims = this.dims[dir], dim, oidx, nidx, measure, to, cells = _allCells.call(this);
        oidx = _id2idx.call(this, id);
        dim = dims[oidx];
        _shiftDim.call(this, dim, to, true, dir);
        to = _position2dims.call(this, offset, dir);
        if (to.length === 1) {
            to[1] = dims[oidx];
            measure = to[0].measure;
        } else {
            offset = Math.round(offset);
            measure = to[1] ? to[1].offset - offset : to[0].offset + to[0].measure - offset;
        }
        dim.measure = measure;
        dim.weight = measure / dims.total;
        _shiftDim.call(this, dim, to, true, dir);
        nidx = _id2idx.call(this, dim.uuid);
        if (nidx != oidx) {
            _adjustCells.call(this, cells, oidx, nidx, dir);
        }
        _compress0.call(this, dir);
    };
    var _getCell = function(x, y, def) {
        var dims = this.dims, Xs = dims[XD], Ys = dims[YD], id, cell, range, rspan, cspan;
        if (x >= Xs.length || y >= Ys.length) {
            return null;
        }
        id = cellid(Xs[x].uuid, Ys[y].uuid);
        cell = _updateCell.call(this, this.cells[id], id);
        if (!cell && _merged.call(this, x, y)) {
            return null;
        }
        if (!cell) {
            def = def || {};
            rspan = def.rowSpan || 1;
            cspan = def.colSpan || 1;
            cell = _updateCell.call(this, {
                uuid: id,
                range: [ x, y, x + cspan, y + rspan ]
            }, id);
        }
        return cell;
    };
    var _updateCell = function(cell, id) {
        var dims = this.dims, Xs = dims[XD], Ys = dims[YD], cells = this.cells, range, x0, y0, rspan, cspan;
        if (!cell) {
            return cell;
        }
        if (cells[cell.uuid]) {
            delete cells[cell.uuid];
        }
        range = cell.range;
        x0 = range[X0];
        y0 = range[Y0];
        id = id || cellid(Xs[x0].uuid, Ys[y0].uuid);
        cell.uuid = id;
        cell.visible = _visible.call(this, range);
        rspan = range[Y1] - y0;
        cspan = range[X1] - x0;
        if (rspan != 0 && cspan != 0 && (rspan > 1 || cspan > 1)) {
            cells[id] = cell;
        }
        return cell;
    };
    var _initCells = function(cellDefs) {
        var cell, def, x, y, i, len;
        if (!Class.isArray(cellDefs)) {
            return;
        }
        for (i = 0, len = cellDefs.length; i < len; i++) {
            def = cellDefs[i];
            x = def.colIndex;
            y = def.rowIndex;
            cell = _getCell.call(this, x, y, def);
            if (!cell) {
                throw new Error([ "Grid cell[", y, ",", x, "] define error." ].join(""));
            }
        }
    };
    var _layoutCell = function(cell, dir) {
        var bounds = cell.bounds = cell.bounds || [], end = dir + END, range = cell.range, idx0 = range[dir], idx1 = range[end], offset = -1, measure = 0, span, dims, dim, i;
        dims = this.dims[dir];
        span = idx1 - idx0;
        for (i = 0; i < span; i++) {
            dim = dims[idx0 + i];
            if (dim.visible) {
                if (offset < 0) {
                    offset = dim.offset;
                }
                measure += dim.measure;
            }
        }
        bounds[dir] = offset;
        bounds[end] = offset + measure;
        if (dir === XD) {
            cell.x = offset;
            cell.width = measure;
            cell.colSpan = span;
        } else {
            cell.y = offset;
            cell.height = measure;
            cell.rowSpan = span;
        }
        return cell;
    };
    var cellid = function(x, y) {
        return [ y, x ].join(":");
    };
    var _merged = function(x, y) {
        var cells = this.cells, id, cell, r, ret = false;
        for (id in cells) {
            cell = cells[id];
            r = cell.range;
            if (x >= r[X0] && x < r[X1] && y >= r[Y0] && y < r[Y1]) {
                ret = true;
                break;
            }
        }
        return ret;
    };
    var _visible = function(r) {
        var dims = this.dims, Xs = dims[XD], Ys = dims[YD], x, xlen, y, ylen, visible = false;
        for (y = r[Y0], ylen = r[Y1]; y < ylen; y++) {
            for (x = r[X0], xlen = r[X1]; x < xlen; x++) {
                visible = visible || Xs[x].visible && Ys[y].visible;
            }
        }
        return visible;
    };
    thi$.cell = function(rowIndex, colIndex) {
        var cell = _getCell.call(this, colIndex, rowIndex), lastlayout = this.lastlayout, cache;
        if (cell && Class.isNumber(lastlayout)) {
            cache = this.cellcache;
            if (lastlayout != cache.lastlayout) {
                cache = this.cellcache = {};
                cache.lastlayout = lastlayout;
            }
            if (!cache[cell.uuid]) {
                _layoutCell.call(this, cell, XD);
                _layoutCell.call(this, cell, YD);
                cache[cell.uuid] = cell;
            } else {
                cell = cache[cell.uuid];
            }
        }
        return cell;
    };
    thi$.getCellById = function(id) {
        var ids = id.split(":");
        return this.cell(_id2idx.call(this, ids[0]), _id2idx.call(this, ids[1]));
    };
    thi$.getCellByPosition = function(x, y) {
        var xs = _position2dims.call(this, x, XD), ys = _position2dims.call(this, y, YD);
        return this.cell(_id2idx.call(this, ys[0].uuid), _id2idx.call(this, xs[0].uuid));
    };
    var _allCells = function() {
        var i, ilen, j, jlen, cell, ret = [];
        for (i = 0, ilen = this.rowNum(); i < ilen; i++) {
            for (j = 0, jlen = this.colNum(); j < jlen; j++) {
                cell = _getCell.call(this, j, i);
                if (cell) {
                    ret.push(cell);
                }
            }
        }
        return ret;
    };
    thi$.getAllCells = function() {
        var i, ilen, j, jlen, cell, ret = [];
        for (i = 0, ilen = this.rowNum(); i < ilen; i++) {
            for (j = 0, jlen = this.colNum(); j < jlen; j++) {
                cell = this.cell(i, j);
                if (cell) {
                    cell.rowIndex = i;
                    cell.colIndex = j;
                    weight = this.getCellWeight(cell, i, j);
                    cell.w_weight = weight.w_weight;
                    cell.h_weight = weight.h_weight;
                    ret.push(cell);
                }
            }
        }
        return ret;
    };
    thi$.getCellWeight = function(cell, rowIndex, colIndex) {
        var rSpan = cell.rowSpan, cSpan = cell.colSpan, rlen = this.rowNum(), clen = this.colNum(), w_weight = 0, h_weight = 0, row, col, i;
        for (i = 0; i < rSpan; i++) {
            row = this.row(rowIndex + i);
            h_weight += row.weight;
        }
        for (i = 0; i < cSpan; i++) {
            col = this.col(colIndex + i);
            w_weight += col.weight;
        }
        return {
            w_weight: w_weight,
            h_weight: h_weight
        };
    };
    var zorder = function(r) {
        return (r[YD] << 16) + r[XD];
    };
    var area = function(r) {
        return (r[X1] - r[X0]) * (r[Y1] - r[Y0]);
    };
    var _byZ = function(c1, c2) {
        var z = zorder, $ = this;
        return z(c1.range) - z(c2.range);
    };
    thi$.canMerge = function(cell, cells) {
        var x0 = 65535, y0 = 65535, x1 = 0, y1 = 0, r, i, len, s = 0;
        cells = cells.concat(cell);
        for (i = 0, len = cells.length; i < len; i++) {
            cell = cells[i];
            r = cell.range;
            if (r[0] < x0) {
                x0 = r[0];
            }
            if (r[1] < y0) {
                y0 = r[1];
            }
            if (r[2] > x1) {
                x1 = r[2];
            }
            if (r[3] > y1) {
                y1 = r[3];
            }
            s += area(r);
        }
        return s === area([ x0, y0, x1, y1 ]);
    };
    thi$.merge = function(cells) {
        var x0 = 65535, y0 = 65535, x1 = 0, y1 = 0, i, len, r, gcells, cell, id;
        if (cells.length == 0) {
            return null;
        }
        gcells = this.cells;
        for (i = 0, len = cells.length; i < len; i++) {
            cell = cells[i];
            r = cell.range;
            if (r[0] < x0) {
                x0 = r[0];
            }
            if (r[1] < y0) {
                y0 = r[1];
            }
            if (r[2] > x1) {
                x1 = r[2];
            }
            if (r[3] > y1) {
                y1 = r[3];
            }
            id = cell.uuid;
            delete gcells[id];
        }
        cell = _getCell.call(this, x0, y0, {
            rowSpan: y1 - y0,
            colSpan: x1 - x0
        });
        this.setDirty(true, DIRTY[CS]);
        return cell;
    };
    thi$.canUnMerge = function(cell) {
        var r = cell.range;
        return r[Y1] - r[Y0] > 1 || r[X1] - r[X0] > 1;
    };
    thi$.unmerge = function(cell) {
        if (!this.canUnMerge(cell)) {
            return;
        }
        var id = cell.uuid;
        delete this.cells[id];
        this.setDirty(true, DIRTY[CS]);
    };
    thi$.splitCell = function(cell, rowNum, colNum) {
        if (rowNum < 2 && colNum < 2) {
            return;
        }
        var dims = this.dims, Xs = dims[XD], Ys = dims[YD], range = cell.range, cb = cell.bounds, x0 = range[X0], y0 = range[Y0], G = new CLASS({
            rowNum: rowNum,
            colNum: colNum
        }), cells, from;
        G.row(0).uuid = Ys[y0].uuid;
        G.col(0).uuid = Xs[x0].uuid;
        G.setDirty(true, DIRTY[XD | YD]);
        G.layout(cb[X0], cb[Y0], cb[X1] - cb[X0], cb[Y1] - cb[Y0]);
        _splitDims.call(this, G, XD);
        _splitDims.call(this, G, YD);
        cells = G.getAllCells();
        while (cells.length > 0) {
            cell = cells.shift();
            range = cell.range;
            from = _id2idx.call(this, G.col(range[X0]).uuid);
            _addSubCell.call(this, cell, from, XD);
            from = _id2idx.call(this, G.row(range[Y0]).uuid);
            _addSubCell.call(this, cell, from, YD);
            cell.uuid = cellid(Xs[range[X0]].uuid, Ys[range[Y0]].uuid);
            _updateCell.call(this, cell, cell.uuid);
        }
        this.setDirty(true, DIRTY[CS]);
    };
    var _addSubCell = function(cell, from, dir) {
        var dims = this.dims[dir], end = dir + END, range, bounds, dim, i, len, delta, f;
        range = cell.range;
        bounds = cell.bounds;
        delta = bounds[end] - this.snapdelta;
        range[dir] = from;
        for (i = range[dir], len = dims.length; i < len; i++) {
            dim = dims[i];
            range[end] = i;
            if (dim.offset >= delta) {
                f = true;
                break;
            }
        }
        if (!f) {
            range[end] += 1;
        }
    };
    var _splitDims = function(G, dir) {
        var dims = G.dims[dir], dim, i, len, to, measure;
        for (i = 1, len = dims.length; i < len; i++) {
            dim = dims[i];
            to = _position2dims.call(this, dim.offset, dir);
            if (to.length === 1) {
                dim.uuid = to[0].uuid;
                measure = dim.measure;
            } else {
                if (to[1]) {
                    measure = to[1].offset - dim.offset;
                } else {
                    measure = (len - i) * dim.measure;
                }
            }
            dim = _makeDim.call(this, {
                uuid: dim.uuid,
                measure: measure
            }, dir);
            _insertDim.call(this, dim, to, true, dir);
        }
    };
    var _getAllLines = function() {
        var mapX = {}, mapY = {}, cells = this.getAllCells();
        while (cells.length > 0) {
            _cellLine.call(this, cells.shift(), mapX, mapY);
        }
        return [ _dimLines.call(this, [], mapX, XD), _dimLines.call(this, [], mapY, YD) ];
    };
    var _cellLine = function(cell, xmap, ymap) {
        var dims = this.dims, Xs = dims[XD], Ys = dims[YD], idx = cell.range[X0], idy = cell.range[Y0], xid = Xs[idx].uuid, yid = Ys[idy].uuid, xlines = xmap[xid] = xmap[xid] || [], ylines = ymap[yid] = ymap[yid] || [], cb = cell.bounds;
        xlines.push({
            id: xid,
            dir: XD,
            edge: idx === 0 ? 1 : 0,
            bounds: [ cb[X0], cb[Y0], cb[X0], cb[Y1] ]
        });
        ylines.push({
            id: yid,
            dir: YD,
            edge: idy === 0 ? 1 : 0,
            bounds: [ cb[X0], cb[Y0], cb[X1], cb[Y0] ]
        });
    };
    var _dimLines = function(lines, map, dir) {
        var dims = this.dims, Xs = dims[XD], Ys = dims[YD], x0, y0, x1, y1, k, i, len, line;
        for (k in map) {
            lines = lines.concat(mergeLines(map[k], dir));
        }
        x0 = Xs[0].offset;
        y0 = Ys[0].offset;
        x1 = Xs[Xs.length - 1];
        x1 = x1.offset + x1.measure;
        y1 = Ys[Ys.length - 1];
        y1 = y1.offset + y1.measure;
        if (dir === XD) {
            lines.push({
                id: "Xn",
                edge: 1,
                dir: XD,
                bounds: [ x1, y0, x1, y1 ]
            });
        } else {
            lines.push({
                id: "Yn",
                edge: 1,
                dir: YD,
                bounds: [ x0, y1, x1, y1 ]
            });
        }
        lines.sort(byLinePostion[dir]);
        return _minmaxRange.call(this, lines, dir);
    };
    var _minmaxRange = function(lines, dir) {
        var dims = this.dims[dir], idx, i, len, line, eCells, sCells, cell, bounds;
        for (i = 0, len = lines.length; i < len; i++) {
            line = lines[i];
            if (line.edge) {
                continue;
            }
            idx = _id2idx.call(this, line.id);
            eCells = sortCells(_releatedCells.call(this, END, idx, dir), END, dir);
            cell = eCells[eCells.length - 1];
            bounds = cell.bounds;
            line.minX = bounds[X0];
            line.minY = bounds[Y0];
            sCells = sortCells(_releatedCells.call(this, START, idx, dir), START, dir);
            cell = sCells[0];
            bounds = cell.bounds;
            line.maxX = bounds[X1];
            line.maxY = bounds[Y1];
        }
        return lines;
    };
    var _releatedCells = function(start, idx, dir) {
        var dims = this.dims[dir], p = dir + start, i, j, len, x, y, cell, ret = [], from = start === START ? idx : 0;
        for (i = 0, len = this.dims[dir ^ 1].length; i < len; i++) {
            for (j = from; j <= idx; j++) {
                x = i;
                y = j;
                if (dir === YD) {
                    x = x ^ y;
                    y = x ^ y;
                    x = x ^ y;
                }
                cell = this.cell(x, y);
                if (cell && cell.range[p] === idx) {
                    ret.push(cell);
                }
            }
        }
        return ret;
    };
    var sortCells = function(cells, start, dir) {
        cells.sort(byCellPosition[start | dir]);
        return cells;
    };
    var byCellPosition = [ function(c1, c2) {
        return c1.bounds[X1] - c2.bounds[X1];
    }, function(c1, c2) {
        return c1.bounds[Y1] - c2.bounds[Y1];
    }, function(c1, c2) {
        return c1.bounds[X0] - c2.bounds[X0];
    }, function(c1, c2) {
        return c1.bounds[Y0] - c2.bounds[Y0];
    } ];
    var byLinePostion = [ function(l1, l2) {
        return l1.bounds[X0] - l2.bounds[X0];
    }, function(l1, l2) {
        return l1.bounds[Y0] - l2.bounds[Y0];
    } ];
    var mergeLines = function(lines, dir) {
        var ret = [], odir = dir ^ 1, oend = odir + END, count = 0, line0, line1;
        lines.sort(byLinePostion[odir]);
        line0 = lines.shift();
        line0.id = [ line0.id, count++ ].join("-");
        ret.push(line0);
        while (lines.length > 0) {
            line1 = lines.shift();
            if (line0.bounds[oend] === line1.bounds[odir]) {
                line0.bounds[oend] = line1.bounds[oend];
            } else {
                line0 = line1;
                line0.id = [ line0.id, count++ ].join("-");
                ret.push(line0);
            }
        }
        return ret;
    };
    thi$.getAllLines = function() {
        var lastlayout = this.lastlayout, cache, ret;
        if (Class.isNumber(lastlayout)) {
            cache = this.linecache = this.linecache || {};
            if (lastlayout != cache.lastlayout) {
                cache = this.linecache = {};
                cache.lastlayout = lastlayout;
            }
            if (!cache.lines) {
                cache.lines = _getAllLines.call(this);
            }
            ret = cache.lines;
        }
        return ret;
    };
    thi$.setDirty = function(b, mask) {
        var v = this.state;
        this.state = b ? v | mask : v & ~mask;
        if (b && this.state != 0) {
            this.update();
        }
    };
    var notifyPeer = function(peer, msg) {
        if (peer && Class.isFunction(peer.uuid)) {
            J$VM.MQ.post(CLASS.MSG_CHANGED, msg, [ peer.uuid() ]);
        }
    };
    thi$.isDirty = function(mask) {
        return (this.state & mask) != 0;
    };
    thi$.update = function() {
        var dims = this.dims, Xs = dims[XD], Ys = dims[YD];
        return this.layout(Xs.base, Ys.base, Xs.total, Ys.total);
    };
    thi$.layout = function(xbase, ybase, width, height) {
        if (!Class.isNumber(xbase) || !Class.isNumber(ybase) || !Class.isNumber(width) || !Class.isNumber(height)) {
            return false;
        }
        var dims = this.dims, Xs = dims[XD], Ys = dims[YD], relayout = false;
        if (this.isDirty(DIRTY[XD] | DIRTY[YD])) {
            this.dimp = {};
            mapIndex(this.dimap, Xs, 0);
            mapIndex(this.dimap, Ys, 0);
        }
        if (this.isDirty(DIRTY[XD]) || xbase != Xs.base || width != Xs.total) {
            _layoutDims.call(this, xbase, width, XD);
            relayout = true;
        }
        if (this.isDirty(DIRTY[YD]) || ybase != Ys.base || height != Ys.total) {
            _layoutDims.call(this, ybase, height, YD);
            relayout = true;
        }
        if (this.isDirty(DIRTY[CS])) {
            this.setDirty(false, DIRTY[CS]);
            relayout = true;
        }
        if (relayout) {
            this.lastlayout = new Date().getTime();
            notifyPeer(this.peer, {
                type: "layout"
            });
        }
        return relayout;
    };
    thi$.setPeerComponent = function(peer) {
        this.peer = peer;
    };
    thi$.getLayoutBounds = function() {
        var dims = this.dims, Xs = dims[XD], Ys = dims[YD];
        return {
            x: Xs.base,
            y: Ys.base,
            width: Xs.total,
            height: Ys.total
        };
    };
    thi$.destroy = function() {
        this.dims = null;
        this.dimap = null;
        this.cells = null;
        this.cellcache = null;
        this.linecache = null;
        this.def_cellsize = null;
        this.min_cellsize = null;
        this.peer = null;
        $super(this);
    }.$override(this.destroy);
    thi$._init = function(def) {
        def = def || {};
        this.state = 7;
        var forlayout = this.forlayout = Class.isBoolean(def.forlayout) ? def.forlayout : true;
        this.def_cellsize = [ def.colsize || 80, def.rowsize || 20 ];
        this.min_cellsize = [ def.mincol || 5, def.minrow || 5 ];
        this.snapdelta = def.snapdelta || 3;
        var dims = this.dims = [ null, null ];
        this.dimap = {};
        var m = def.rowNum, n = def.colNum;
        n = Class.isNumber(n) ? n > 0 ? n : 1 : 1;
        dims[XD] = new Array(n);
        _initDims.call(this, def.cols, XD);
        m = Class.isNumber(m) ? m > 0 ? m : 1 : 1;
        dims[YD] = new Array(m);
        _initDims.call(this, def.rows, YD);
        this.cells = {};
        this.cellcache = {};
        _initCells.call(this, def.cells);
    };
    this._init.apply(this, arguments);
}.$extend(js.lang.Object);

$package("js.swt");

js.swt.FieldSet = function(def, Runtime) {
    var CLASS = js.swt.FieldSet, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System;
    thi$.get = function(id) {
        return this.legendView[id];
    };
    thi$.setLegendText = function(legendText) {
        this.legend.innerHTML = String.encodeHtml(legendText);
    };
    thi$.addComponent = function(comp, constraints) {
        var container = this.legendView;
        return container.addComponent.apply(container, arguments);
    };
    thi$.insertComponent = function(index, comp, constraints) {
        var container = this.legendView;
        container.insertComponent.apply(container, arguments);
        this[comp.id] = comp;
        return comp;
    };
    thi$.getComponent = function(id) {
        return this.legendView.getComponent(id);
    };
    thi$.getAllComponents = function() {
        return this.legendView.getAllComponents();
    };
    thi$.removeComponent = function(comp) {
        this.legendView.removeComponent(comp);
        this[comp.id] = null;
        return comp;
    };
    thi$.removeAll = function() {
        var container = this.legendView, items = container.items0() || [];
        for (var i = 0, len = items.length; i < len; i++) {
            this[items[i]] = null;
        }
        container.removeAll();
    };
    thi$.items = function() {
        return this.legendView.items();
    };
    thi$.items0 = function() {
        return this.legendView.items0();
    };
    thi$.repaint = function() {
        if ($super(this)) {
            this.legendView.repaint();
            return true;
        }
        return false;
    }.$override(this.repaint);
    thi$.doLayout = function(force) {
        if ($super(this)) {
            var D = this.getBounds(), MBP = D.MBP, box = DOM.getBounds(this.legend), left = MBP.borderLeftWidth + MBP.paddingLeft, top = J$VM.edge || J$VM.ie ? box.height : 0, width = D.innerWidth, height = D.height - top - MBP.borderBottomWidth - MBP.paddingBottom;
            DOM.setStyle(this.legend, "line-height", box.height + "px");
            this.legendView.setBounds(left, top, width, height, 7);
            return true;
        }
        return false;
    }.$override(this.doLayout);
    thi$.destroy = function() {
        var view = this.legend, items;
        this.legend = null;
        DOM.remove(view, true);
        view = this.legendView;
        items = view.items0() || [];
        for (var i = 0, len = items.length; i < len; i++) {
            delete this[items[i]];
        }
        this.legendView = null;
        view.destroy();
        $super(this);
    }.$override(this.destroy);
    var _getLegendViewDef = function(def, R) {
        var vdef = def.legendView = def.legendView || {}, items, iid, idef;
        vdef.classType = vdef.classType || "js.awt.Container";
        vdef.className = vdef.className || DOM.combineClassName(def.className, "legendView");
        vdef.css = "position:absolute;" + (vdef.css || "");
        items = vdef.items = vdef.items || def.items || [];
        delete def.items;
        for (var i = 0, len = items.length; i < len; i++) {
            iid = items[i];
            idef = def[iid];
            delete def[iid];
            if (!vdef[iid]) {
                vdef[iid] = idef;
            }
        }
        vdef.state = vdef.state || 0;
        vdef.layout = vdef.layout || def.layout;
        return vdef;
    };
    thi$._init = function(def, Runtime) {
        if (typeof def !== "object") {
            return;
        }
        def.classType = def.classType || "js.swt.FieldSet";
        def.className = def.className || "jsvm_fieldset";
        def.stateless = def.stateless !== false;
        def.viewType = "FIELDSET";
        def.css = "margin:0px;padding-top:0px;";
        $super(this, def, Runtime);
        var legend = this.legend = DOM.createElement("LEGEND"), vdef, legendView, ele = this.view, items, iid;
        legend.className = DOM.combineClassName(this.className, "legend");
        legend.innerHTML = this.def.legendText;
        ele.appendChild(legend);
        vdef = _getLegendViewDef.apply(this, arguments);
        legendView = this.legendView = new (Class.forName(vdef.classType))(vdef, Runtime);
        legendView.appendTo(ele);
        items = legendView.items0() || [];
        for (var i = 0, len = items.length; i < len; i++) {
            iid = items[i];
            this[iid] = legendView[iid];
        }
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Component);

js.swt.FieldSet.DEFAULTDEF = function() {
    return {
        classType: "js.swt.FieldSet",
        legendText: "",
        rigid_w: false,
        rigid_h: false,
        legendView: {
            classType: "js.awt.Container"
        }
    };
};

$package("js.swt");

js.swt.TextField = function(def, Runtime) {
    var CLASS = js.swt.TextField, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, E = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, HexReg = /^[0-9a-fA-F]+$/, IntReg = /^[0-9]+$/, MinusIntReg = /^-?[0-9]+$/, FloatReg = /^[0-9]*(\.?[0-9]+)$/, MinusFloatReg = /^-?[0-9]*(\.?[0-9]+)$/;
    thi$.msgType = function(msgType) {
        var U = this._local;
        if (Class.isString(msgType) && msgType.length > 0) {
            U.msgType = msgType;
        }
        return U.msgType || "js.swt.event.TextFieldEvent";
    };
    thi$.useCipher = function(b) {
        var M = this.def;
        M.useCipher = this.isPassword || !!b;
        this.textField.type = M.useCipher ? "password" : "text";
    };
    thi$.getValue = function(dataType) {
        if (typeof dataType !== "string") {
            dataType = this.def.dataType || "";
        }
        var v = this.textField.value;
        switch (dataType.toLowerCase()) {
          case "integer":
            v = parseInt(v, 10);
            break;

          case "float":
            v = parseFloat(v.replace(/,/g, "."));
            break;

          default:
            break;
        }
        return v;
    };
    thi$.setValue = function(value, callback) {
        var v = "";
        if (value != undefined && value != null) {
            v = value;
        }
        this._latestValue = undefined;
        this.def.value = v;
        this.textField.value = v;
        _showPlaceholder.call(this, !this.textField.value);
        if (callback) {
            var e = new E("set", v, this);
            _onValueChanged.call(this, e);
        }
    };
    thi$.getText = function() {
        System.err.println("This method is deprecated, " + "please use getValue");
        return this.getValue();
    };
    thi$.setText = function(text) {
        System.err.println("This method is deprecated, " + "please use setValue");
        this.setValue(text);
    };
    thi$.getEditable = function() {
        return !this.textField.readOnly;
    };
    thi$.setEditable = function(b) {
        this.textField.readOnly = !b;
    };
    thi$.setEnabled = function(b) {
        $super(this);
        this.textField.disabled = !b;
    }.$override(this.setEnabled);
    thi$.getEnable = function() {
        System.err.println("This method is deprecated, " + "please use isEnabled");
        return this.isEnabled();
    };
    thi$.setToolTipText = function(s) {
        $super(this);
        var rview = this.textField;
        if (rview) {
            DOM.setAttribute(rview, "title", s);
        }
    }.$override(this.setToolTipText);
    thi$.delToolTipText = function() {
        $super(this);
        var rview = this.textField;
        if (rview) {
            DOM.removeAttribute(rview, "title");
        }
    }.$override(this.delToolTipText);
    thi$.setErrSign = function(b, errStyle) {
        var M = this.def, U = this._local, rview = this.textField, sp, sps, oStyles;
        if (b) {
            U.iptClassName = null;
            U.iptStyles = null;
            if (typeof errStyle === "object") {
                oStyles = U.iptStyles = {};
                for (sp in errStyle) {
                    oStyles[DOM.camelName(sp)] = DOM.getStyle(rview, sp);
                }
                DOM.applyStyles(rview, errStyle);
            } else {
                U.iptClassName = rview.className;
                if (Class.isString(errStyle) && errStyle.length > 0) {
                    rview.className = errStyle;
                } else {
                    rview.className = M.className + "_err";
                }
            }
        } else {
            if (Class.isString(U.iptClassName)) {
                rview.className = U.iptClassName;
            }
            oStyles = U.iptStyles;
            if (oStyles && Class.isObject(oStyles)) {
                DOM.applyStyles(rview, oStyles);
            }
            U.iptClassName = null;
            U.iptStyles = null;
        }
    };
    var _autoSelect = function(select) {
        select = select || this._local.selectByFocus || this.def.autoSelect;
        delete this._local.selectByFocus;
        var ele = this.textField;
        if (!this.isEnabled() || !select) {
            return;
        }
        if (Class.isFunction(ele.select)) {
            ele.select();
        } else {
            DOM.autoSelect(ele);
        }
    };
    thi$.focus = function(select) {
        var U = this._local, ele = this.textField;
        if (this.isEnabled()) {
            if (J$VM.ie) {
                ele.setActive();
            }
            U.SelectByFocus = select;
            ele.focus();
        }
    };
    thi$.blur = function() {
        if (this.isEnabled()) {
            this.textField.blur();
        }
    };
    thi$.setMaxLength = function(num) {
        if (num > 0) {
            this.textField.maxLength = num;
        }
    };
    var _onPhLabelClick = function(e) {
        this.focus();
    };
    var _createPlaceholder = function() {
        var phLabel = document.createElement("span");
        phLabel.className = this.def.className + "_placeholder";
        phLabel.style.cssText = "position:absolute;left:0px;top:0px;" + "width:1px;height:1px;display:none;";
        phLabel.innerHTML = this.getPlaceholder() || "";
        DOM.appendTo(phLabel, this.view);
        E.attachEvent(phLabel, "click", 0, this, _onPhLabelClick);
        return phLabel;
    };
    var _adjustPlaceholder = function() {
        var sps = [ "left", "top", "height", "line-height" ], styles = DOM.getStyles(this.textField, sps);
        DOM.applyStyles(this.phLabel, styles);
    };
    thi$.setPlaceholder = function(placeholder) {
        if (Class.isString(placeholder)) {
            this._local.placeholder = placeholder;
            if (J$VM.supports.placeholder) {
                this.textField.placeholder = placeholder;
            } else {
                if (!this.phLabel) {
                    this.phLabel = _createPlaceholder.call(this);
                } else {
                    this.phLabel.innerHTML = placeholder || "";
                }
                _adjustPlaceholder.call(this);
                _showPlaceholder.call(this, !this.textField.value);
            }
        }
    };
    thi$.getPlaceholder = function() {
        return this._local.placeholder;
    };
    var _showPlaceholder = function(b) {
        if (this.phLabel) {
            this.phLabel.style.display = b ? "inline" : "none";
        }
    };
    var _layout = function() {
        var ipt = this.textField, box = this.getBounds(), mbp = box.MBP;
        DOM.setPosition(ipt, mbp.paddingLeft, mbp.paddingTop);
        var w = box.innerWidth, h = box.innerHeight, d;
        if (!isNaN(w) || !isNaN(h)) {
            DOM.setSize(ipt, w, h);
        }
        if (!this.isMultiline) {
            d = DOM.getBounds(ipt);
            h = d.innerHeight;
            if (!isNaN(h)) {
                ipt.style.lineHeight = h + "px";
            }
        }
        if (this.phLabel) {
            _adjustPlaceholder.call(this);
        }
    };
    thi$.doLayout = function() {
        if ($super(this)) {
            _layout.call(this);
            return true;
        }
        return false;
    }.$override(this.doLayout);
    thi$.destroy = function() {
        E.detachEvent(this.textField, "selectstart", 1, this, _onselectstart);
        E.detachEvent(this.textField, "focus", 1, this, _onFocus);
        DOM.remove(this.textField, true);
        delete this.textField;
        delete this._latestValue;
        delete this._curValue;
        $super(this);
    }.$override(this.destroy);
    var _onselectstart = function(e) {
        e.cancelBubble();
        return true;
    };
    thi$.prefocus = function(e) {
        return;
    };
    var _onMouseDown = function(e) {
        if (J$VM.mobile) {
            this.focus();
        }
        this.prefocus(e);
        this._latestValue = this._curValue = this.getValue();
    };
    thi$.validate = function(e) {
        if (this.isPassword) {
            return true;
        }
        var M = this.def, dataType = M.dataType || "", allowMinus = M.allowMinus === true, isShift = e.shiftKey === true, kcode = e.keyCode, value = this.textField.value || "", valid = false;
        if (kcode == 8 || kcode == 46 || kcode == 37 || kcode == 39 || kcode == 13) {
            return true;
        }
        switch (dataType.toLowerCase()) {
          case "hex":
            if (!isShift && kcode >= 48 && kcode <= 57 || kcode >= 65 && kcode <= 70 || kcode >= 96 && kcode <= 105) {
                valid = true;
            } else {
                valid = false;
            }
            break;

          case "integer":
            if (allowMinus && (!isShift && kcode == 189 || kcode == 109) && value.length == 0) {
                valid = true;
            } else {
                if (kcode >= 96 && kcode < 106 || !isShift && kcode > 47 && kcode < 60) {
                    valid = true;
                } else {
                    valid = false;
                }
            }
            break;

          case "float":
            if (allowMinus && (!isShift && kcode == 189 || kcode == 109) && value.length == 0) {
                valid = true;
            } else {
                if (kcode >= 96 && kcode < 106 || !isShift && kcode > 47 && kcode < 60 || (kcode == 110 || !isShift && kcode == 190) && value.indexOf(".") == -1) {
                    valid = true;
                } else {
                    valid = false;
                }
            }
            break;

          default:
            valid = true;
            break;
        }
        return valid;
    };
    var _onKeyDown = function(e) {
        e.cancelBubble();
        if (!this.validate(e)) {
            return false;
        }
        if (e.keyCode === 13 && (!this.isMultiline || e.ctrlKey)) {
            var rview = this.textField;
            E.detachEvent(rview, "blur", 1, this, _onBlur);
            var value = this.getValue();
            _submitValue.call(this, e, value);
            E.attachEvent(rview, "blur", 1, this, _onBlur);
        }
        return true;
    };
    var _onKeyUp = function(e) {
        e.cancelBubble();
        _onValueChanged.call(this, e);
    };
    thi$.validateData = function(data) {
        var M = this.def, dataType = M.dataType || "", allowMinus = M.allowMinus === true, v = data.value, valid = true, reg;
        if (dataType && v) {
            switch (dataType.toLowerCase()) {
              case "hex":
                reg = HexReg;
                break;

              case "integer":
                reg = allowMinus ? MinusIntReg : IntReg;
                break;

              case "float":
                reg = allowMinus ? MinusFloatReg : FloatReg;
                break;
            }
            if (reg) {
                valid = reg.test("" + v);
            }
        }
        return valid;
    };
    var _onValueChanged = function(e) {
        var value = this.getValue(), data = {
            eType: e.getType(),
            value: value,
            changed: this._latestValue != value
        }, evt;
        this._latestValue = value;
        if (data.changed) {
            if (!this.validateData(data, e)) {
                return;
            }
            evt = new E(CLASS.EVT_VALUECHANGED, data, this);
            this.fireEvent(evt);
            if (typeof this.onValueChanged == "function") {
                this.onValueChanged(value);
            }
        }
    };
    var _onFocus = function(e) {
        var U = this._local, rview = this.textField;
        this._latestValue = this._curValue = this.getValue();
        if (!U.eventAttached) {
            E.attachEvent(rview, "keydown", 1, this, _onKeyDown);
            E.attachEvent(rview, "keyup", 0, this, _onKeyUp);
            E.attachEvent(rview, "blur", 1, this, _onBlur);
            U.eventAttached = true;
        }
        _showPlaceholder.call(this, false);
        _autoSelect.call(this);
    };
    var _onBlur = function(e) {
        var U = this._local, rview = this.textField, value;
        if (U.eventAttached) {
            E.detachEvent(rview, "keydown", 1, this, _onKeyDown);
            E.detachEvent(rview, "keyup", 0, this, _onKeyUp);
            E.detachEvent(rview, "blur", 1, this, _onBlur);
            U.eventAttached = false;
        }
        _showPlaceholder.call(this, !rview.value);
        value = this.getValue();
        _submitValue.call(this, e, value);
    };
    var _submitValue = function(e, value) {
        var data = {
            eType: e.getType(),
            value: value,
            changed: this._curValue != value
        }, evt;
        e.setType("submit");
        if (!this.validateData(data, e)) {
            return;
        }
        evt = new E(CLASS.EVT_SUBMIT, data, this);
        this.fireEvent(evt);
        if (typeof this.onSubmitValue == "function") {
            this.onSubmitValue(data);
        }
    };
    var _createInput = function(def) {
        var rView, clazz, css, fCss;
        if (this.isMultiline) {
            rView = this.textField = document.createElement("textarea");
            clazz = DOM.combineClassName(this.className, "textarea");
        } else {
            if (this.isPassword) {
                rView = this.textField = document.createElement("input");
                rView.type = "password";
            } else {
                rView = this.textField = document.createElement("input");
                rView.type = "text";
            }
            clazz = DOM.combineClassName(this.className, "input");
            rView.id = rView.name = this.id + "_input";
            rView.autocomplete = "off";
        }
        rView.clazz = clazz;
        DOM.setClassName(rView, clazz);
        css = "position:absolute;left:0px;top:0px;margin:0px;" + "border:0px none;outline:none;resize:none;overflow:hidden;";
        fCss = def.fontCss;
        if (Class.isString(fCss) && fCss.length > 0) {
            css += fCss;
        }
        rView.style.cssText = css;
        DOM.appendTo(rView, this.view);
        E.attachEvent(rView, "selectstart", 1, this, _onselectstart);
        this.attachEvent("mousedown", 4, this, _onMouseDown);
        E.attachEvent(rView, "focus", 1, this, _onFocus);
    };
    thi$._init = function(def, Runtime) {
        if (typeof def !== "object") {
            return;
        }
        def.classType = def.classType || "js.swt.TextField";
        def.className = def.className || "jsvm_textfield";
        $super(this);
        this.autoSelect = def.autoSelect === true;
        this.isMultiline = def.multiline === true;
        this.isPassword = def.isPassword === true;
        _createInput.call(this, def);
        if (def.hasOwnProperty("useCipher")) {
            this.useCipher(def.useCipher);
        }
        this.setValue(def.value);
        this.setPlaceholder(def.placeholder);
        this.setEnabled(def.enable !== false);
        this.setEditable(def.editable !== false);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Component);

js.swt.TextField.RESERVEDPADDINGLEFT = 1;

js.swt.TextField.EVT_SUBMIT = "SubmitValue";

js.swt.TextField.EVT_VALUECHANGED = "ValueChanged";

js.swt.TextField.DEFAULTDEF = function(value) {
    return {
        classType: "js.swt.TextField",
        className: "jsvm_textfield",
        fontCss: undefined,
        enable: true,
        editable: true,
        isPassword: false,
        multiline: false,
        value: value || ""
    };
};

$package("js.swt");

js.swt.ListItem = function(def, Runtime, view) {
    var CLASS = js.swt.ListItem, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, E = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ;
    thi$.setIconImage = function() {
        this.icon.src = this.Runtime().imageUrl(this.getIconImage());
    }.$override(this.setIconImage);
    thi$.getModel = function() {
        return this.model;
    };
    thi$.isMine = function(model) {
        if (!(this.model && model)) {
            return false;
        }
        if (this.model === model) {
            return true;
        }
        if (this.model.value === model.value && (this.model.dname === model.dname || this.model.img === model.img)) {
            return true;
        }
        return false;
    };
    thi$.hasController = function(b) {
        if (Class.isBoolean(b)) {
            this.model.noController = !b;
        }
        return !this.model.noController;
    };
    thi$.getValue = function() {
        var value = this.model ? this.model.value : null;
        return value;
    };
    thi$.mark = function(b) {
        $super(this);
        this.model.marked = this.isMarked();
    }.$override(this.mark);
    thi$.isHoverForSelected = function() {
        return this.def.hoverForSelected === true;
    };
    thi$.setSelected = function(b) {
        if (this.isMarkable()) {
            this.mark(b);
        } else {
            this._local.selected = b;
            this.model.marked = b;
            if (this.isHoverForSelected()) {
                this.setHover(b);
            } else {
                this.setHover(false);
                this.setTriggered(b);
            }
        }
    };
    thi$.isSelected = function() {
        return this._local.selected || this.isMarked();
    };
    thi$.getContent = function() {
        var m = this.model || {};
        return m.dname || "";
    };
    thi$.isSearchable = function() {
        return Class.isString(this.model.dname);
    };
    thi$.cloneView = function() {
        var v = $super(this);
        DOM.removeFun(v);
        return v;
    }.$override(this.cloneView);
    thi$.canCloneView = function(itemDef) {
        var m = itemDef.model || {}, sign = m.sign, dname = m.dname, iconImage = m.img || m.iconImage, items = [];
        if (itemDef.markable === true) {
            items.push("marker");
        }
        if (Class.isValid(iconImage)) {
            items.push("icon");
        }
        if (typeof m.sign === "object") {
            items.push("sign");
        }
        if (Class.isValid(dname)) {
            items.push("label");
        } else {
            if (Class.isValid(m.inputText)) {
                items.push("input");
            }
        }
        return items.join("") === this.def.items.join("");
    }.$override(this.canCloneView);
    var _preInit = function(def) {
        var m = def.model || {}, sign = m.sign, dname = m.dname, iconImage = m.img || m.iconImage;
        if (Class.isObject(sign)) {
            def.sign = sign;
        }
        if (Class.isValid(dname)) {
            def.labelText = dname;
        }
        if (Class.isValid(iconImage)) {
            def.iconImage = iconImage;
        }
        def.checked = m.marked === true;
        return def;
    };
    thi$._init = function(def, Runtime, view) {
        if (typeof def !== "object") {
            return;
        }
        def.classType = def.classType || "js.swt.ListItem";
        def.className = def.className || "jsvm_listItem";
        var newDef = System.objectCopy(def, {}, true);
        this.model = newDef.model;
        newDef = _preInit.call(this, newDef);
        $super(this, newDef, Runtime, view);
        var m = this.model;
        if (newDef.showTips && m) {
            var tip = m.tip || m.dname || "";
            this.setToolTipText(tip);
        }
        this.setEnabled(newDef.enable !== false);
        if (newDef.checked) {
            this.setSelected(true);
        }
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Item);

$package("js.swt");

$import("js.swt.ListItem");

js.swt.List = function(def, runtime) {
    var CLASS = js.swt.List, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, LinkedList = js.util.LinkedList, ListItem = js.swt.ListItem;
    thi$.item = function(uuid) {
        return this._local.cache[uuid];
    };
    thi$.isReady = function() {
        return this._isReady;
    };
    var _preSelect = function(item) {
        if (!item.isSelected()) {
            return;
        }
        var uuid = item.uuid();
        if (this.multiEnable || this._selectedItems.length == 0) {
            this._selectedItems.addLast(uuid);
        } else {
            item.setSelected(false);
        }
    };
    thi$.addItem = function(item, ack, force) {
        this.insertItem(undefined, item, ack, force);
    };
    thi$.insertItem = function(index, item, ack, force) {
        if (!item || !(item instanceof ListItem) || this.distinct && this.contains(item.def)) {
            if (ack === true && force === true) {
                _sendAck.call(this, "ACK_ADD", true);
            }
            return;
        }
        var U = this._local, items = this._items, len = items.length, ref, uuid = item.uuid();
        if (Class.isNumber(index)) {
            if (index < 0) {
                index = len + index;
            }
            if (index > len) {
                index = len;
            }
            if (index < 0) {
                index = 0;
            }
            ref = U.cache[items[index]];
        }
        item.setPeerComponent(this);
        DOM.insertBefore(item.view, ref ? ref.view : null, this.listView);
        if (ref) {
            items.add(index, uuid);
        } else {
            items.addLast(uuid);
        }
        U.cache[uuid] = item;
        _preSelect.call(this, item);
        this._canBeSearched = this._canBeSearched && item.isSearchable();
        if (ack === true) {
            _sendAck.call(this, "ACK_ADD", true);
        }
    };
    var _setItems = function(items, append) {
        var len = items ? items.length : 0;
        if (!append) {
            this._isReady = false;
            this.wipe();
            if (len == 0) {
                _sendAck.call(this, "ACK_ADD", true);
            }
        }
        if (len == 0) {
            return;
        }
        var i, item, isLast = false;
        for (i = 0; i < len; i++) {
            item = items[i];
            isLast = i == len - 1;
            if (this.lazy) {
                this.addItem.$delay(this, 0, item, isLast, isLast);
            } else {
                this.addItem(item, isLast, isLast);
            }
        }
    };
    thi$.setItems = function(items) {
        _setItems.call(this, items, false);
    };
    thi$.addItems = function(items) {
        _setItems.call(this, items, true);
    };
    var _createItemDef = function(model) {
        var itemDef = model.split ? {
            classType: "js.awt.Component",
            rigid_w: false,
            rigid_h: true,
            type: "split",
            css: model.css
        } : {
            markable: this.multiByCheck,
            showTips: this.showTips,
            toggle: false,
            model: model
        };
        return itemDef;
    };
    var _getLastItem = function() {
        var items = this._items, len = items.length;
        return len > 0 ? this._local.cache[items[len - 1]] : undefined;
    };
    thi$.insertItemByDef = function(index, itemDef, ack, force) {
        var R = this.Runtime(), M = this.def, U = this._local, itemClassName, item, refItem, cview;
        if (!itemDef || this.distinct && this.contains(itemDef)) {
            if (ack === true && force === true) {
                _sendAck.call(this, "ACK_ADD", true);
            }
            return null;
        }
        if (itemDef.type === "split") {
            if (!itemDef.css) {
                itemDef.css = "background-color:rgb(204, 204, 204);height:1px;" + "padding:0px;border:0px;margin:0px;";
            }
            itemDef.className = "jsvm_list_splitItem";
            item = new (Class.forName(itemDef.classType))(itemDef, R);
            DOM.appendTo(item.view, this.listView);
            return item;
        }
        itemClassName = M.itemClassName;
        if (!itemDef.className) {
            if (itemClassName) {
                itemDef.className = itemClassName;
            } else {
                itemDef.className = "jsvm_listItem $jsvm_listItem" + " " + DOM.combineClassName(M.className, "item");
            }
        }
        itemDef.css = "position:relative;overflow:visible;" + "white-space:nowrap;";
        if (this.multiEnable) {
            itemDef.markable = this.multiByCheck === true;
            itemDef.hoverForSelected = false;
        } else {
            itemDef.markable = false;
            itemDef.hoverForSelected = M.hoverForSelected === true;
        }
        refItem = _getLastItem.call(this);
        if (refItem && refItem.isVisible() && refItem.canCloneView(itemDef)) {
            cview = refItem.cloneView();
        }
        item = new ListItem(itemDef, R, cview);
        this.insertItem(index, item, ack, force);
        return item;
    };
    thi$.addItemByDef = function(itemDef, ack, force) {
        return this.insertItemByDef(undefined, itemDef, ack, force);
    };
    thi$.insertItemByModel = function(index, model, ack) {
        if (!model) {
            return null;
        }
        var itemDef = _createItemDef.call(this, model);
        return this.insertItemByDef(index, itemDef, ack);
    };
    thi$.addItemByModel = function(model, ack) {
        return this.insertItemByModel(undefined, model, ack);
    };
    var _setItemsByModel = function(models, append) {
        var len = models ? models.length : 0;
        if (!append) {
            this._isReady = false;
            this.wipe();
            if (len == 0) {
                _sendAck.call(this, "ACK_ADD", true);
            }
        }
        if (len == 0) {
            return;
        }
        var i, model, def, isLast = false;
        for (i = 0; i < len; i++) {
            model = models[i];
            isLast = i == len - 1;
            if (!model) {
                throw "Unsupport item's model " + String(model);
            }
            def = _createItemDef.call(this, model);
            if (this.lazy) {
                this.addItemByDef.$delay(this, 0, def, isLast, isLast);
            } else {
                this.addItemByDef(def, isLast, isLast);
            }
        }
    };
    thi$.setItemsByModel = function(models) {
        _setItemsByModel.call(this, models, false, false);
    };
    thi$.addItemsByModel = function(models) {
        _setItemsByModel.call(this, models, true, false);
    };
    var _setItemsByDef = function(defs, append) {
        var len = defs ? defs.length : 0;
        if (!append) {
            this._isReady = false;
            this.wipe();
            if (len == 0) {
                _sendAck.call(this, "ACK_ADD", true);
            }
        }
        if (len == 0) {
            return;
        }
        var def, isLast = false;
        for (var i = 0; i < len; i++) {
            def = defs[i];
            isLast = i == len - 1;
            if (!def) {
                throw "Unsupport item's difinition " + String(def);
            }
            if (this.lazy) {
                this.addItemByDef.$delay(this, 0, def, isLast, isLast);
            } else {
                this.addItemByDef(def, isLast, isLast);
            }
        }
    };
    thi$.setItemsByDef = function(defs) {
        _setItemsByDef.call(this, defs, false, false);
    };
    thi$.addItemsByDef = function(defs) {
        _setItemsByDef.call(this, defs, true, false);
    };
    thi$.remove = function(item, ack) {
        if (item && typeof item == "object") {
            var uuid = item.uuid();
            this._selectedItems.remove(uuid);
            this._items.remove(uuid);
            delete this._local.cache[uuid];
            item.removeFrom(this.listView);
            if (typeof this.onItemRemoved == "function") {
                this.onItemRemoved(item);
            }
            item.destroy();
            item = null;
            if (ack === true) {
                _sendAck.call(this, "ACK_REMOVE", true);
            }
        }
    };
    thi$.removeItems = function(items) {
        var len = items ? items.length : 0;
        if (len <= 0) {
            return;
        }
        (function(len, item, idx) {
            if (this.lazy) {
                this.remove.$delay(this, 0, item, idx == len - 1);
            } else {
                this.remove(item, idx == len - 1);
            }
        }).$forEach(this, items, len);
    };
    thi$.removeAll = function() {
        this.wipe();
        _sendAck.call(this, "ACK_REMOVE", true);
    };
    var _setAck = function(signal) {
        switch (signal) {
          case "ACK_ADD":
            var ready = this._isReady;
            this._isReady = true;
            this.fireEvent(new Event(CLASS.EVT_ACK_ITEMSADDED, undefined, this));
            if (!ready) {
                this.fireEvent(new Event(CLASS.EVT_READY, undefined, this));
            }
            _layout.call(this);
            break;

          case "ACK_REMOVE":
            this.fireEvent(new Event(CLASS.EVT_ACK_ITEMSREMOVED, undefined, this));
            _layout.call(this);
            break;

          default:
            break;
        }
    };
    var _sendAck = function(signal, invalid) {
        if (invalid === true) {
            _invalidateSize.call(this);
        }
        _setAck.call(this, signal);
    };
    thi$.getItemsCount = function() {
        return this._items.length;
    };
    thi$.getItemAt = function(index) {
        return this._local.cache[this._items[index]];
    };
    thi$.getItemIndex = function(item) {
        return this._items.indexOf(item.uuid());
    };
    thi$.isFirstItem = function(item) {
        var items = this._items;
        return items.indexOf(item.uuid()) === 0;
    };
    thi$.isLastItem = function(item) {
        var items = this._items;
        return items.indexOf(item.uuid()) === items.length - 1;
    };
    thi$.getPreSiblingItem = function(item) {
        var idx = this.getItemIndex(item);
        if (idx <= 0) {
            return null;
        }
        return this.getItemAt(idx - 1);
    };
    thi$.getNextSiblingItem = function(item) {
        var items = this._items, idx = this.getItemIndex(item);
        if (idx < 0 || idx >= items.length - 1) {
            return null;
        }
        return this.getItemAt(idx + 1);
    };
    thi$.moveItem = function(from, to) {
        var cache = this._local.cache, items = this._items, len = items.length, fitem, titem;
        if (to > len) {
            to = len;
        }
        if (from == to || from === to - 1) {
            return;
        }
        fitem = cache[items[from]];
        titem = cache[items[to]];
        if (!fitem) {
            return;
        }
        items.remove0(from);
        if (from < to) {
            --to;
        }
        if (titem) {
            items.add(to, fitem.uuid());
            DOM.insertBefore(fitem.view, titem.view, this.listView);
        } else {
            items.addLast(fitem.uuid());
            DOM.appendTo(fitem.view, this.listView);
        }
        this.fireEvent(new Event(CLASS.EVT_ITEMMOVED, fitem, fitem));
    };
    thi$.shiftUpItemAt = function(index) {
        if (index > 0) {
            this.moveItem(index, index - 1);
        }
    };
    thi$.shiftUpItem = function(item) {
        var index = this.getItemIndex(item);
        if (index !== -1) {
            this.shiftUpItemAt(index);
        }
    };
    thi$.shiftDownItemAt = function(index) {
        var len = this._items.length;
        if (index < len - 1) {
            this.moveItem(index + 1, index);
        }
    };
    thi$.shiftDownItem = function(item) {
        var index = this.getItemIndex(item);
        if (index !== -1) {
            this.shiftDownItemAt(index);
        }
    };
    thi$.getItemsByModel = function(items, model) {
        if (!model || typeof model !== "object") {
            return null;
        }
        var finds = [], len = items.length, item;
        for (var i = 0; i < len; i++) {
            item = items[i];
            if (item.isMine(model)) {
                finds.push(item);
            }
        }
        return finds;
    };
    thi$.getItemsByDname = function(items, dname) {
        if (typeof dname !== "string") {
            return null;
        }
        var finds = [], len = items.length, item, v;
        for (var i = 0; i < len; i++) {
            item = items[i];
            v = item && item.model ? item.model.dname : null;
            if (v && dname === v) {
                finds.push(item);
            }
        }
        return finds;
    };
    thi$.getItemsByValue = function(items, value) {
        if (value == undefined) {
            return null;
        }
        var finds = [], len = items.length, item, v;
        for (var i = 0; i < len; i++) {
            item = items[i];
            v = item ? item.getValue() : null;
            if (value === v) {
                finds.push(item);
                if (this.distinct) {
                    return finds;
                }
            }
        }
        return finds;
    };
    thi$.contains = function(itemDef) {
        var m = itemDef ? itemDef.model : undefined;
        if (!m || typeof m !== "object") {
            return false;
        }
        var len = this._items ? this._items.length : 0, item;
        for (var i = 0; i < len; i++) {
            item = this.item(this._items[i]);
            if (item.isMine(m)) {
                return true;
            }
        }
        return false;
    };
    var _getInfoByUUids = function(ids, prop, distinct) {
        var len = ids ? ids.length : 0, rst = LinkedList.$decorate([]), item, m, v;
        for (var i = 0; i < len; i++) {
            item = this.item(ids[i]);
            switch (prop) {
              case "def":
                rst.addLast(item.def);
                break;

              case "model":
                m = item ? item.model : undefined;
                if (m && (distinct !== true || !CLASS.isModelIn(m, rst))) {
                    rst.addLast(m);
                }
                break;

              case "value":
                m = item ? item.model : undefined;
                v = m ? m.value : undefined;
                if (v !== undefined && (distinct !== true || !rst.contains(v))) {
                    rst.addLast(v);
                }
                break;

              default:
                rst.addLast(item);
                break;
            }
        }
        return rst;
    };
    var _getInfoByUUids0 = function(ids, prop, distinct) {
        if (!Class.isArray(ids) || ids.length == 0) {
            return [];
        }
        LinkedList.$decorate(ids);
        var len = this._items ? this._items.length : 0, rst = LinkedList.$decorate([]), uuid, item, m, v, idx;
        for (var i = 0; i < len; i++) {
            uuid = this._items[i];
            if (!ids.contains(uuid)) {
                continue;
            }
            item = this.item(uuid);
            if (!item.isVisible()) {
                continue;
            }
            switch (prop) {
              case "def":
                rst.addLast(item.def);
                break;

              case "model":
                m = item ? item.model : undefined;
                if (m && (distinct !== true || !CLASS.isModelIn(m, rst))) {
                    rst.addLast(m);
                }
                break;

              case "value":
                m = item ? item.model : undefined;
                v = m ? m.value : undefined;
                if (v !== undefined && (distinct !== true || !rst.contains(v))) {
                    rst.addLast(v);
                }
                break;

              case "index":
                idx = i;
                if (distinct !== true || !rst.contains(idx)) {
                    rst.addLast(idx);
                }
                break;

              default:
                rst.addLast(item);
                break;
            }
        }
        return rst;
    };
    thi$.getAll = function(filter) {
        var len = this._items ? this._items.length : 0, rst = [], item;
        for (var i = 0; i < len; i++) {
            item = this.item(this._items[i]);
            if (item && (!Class.isFunction(filter) || filter(item))) {
                rst.push(item);
            }
        }
        return rst;
    };
    thi$.getItems = function() {
        return this.getAll();
    };
    thi$.getItemDefs = function() {
        return _getInfoByUUids.call(this, this._items, "def");
    };
    thi$.getItemModels = function() {
        return _getInfoByUUids.call(this, this._items, "model");
    };
    thi$.getSelectedItems = function(isOrdered) {
        var rst;
        if (isOrdered === true) {
            rst = _getInfoByUUids0.call(this, this._selectedItems);
        } else {
            rst = _getInfoByUUids.call(this, this._selectedItems);
        }
        return rst;
    };
    thi$.getSelectedDefs = function(isOrdered) {
        var rst;
        if (isOrdered === true) {
            rst = _getInfoByUUids0.call(this, this._selectedItems, "def");
        } else {
            rst = _getInfoByUUids.call(this, this._selectedItems, "def");
        }
        return rst;
    };
    thi$.getSelectedModels = function(isOrdered) {
        var rst;
        if (isOrdered === true) {
            rst = _getInfoByUUids0.call(this, this._selectedItems, "model", true);
        } else {
            rst = _getInfoByUUids.call(this, this._selectedItems, "model", true);
        }
        return rst;
    };
    thi$.getSelectedIndexes = function() {
        return _getInfoByUUids0.call(this, this._selectedItems, "index", true);
    };
    thi$.getSelectedValues = function(isOrdered) {
        var rst;
        if (isOrdered === true) {
            rst = _getInfoByUUids0.call(this, this._selectedItems, "value", true);
        } else {
            rst = _getInfoByUUids.call(this, this._selectedItems, "value", true);
        }
        return rst;
    };
    thi$.wipe = function() {
        if (!this.listView) {
            return;
        }
        this._local.cache = {};
        this._selectedItems = LinkedList.$decorate([]);
        this._items = LinkedList.$decorate([]);
        this.listView.innerHTML = "";
        delete this._contentSize;
        this._local.prefSize = null;
    };
    var _measure = function() {
        var cv = this.listView, box, w, h;
        if (this.getItemsCount() > 0) {
            cv.style.overflow = "hidden";
            cv.style.width = "0px";
            cv.style.height = "0px";
            DOM.appendTo(cv, document.body);
            w = cv.scrollWidth;
            h = cv.scrollHeight;
            cv.style.overflow = "visible";
            cv.style.width = w + "px";
            cv.style.height = h + "px";
            DOM.appendTo(cv, this.view);
        } else {
            w = 0;
            h = 0;
        }
        this._contentSize = this._contentSize || {};
        this._contentSize.width = w;
        this._contentSize.height = h;
        System.log.println("List Size:" + JSON.stringify(this._contentSize));
    };
    var _measure$ = function() {
        var cv = this.listView, w, h;
        cv.style.overflow = "hidden";
        cv.style.width = "0px";
        cv.style.height = "0px";
        w = cv.scrollWidth;
        h = cv.scrollHeight;
        cv.style.overflow = "visible";
        cv.style.width = w + "px";
        cv.style.height = h + "px";
        this._contentSize = this._contentSize || {};
        this._contentSize.width = w;
        this._contentSize.height = h;
    };
    var _invalidateSize = function(items) {
        this._isLayoutDirty = true;
        _measure.call(this);
        if (this.isDOMElement() && !this.def.prefSize) {
            this._local.prefSize = null;
            this.getPreferredSize();
        }
    };
    var _calPreferredSize = function() {
        if (!this._contentSize) {
            _measure.call(this);
        }
        var s = this._contentSize, cw = s ? s.width : undefined, ch = s ? s.height : undefined, d = this.getBounds(), mbp = d.MBP, w = d.width, h = d.height;
        w = !isNaN(cw) ? cw + mbp.BPW : w;
        h = !isNaN(ch) ? ch + mbp.BPH : h;
        return {
            width: w + 2,
            height: h + 2
        };
    };
    thi$.getContentSize = function() {
        if (!this._contentSize) {
            _measure.call(this);
        }
        return this._contentSize;
    };
    thi$.getPreferredSize = function() {
        var M = this.def, U = this._local, prefSize = M.prefSize || U.prefSize;
        if (!prefSize) {
            prefSize = U.prefSize = _calPreferredSize.call(this);
        }
        return prefSize;
    };
    var _layoutListView = function(w, h, box) {
        box = box || this.getBounds();
        var mbp = box.MBP, avaiW = w - mbp.BPW, avaiH = h - mbp.BPH;
        var cvSize = this._contentSize, cw, ch;
        cw = cvSize.width < avaiW ? "100%" : cvSize.width + "px";
        ch = cvSize.height < avaiH ? "100%" : cvSize.height + "px";
        this.listView.style.width = cw;
        this.listView.style.height = ch;
    };
    var _layout = function(w, h) {
        if (!this._isLayoutDirty || !this._isReady || !this.isDOMElement()) {
            return;
        }
        this._isLayoutDirty = false;
        var d = this.getBounds(), prefSize = this.getPreferredSize(), maxSize = this.isMaximumSizeSet ? this.getMaximumSize() : null, minSize = this.isMinimumSizeSet ? this.getMinimumSize() : null;
        w = !isNaN(w) && w > 0 ? w : this.hauto ? prefSize.width : d.width;
        h = !isNaN(h) && h > 0 ? h : this.vauto ? prefSize.height : d.height;
        if (minSize) {
            w = !isNaN(minSize.width) && minSize.width > 0 ? Math.max(w, minSize.width) : w;
            h = !isNaN(minSize.height) && minSize.height > 0 ? Math.max(h, minSize.height) : h;
        }
        if (maxSize) {
            w = !isNaN(maxSize.width) ? Math.min(w, maxSize.width) : w;
            h = !isNaN(maxSize.height) ? Math.min(h, maxSize.height) : h;
        }
        _layoutListView.call(this, w, h, d);
        this.setSize(w, h);
    };
    thi$.onResized = function() {
        this._isLayoutDirty = true;
        $super(this);
    }.$override(this.onResized);
    thi$.onGeomChanged = function() {
        this._isLayoutDirty = true;
        $super(this);
    }.$override(this.onGeomChanged);
    thi$.doLayout = function() {
        if ($super(this)) {
            _layout.call(this);
            return true;
        }
        return false;
    }.$override(this.doLayout);
    thi$.dispose = function(w, h) {
        this._isLayoutDirty = true;
        _layout.apply(this, arguments);
    };
    thi$.canBeSearched = function() {
        return this._canBeSearched;
    };
    thi$.setSearchEnable = function(b) {
        var M = this.def, v = b === true;
        if (this.searchEnable === v) {
            return;
        }
        this.searchEnable = v;
        if (this.searchEnable) {
            this.searcher = this.searcher || new (Class.forName("js.swt.Searcher"))(this, M.searchOptions);
        } else {
            if (this.searcher) {
                this.searcher.destroy();
            }
            this.searcher = null;
        }
    };
    thi$.quickSearch = function(keyword, options) {
        var rst = false;
        if (this.searcher && typeof keyword === "string") {
            rst = this.searcher.search(keyword, options);
            if (rst) {
                this.unselectAll(true);
                _invalidateSize.call(this);
                this.dispose();
            }
        }
        return rst;
    };
    thi$.restore = function() {
        if (this.searcher) {
            this.searcher.restore();
            _invalidateSize.call(this);
            this.dispose();
        }
    };
    var _selectItems = function(items) {
        var len = items ? items.length : 0;
        if (len == 0) {
            return;
        }
        var item;
        for (var i = 0; i < len; i++) {
            item = items[i];
            this.selectItem(item);
        }
    };
    thi$.selectItem = function(item) {
        var uuid = item ? item.uuid() : undefined;
        if (uuid && !this._selectedItems.contains(uuid)) {
            item.setSelected(true);
            this._selectedItems.addLast(uuid);
        }
    };
    var _onItemSelected = function(arg) {
        this.fireEvent(new Event(CLASS.EVT_ITEMSELECTED, arg, this));
        if (typeof this.onSelected === "function") {
            this.onSelected(arg);
        }
    };
    thi$.setSelectedValues = function(values, callback) {
        var len = values ? values.length : 0;
        if (len == 0) {
            return;
        }
        this.unselectAll();
        var cnt = this.multiEnable ? len : 1, value, items;
        for (var i = 0; i < cnt; i++) {
            value = values[i];
            items = this.getItemsByValue(this.getItems(), value);
            _selectItems.call(this, items);
        }
        if (callback) {
            _onItemSelected.call(this, arguments[2]);
        }
    };
    thi$.setSelectedIndexes = function(indexes, callback) {
        var len = indexes ? indexes.length : 0;
        if (len == 0) {
            return;
        }
        this.unselectAll();
        var cnt = this.multiEnable ? len : 1, item, items = [];
        for (var i = 0; i < cnt; i++) {
            item = this.item(this._items[indexes[i]]);
            items.push(item);
        }
        _selectItems.call(this, items);
        if (callback) {
            _onItemSelected.call(this, arguments[2]);
        }
    };
    thi$.setSelectedItems = function(items, callback) {
        if (!items || items.length == 0) {
            return;
        }
        this.unselectAll();
        var temp = this.multiEnable ? items : [ items[0] ];
        _selectItems.call(this, temp);
        if (callback) {
            _onItemSelected.call(this, arguments[2]);
        }
    };
    thi$.selectAll = function(callback) {
        var len = this._items.length, item;
        for (var i = 0; i < len; i++) {
            item = this.item(this._items[i]);
            if (!item.isSelected()) {
                this.selectItem(item);
            }
        }
        if (callback === true) {
            _onItemSelected.call(this);
        }
    };
    var _unselectItem = function(item) {
        if (item) {
            item.setSelected(false);
            this._selectedItems.remove(item.uuid());
        }
    };
    thi$.unselectItem = function(item) {
        if (item) {
            _unselectItem.call(this, item);
        }
    };
    thi$.unselectAll = function(callback) {
        var uuid, item;
        while (this._selectedItems.length > 0) {
            uuid = this._selectedItems.getLast();
            item = this.item(uuid);
            _unselectItem.call(this, item);
        }
        if (callback === true) {
            _onItemSelected.call(this, arguments[1]);
        }
    };
    thi$.invertSelection = function() {
        var len = this._items.length, item;
        for (var i = 0; i < len; i++) {
            item = this.item(this._items[i]);
            if (item.isSelected()) {
                this.unselectItem(item);
            } else {
                this.selectItem(item);
            }
        }
    };
    thi$.isAllSelected = function() {
        var itemCnt = this._items.length, selectedCnt = this._selectedItems.length;
        if (!this.multiEnable) {
            return false;
        } else {
            if (selectedCnt === itemCnt) {
                return true;
            } else {
                if (this.distinct && selectedCnt !== itemCnt) {
                    return false;
                } else {
                    var item;
                    for (var i = 0; i < itemCnt; i++) {
                        item = this.item(this._items[i]);
                        if (!item.isSelected()) {
                            return false;
                        }
                    }
                    return true;
                }
            }
        }
    };
    thi$.onStateChange = function() {
        if (!this.container) {
            return;
        }
        if (this.isEnabled()) {
            this.showCover(false);
        } else {
            this.showCover(true);
        }
    };
    thi$.destroy = function() {
        delete this._selectedItems;
        delete this._items;
        delete this._local.cache;
        if (this.searcher) {
            this.searcher.destroy();
            delete this.searcher;
        }
        DOM.remove(this.listView, true);
        delete this.listView;
        $super(this);
    }.$override(this.destroy);
    var _select = function(listItem, ctrlKey, shiftKey) {
        if (!listItem) {
            return;
        }
        if (this.multiEnable && ctrlKey) {
            if (listItem.isSelected()) {
                this.unselectItem(listItem);
            } else {
                this.selectItem(listItem);
            }
        } else {
            if (this.multiEnable && shiftKey) {
                if (this._selectedItems.length == 0) {
                    this.selectItem(listItem);
                } else {
                    var fUUID = this._selectedItems.getLast(), from = this._items.indexOf(fUUID), to = this._items.indexOf(listItem.uuid()), step = (to - from) / Math.abs(to - from), index, item;
                    for (var i = 1, cnt = Math.abs(to - from); i <= cnt; i++) {
                        index = from + step * i;
                        item = this.item(this._items[index]);
                        this.selectItem(item);
                    }
                }
            } else {
                this.unselectAll();
                this.selectItem(listItem);
            }
        }
    };
    var _selectCheckableItem = function(item) {
        if (!item) {
            return;
        }
        if (this.multiEnable) {
            if (item.isSelected()) {
                this.unselectItem(item);
            } else {
                this.selectItem(item);
            }
        } else {
            this.unselectAll();
            this.selectItem(item);
        }
    };
    thi$.showController = function(b, item) {
        if (!this.controller) {
            return;
        }
        if (b) {
            this.controller.setAttribute("itemUUID", item.uuid());
            this.controller.display(true);
            var vb = this.getBounds(), ib = item.getBounds(), s = this.controller.getPreferredSize(), vOffset = (ib.height - s.height) * .5, x = this.view.scrollLeft + (vb.clientWidth - s.width), y = this.view.scrollTop + (ib.absY - vb.absY + vb.MBP.borderTopWidth) + vOffset;
            this.controller.setBounds(x, y, s.width, s.height, 7);
        } else {
            this.controller.removeAttribute("itemUUID");
            this.controller.display(false);
        }
    };
    var _onHover = function(e) {
        if (typeof this.onHovering == "function") {
            this.onHovering();
        }
        var from = e.fromElement, to = e.toElement, fid = from ? from.uuid : "", tid = to ? to.uuid : "", fitem = this._local.cache[fid], titem = this._local.cache[tid];
        if (fitem && fitem.isHover()) {
            if (to && this.controller && this.controller.contains(to, true)) {
                return;
            }
            fitem.setHover(false);
            this.showController(false);
        }
        if (titem && !titem.isHover()) {
            titem.setHover(true);
            if (titem.hasController()) {
                this.showController(true, titem);
            }
        }
    };
    var _onItemClicked = function(e) {
        var src = e.srcElement, uuid = src ? src.uuid : "", item = this._local.cache[uuid];
        if (!item || !item.isEnabled()) {
            return;
        }
        if (this.multiByCheck) {
            if (!this.useMarkerToggle || src === item.marker) {
                _selectCheckableItem.call(this, item);
            }
        } else {
            _select.call(this, item, e.ctrlKey || false, e.shiftKey || false);
        }
        if (item) {
            this.fireEvent(new Event(CLASS.EVT_ITEMCLICKED, item, item));
            if (typeof this.onClicked == "function") {
                this.onClicked(item);
            }
        }
    };
    thi$.onItemEvent = function(e) {
        var type = e.getType();
        switch (type) {
          case ListItem.OP_REMOVE:
            this.remove(e.getItem());
            break;

          default:
            break;
        }
    };
    var _onController = function(e) {
        var uuid = this.controller.getAttribute("itemUUID"), item = this._local.cache[uuid], evt;
        switch (e.getType()) {
          case "click":
            evt = new Event("ClickController", {
                event: e,
                item: item
            }, this.controller);
            this.notifyPeer("js.swt.event.ControllerEvent", evt);
            break;

          case "mouseout":
            if (item && item.isHover()) {
                item.setHover(false);
                this.showController(false);
            }
            break;

          default:
            break;
        }
    };
    var _createController = function(def, Runtime) {
        var cDef = def.controller, clz, ctrl;
        if (cDef && cDef.classType) {
            ctrl = new (Class.forName(cDef.classType))(cDef, Runtime);
            ctrl.applyStyles({
                position: "absolute",
                display: "none"
            });
            ctrl.attachEvent("mouseout", 0, this, _onController);
            ctrl.attachEvent("click", 0, this, _onController);
            this.setController(ctrl);
        }
    };
    var _createContents = function() {
        var listView = this.listView = DOM.createElement("DIV");
        listView.style.cssText = "position:relative;top:0px;left:0px;" + "border:0px none;padding:0px;margin:0px;overflow:visible;" + "width:100%;height:100%;";
        DOM.appendTo(listView, this.view);
    };
    thi$._init = function(def, runtime) {
        if (typeof def !== "object") {
            return;
        }
        def = System.objectCopy(def, CLASS.DEFAULTDEF(), true, true);
        def.className = def.className || "jsvm_list";
        $super(this, def, runtime);
        this._isReady = false;
        this._isLayoutDirty = false;
        this._canBeSearched = true;
        this._local.cache = {};
        this._selectedItems = LinkedList.$decorate([]);
        this._items = LinkedList.$decorate([]);
        this.lazy = def.lazy === true;
        this.hauto = def.hauto === true;
        this.vauto = def.vauto === true;
        this.showTips = def.showTips !== false;
        this.distinct = def.distinct === true;
        this.multiEnable = def.multiEnable === true;
        this.multiByCheck = this.multiEnable && def.multiByCheck === true;
        this.useMarkerToggle = this.multiByCheck && def.useMarkerToggle === true;
        _createContents.call(this);
        if (def.itemDefs && def.itemDefs.length > 0) {
            _setItemsByDef.call(this, def.itemDefs, false, true);
        } else {
            if (def.itemModels && def.itemModels.length > 0) {
                _setItemsByModel.call(this, def.itemModels, false, true);
            } else {
                _setAck.call(this, "ACK_ADD");
            }
        }
        this.setSearchEnable(def.searchEnable);
        _createController.call(this, def, runtime);
        Event.attachEvent(this.listView, "mouseover", 0, this, _onHover);
        Event.attachEvent(this.listView, "mouseout", 0, this, _onHover);
        Event.attachEvent(this.listView, "click", 0, this, _onItemClicked);
        J$VM.MQ.register("js.swt.event.ListItemEvent", this, this.onItemEvent);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Component);

js.swt.List.EVT_READY = "Ready";

js.swt.List.EVT_ACK_ITEMSADDED = "ItemsAdded";

js.swt.List.EVT_ACK_ITEMSREMOVED = "ItemsRemoved";

js.swt.List.EVT_ITEMSELECTED = "ItemSelected";

js.swt.List.EVT_ITEMCLICKED = "ItemClicked";

js.swt.List.EVT_ITEMMOVED = "ItemMoved";

js.swt.List.DEFAULTDEF = function() {
    return {
        classTy: "js.swt.List",
        multiEnable: true,
        multiByCheck: false,
        distinct: false,
        lazy: false,
        hauto: false,
        vauto: false,
        itemModels: [],
        itemDefs: [],
        align_x: .5,
        align_y: 0,
        rigid_w: false,
        rigid_h: false
    };
};

js.swt.List.isIn = function(value, set) {
    var len = set ? set.length : 0;
    for (var i = 0; i < len; i++) {
        if (set[i] === value) {
            return true;
        }
    }
    return false;
};

js.swt.List.isSameModel = function(m1, m2) {
    if (!(m1 && m2)) {
        return false;
    }
    if (m1 === m2) {
        return true;
    }
    if (m1.value === m2.value && (m1.dname === m2.dname || m1.img === m2.img)) {
        return true;
    }
    return false;
};

js.swt.List.isModelIn = function(model, set) {
    var C = js.swt.List, len = set ? set.length : 0;
    for (var i = 0; i < len; i++) {
        if (C.isSameModel(model, set[i])) {
            return true;
        }
    }
    return false;
};

$package("js.swt");

$import("js.swt.List");

js.swt.DropdownList = function(def, Runtime) {
    var CLASS = js.swt.DropdownList, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System;
    var searchBoxDef = {
        classType: "js.awt.HBox",
        align_x: .5,
        align_y: 0,
        rigid_w: false,
        rigid_h: true,
        height: CLASS.DEFAULTSEARCHBOXHEIGHT,
        layout: {
            gap: 0,
            align_x: 1,
            align_y: .5
        },
        items: [ "btnStrategy", "inputBox", "btnClear" ],
        btnStrategy: {
            classType: "js.awt.Icon",
            image: "search.png",
            rigid_w: true,
            rigid_h: true,
            prefSize: {
                width: 11,
                height: 11
            },
            width: 11,
            height: 11
        },
        inputBox: {
            classType: "js.swt.TextField",
            rigid_w: false,
            rigid_h: false
        },
        btnClear: {
            classType: "js.awt.Icon",
            image: "clear.png",
            rigid_w: true,
            rigid_h: true,
            prefSize: {
                width: 11,
                height: 11
            },
            width: 11,
            height: 11
        }
    }, controlBarDef = {
        classType: "js.awt.HBox",
        align_x: .5,
        align_y: 1,
        rigid_w: false,
        rigid_h: true,
        height: CLASS.DEFAULTCONTROLBARHEIGHT,
        layout: {
            gap: 0,
            align_x: 1,
            align_y: .5
        },
        items: [ "label" ],
        label: {
            classType: "js.awt.Label",
            rigid_w: true,
            rigid_h: false
        }
    };
    thi$.setItems = function(items) {
        this.list.setItems(items);
    };
    thi$.addItems = function(items) {
        this.list.addItems(items);
    };
    thi$.setItemsByModel = function(models) {
        this.list.setItemsByModel(models);
    };
    thi$.addItemsByModel = function(models) {
        this.list.addItemsByModel(models);
    };
    thi$.setItemsByDef = function(defs) {
        this.list.setItemsByDef(defs);
    };
    thi$.addItemsByDef = function(defs) {
        this.list.addItemsByDef(defs);
    };
    thi$.removeItemsByDef = function(def) {
        var m = def ? def.model : undefined, tmp;
        if (m) {
            tmp = this.removeItemsByModel(m);
        }
        return tmp;
    };
    thi$.removeItemsByModel = function(model) {
        var items = this.findItemsByModel(model), tmp;
        if (items && items.length > 0) {
            if (this.def.multiEnable === true) {
                tmp = items;
            } else {
                tmp = [ items[0] ];
            }
            this.removeItems(tmp);
        }
        return tmp;
    };
    thi$.removeItems = function(items) {
        this.list.removeItems(items);
        return items;
    };
    thi$.getItems = function() {
        return this.list.getItems();
    };
    thi$.getItemModels = function() {
        return this.list.getItemModels();
    };
    thi$.getItemDefs = function() {
        return this.list.getItemDefs();
    };
    thi$.setSelectedValues = function(values, callback) {
        var list = this.list;
        list.setSelectedValues.apply(list, arguments);
    };
    thi$.setSelectedIndexes = function(indexes, callback) {
        var list = this.list;
        list.setSelectedIndexes.apply(list, arguments);
    };
    thi$.setSelectedItems = function(items, callback) {
        var list = this.list;
        list.setSelectedItems.apply(list, arguments);
    };
    thi$.unselectAll = function(callback) {
        var list = this.list;
        list.unselectAll.apply(list, arguments);
    };
    thi$.setSelectedByModel = function(model, callback) {
        var args = Array.prototype.slice.call(arguments, 1), items = this.findItemsByModel(model);
        args.unshift(items);
        this.setSelectedItems.apply(this, args);
    };
    thi$.getSelectedItems = function(isOrdered) {
        return this.list.getSelectedItems();
    };
    thi$.getSelectedModels = function(isOrdered) {
        return this.list.getSelectedModels(isOrdered);
    };
    thi$.getSelectedIndexes = function() {
        return this.list.getSelectedIndexes();
    };
    thi$.findModelByIndex = function(index) {
        var items = this.getItems();
        var len = items ? items.length : 0;
        if (isNaN(index) || len == 0 || index >= len) {
            return null;
        }
        return items[0] ? items[0].model : null;
    };
    thi$.findItemsByModel = function(model) {
        if (!model || typeof model !== "object") {
            return null;
        }
        return this.list.getItemsByModel(this.getItems(), model);
    };
    thi$.findItemsByDname = function(dname) {
        if (typeof dname !== "string") {
            return null;
        }
        return this.list.getItemsByDname(this.getItems(), dname);
    };
    thi$.findModelByDname = function(dname) {
        var items = this.findItemsByDname(dname);
        return items && items.length > 0 ? items[0].model : null;
    };
    thi$.findItemsByValue = function(value) {
        if (value == undefined || value == null) {
            return null;
        }
        return this.list.getItemsByValue(this.getItems(), value);
    };
    thi$.findModelByValue = function(value) {
        var items = this.findItemsByValue(value);
        return items && items.length > 0 ? items[0].model : null;
    };
    thi$.setSearchCritical = function(num) {
        num = parseInt(num);
        if (!isNaN(num) && num >= 1 && num <= 100) {
            this.searchCritical = num;
        } else {
            this.searchCritical = js.swt.DropdownList.SEARCHCRITICAL;
        }
    };
    thi$.getSearchCritical = function() {
        return this.searchCritical;
    };
    thi$.setMinimumSize = function(w, h) {
        this.def.miniSize = this.def.miniSize || {};
        var miniSize = this.def.miniSize, ow = miniSize.width, oh = miniSize.height, invalidate = false;
        if (!isNaN(w) && w !== ow) {
            invalidate = true;
            miniSize.width = w;
        }
        if (!isNaN(h) && h !== oh) {
            invalidate = true;
            miniSize.height = h;
        }
        if (invalidate) {
            this.invalidateLayout(false);
        }
    }.$override(this.setMinimumSize);
    var _calMiniHeight = function() {
        var box = this.getBounds(), mbp = box.MBP, gap = this.layout && this.layout.def ? this.layout.def.gap || 0 : 0, h = 18, d;
        if (this.searchBox && this.searchBox.isVisible()) {
            d = this.searchBox.getSize();
            h += d.height;
            h += gap;
        }
        if (this.controlBar && this.controlBar.isVisible()) {
            d = this.controlBar.getSize();
            h += d.height;
            h += gap;
        }
        h += mbp.BPW;
        return h;
    };
    thi$.getMinimumSize = function() {
        var minH = this.def.miniSize ? this.def.miniSize.height : undefined;
        if (isNaN(minH)) {
            minH = _calMiniHeight.call(this);
            this.setMinimumSize(undefined, minH);
        }
        return this.def.miniSize;
    }.$override(this.getMinimumSize);
    thi$.setMaximumSize = function(w, h) {
        this.def.maxiSize = this.def.maxiSize || {};
        var maxiSize = this.def.maxiSize, ow = maxiSize.width, oh = maxiSize.height, invalidate = false;
        if (!isNaN(w) && ow !== w) {
            invalidate = true;
            maxiSize.width = w;
        }
        if (!isNaN(h) && oh !== h) {
            invalidate = true;
            this.def.maxiSize.height = h;
        }
        if (invalidate) {
            this.invalidateLayout(false);
        }
    }.$override(this.setMinimumSize);
    thi$.getMaximumSize = function() {
        return this.def.maxiSize;
    }.$override(this.getMaximumSize);
    thi$.getPreferredSize = function() {
        var prefSize = this.def.prefSize, U = this._local;
        if (!prefSize) {
            if (U.optimalSize) {
                prefSize = U.optimalSize;
            } else {
                prefSize = $super(this);
            }
        }
        return prefSize;
    }.$override(this.getPreferredSize);
    var _setSearchEnable = function(b) {
        var v = b === true;
        if (this.searchEnable === v) {
            return;
        }
        this.searchEnable = v;
        if (this.searchBox) {
            this.searchBox.setVisible(v);
            this.searchBox.applyStyles({
                display: v ? "block" : "none"
            });
        }
        if (this.list) {
            this.list.setSearchEnable(v);
        }
    };
    var _layoutSearchBox = function() {
        var box = this.getBounds(), prefSize = this.list.getPreferredSize(), avaiH = box.innerHeight, show = false;
        if (this.controlBar && this.controlBar.isVisible()) {
            var d = this.controlBar.getSize();
            avaiH -= d.height;
        }
        if (this.searchBox && this.searchIfAllowed && this.list.canBeSearched()) {
            show = avaiH / prefSize.height * 100 <= this.searchCritical;
        }
        _setSearchEnable.call(this, show);
    };
    var _setOptimalSize = function(w, h) {
        if (this._local.optimalSize) {
            return;
        }
        var s = DOM.outerSize(this.view);
        this._local.optimalSize = {
            width: isNaN(w) ? s.width : w,
            height: isNaN(h) ? s.height : h
        };
    };
    var _getGap = function() {
        var gap = this._local.gap;
        if (!isNaN(gap)) {
            return gap;
        }
        gap = 0;
        if (this.layout && this.layout.def) {
            gap = this.layout.def.gap || 0;
        }
        this._local.gap = gap;
        return this._local.gap;
    };
    var _isSBoxVisible = function(ah) {
        var show = false, prefSize = this.list.getPreferredSize();
        if (this.searchBox && this.searchIfAllowed && this.list.canBeSearched()) {
            show = ah / prefSize.height * 100 <= this.searchCritical;
        }
        return show;
    };
    var _calLengthenDeltas = function(listW, listH) {
        var rtBounds = this._local.runtimeBounds, area = this._local.runtimeArea, deltas;
        if (!rtBounds || !area) {
            return deltas;
        }
        var st = CLASS.SCROLLBARTHINKNESS, prefSize = this.list.getPreferredSize(), maxiSize = this.getMaximumSize(), rx = rtBounds.x, ry = rtBounds.y, rw = rtBounds.width, rh = rtBounds.height, aw = area.width, ah = area.height, hGap = listW - prefSize.width, vGap = listH - prefSize.height, wDelta = hGap <= 0 ? st : st - hGap, hDelta = vGap <= 0 ? st : st - vGap, wAmple = false, hAmple = false, tmpW, tmpH;
        if (maxiSize) {
            tmpW = maxiSize.width;
            if (!isNaN(tmpW) && tmpW < aw) {
                aw = tmpW;
            }
            tmpH = maxiSize.height;
            if (!isNaN(tmpH) && tmpH < ah) {
                ah = tmpH;
            }
        }
        if (wDelta <= 0) {
            wDelta = 0;
            wAmple = true;
        }
        if (hDelta <= 0) {
            hDelta = 0;
            hAmple = true;
        }
        switch (area.AID) {
          case "A":
            tmpW = aw - rw;
            wDelta = Math.min(wDelta, tmpW);
            tmpH = ah - rh;
            hDelta = Math.min(hDelta, tmpH);
            break;

          case "D":
            tmpW = rx > 0 ? rx : 0;
            wDelta = 0 - Math.min(wDelta, tmpW);
            tmpH = ah - rh;
            hDelta = Math.min(hDelta, tmpH);
            break;

          case "B":
            tmpW = aw - rw;
            wDelta = Math.min(wDelta, tmpW);
            tmpH = ry > 0 ? ry : 0;
            hDelta = 0 - Math.min(hDelta, tmpH);
            break;

          case "C":
            tmpW = rx > 0 ? rx : 0;
            wDelta = 0 - Math.min(wDelta, tmpW);
            tmpH = ry > 0 ? ry : 0;
            hDelta = 0 - Math.min(hDelta, tmpH);
            break;
        }
        deltas = {
            wAmple: wAmple,
            wDelta: wDelta,
            maxWDelta: tmpW,
            hAmple: hAmple,
            hDelta: hDelta,
            maxHDelta: tmpH
        };
        return deltas;
    };
    var _preSize = function() {
        var matrix = this._local.matrix;
        if (matrix) {
            return matrix;
        }
        matrix = {};
        var box = this.getBounds(), mbp = box.MBP, houter = mbp.BPW, vouter = mbp.BPH, prefSize = this.list.getPreferredSize(), miniSize = this.getMinimumSize(), maxiSize = this.getMaximumSize(), gap = _getGap.call(this), w = box.width, h = box.height, vother = 0, show = false, d, minW, minH, maxW, maxH, rb, rw, rh;
        if (this.controlBar) {
            d = this.controlBar.getSize();
            vother += d.height;
            vother += gap;
        }
        w = this.hauto ? prefSize.width + houter : w;
        h = this.vauto ? prefSize.height + vouter + vother : h;
        if (miniSize) {
            minW = miniSize.width;
            minH = miniSize.height;
            w = !isNaN(minW) && minW > 0 ? Math.max(w, minW) : w;
            h = !isNaN(minH) && minH > 0 ? Math.max(h, minH) : h;
        }
        if (maxiSize) {
            maxW = maxiSize.width;
            maxH = maxiSize.height;
        }
        rb = this._local.runtimeBounds;
        if (rb) {
            rw = rb.width;
            rh = rb.height;
            maxW = !isNaN(maxW) ? Math.min(maxW, rw) : rw;
            maxH = !isNaN(maxH) ? Math.min(maxH, rh) : rh;
        }
        if (!isNaN(maxW) && maxW < w) {
            w = maxW;
        }
        if (!isNaN(maxH) && maxH < h) {
            h = maxH;
        }
        matrix.width = w;
        matrix.height = h;
        show = _isSBoxVisible.call(this, h - vouter - vother);
        matrix.isSBoxVisible = show;
        _setSearchEnable.call(this, show);
        vother = 0;
        if (this.searchBox && this.searchBox.isVisible()) {
            d = this.searchBox.getSize();
            vother += d.height;
            vother += gap;
        }
        if (this.controlBar && this.controlBar.isVisible()) {
            d = this.controlBar.getSize();
            vother += d.height;
            vother += gap;
        }
        matrix.listW = w - houter;
        matrix.listH = h - vouter - vother;
        this._local.matrix = matrix;
        return matrix;
    };
    var _rectifyListSize = function(s) {
        if (!s.wAdjusted && !s.hAdjusted) {
            return;
        }
        var ST = CLASS.SCROLLBARTHINKNESS, listBox = this.list.getBounds(), w = listBox.innerWidth, h = listBox.innerHeight, listView = this.list.listView, vBox = DOM.getBounds(listView), sw = listView.scrollWidth, sh = listView.scrollHeight;
        if (s.wAdjusted) {
            w -= ST;
        } else {
            w = undefined;
        }
        if (s.hAdjusted) {
            h -= ST;
        } else {
            h = undefined;
        }
        DOM.setSize(listView, w, h, vBox);
        if (J$VM.ie && J$VM.doctype.declared) {
            var lvStyle = this.list.view.style, overflow = this.list.getStyle("overflow");
            if (overflow === "auto") {
                lvStyle.overflow = "scroll";
                this.list.setSize(listBox.width, listBox.height);
                lvStyle.overflow = "auto";
            }
        }
    };
    var _layout = function() {
        if (!this._isLayoutDirty || !this.list.isReady() || !this.isDOMElement()) {
            return undefined;
        }
        this._isLayoutDirty = false;
        var ST = CLASS.SCROLLBARTHINKNESS, matrix = _preSize.call(this), prefSize = this.list.getPreferredSize(), listW = matrix.listW, listH = matrix.listH, w = matrix.width, h = matrix.height, deltas = _calLengthenDeltas.call(this, listW, listH), ample = false, delta = 0, maxDelta, deltaSize = {}, rb, rx, ry, x, y;
        if (deltas) {
            rb = this._local.runtimeBounds;
            rx = rb.x;
            ry = rb.y;
            if (this.hauto && listH < prefSize.height) {
                ample = deltas.wAmple;
                delta = deltas.wDelta;
                maxDelta = deltas.maxWDelta;
                if (!ample && maxDelta > 0) {
                    if (delta < 0) {
                        delta = Math.abs(delta);
                        x = rx - delta;
                    }
                    w += delta;
                    deltaSize.wDelta = delta;
                    deltaSize.wAdjusted = true;
                } else {
                    if (ample) {
                        deltaSize.wDelta = ST;
                        deltaSize.wAdjusted = true;
                    } else {}
                }
            }
            if (this.vauto && listW < prefSize.width) {
                ample = deltas.hAmple;
                delta = deltas.hDelta;
                maxDelta = deltas.maxHDelta;
                if (!ample && maxDelta > 0) {
                    if (delta < 0) {
                        delta = Math.abs(delta);
                        y = ry - delta;
                    }
                    h += delta;
                    deltaSize.hDelta = delta;
                    deltaSize.hAdjusted = true;
                } else {
                    if (ample) {
                        deltaSize.hDelta = ST;
                        deltaSize.hAdjusted = true;
                    } else {}
                }
            }
        }
        _setOptimalSize.call(this, w, h);
        this.setBounds(x, y, w, h);
        return deltaSize;
    };
    thi$.doLayout = function() {
        var s = _layout.call(this);
        if (s) {
            $super(this);
            _rectifyListSize.call(this, s);
        }
    }.$override(this.doLayout);
    thi$.beforeRemoveLayer = function(e) {
        this.notifyPeer("js.awt.event.LayerEvent", new Event("beforeRemoveLayer", e || "", this));
        this.list.showController(false);
        this.restore();
    }.$override(this.beforeRemoveLayer);
    thi$.afterRemoveLayer = function(e) {
        if (e && e.getType() === "resize") {
            this.invalidateLayout(false);
        }
        this.notifyPeer("js.awt.event.LayerEvent", new Event("afterRemoveLayer", e || "", this));
    }.$override(this.afterRemoveLayer);
    thi$.setCallback = function(bounds, area, nofly) {
        this._isLayoutDirty = true;
        this._local.matrix = undefined;
        this._local.runtimeBounds = bounds;
        this._local.runtimeArea = area;
        this.doLayout(true);
    }.$override(this.setCallback);
    var _reStyleSelected = function() {
        var list = this.list;
        if (!list || def.multiEnable === true) {
            return;
        }
        var sitems = list.getSelectedItems(), item = sitems ? sitems[0] : null;
        if (item && item.isHoverForSelected()) {
            item.setHover(true);
        }
    };
    var _rinseSelected = function() {
        var list = this.list;
        if (!list || def.multiEnable === true) {
            return;
        }
        var sitems = list.getSelectedItems(), item = sitems ? sitems[0] : null;
        if (item && item.isHoverForSelected()) {
            item.setHover(false);
        }
    };
    thi$.showAt = function(x, y, m) {
        if (this == this.rootLayer()) {
            this.hideOthers();
        }
        $super(this, x, y, false, m);
        _reStyleSelected.call(this);
    }.$override(this.showAt);
    thi$.showBy = function(by, m) {
        if (this == this.rootLayer()) {
            this.hideOthers();
        }
        $super(this, by, false, m);
        _reStyleSelected.call(this);
    }.$override(this.showBy);
    thi$.setPeerComponent = function(peer) {
        if (this.list) {
            this.list.setPeerComponent(peer);
        }
        $super(this);
    }.$override(this.setPeerComponent);
    thi$.destroy = function() {
        this.detachEvent("mousedown", 0, this, _onMouseDown);
        this.detachEvent("click", 0, this, _onClick);
        this.detachEvent(J$VM.firefox ? "DOMMouseScroll" : "mousewheel", 0, this, _onMouseScroll);
        if (this.searchBox) {
            this.searchBox.inputBox.detachEvent(js.swt.TextField.EVT_VALUECHANGED, 4, this, _onKeywordChanged);
            this.searchBox.btnClear.detachEvent("click", 0, this, _onBtnClearClicked);
            delete this.searchBox;
        }
        if (this.list) {
            var clz = js.swt.List;
            this.list.detachEvent(clz.EVT_READY, 4, this, _onListReady);
            this.list.detachEvent(clz.EVT_ACK_ITEMSADDED, 4, this, _onListItemsAdded);
            this.list.detachEvent(clz.EVT_ACK_ITEMSREMOVED, 4, this, _onLisItemsRemoved);
            this.list.detachEvent(clz.EVT_ITEMSELECTED, 4, this, _notifySelectChanged, "set");
            this.list.detachEvent(clz.EVT_ITEMCLICKED, 4, this, _notifySelectChanged, "click");
            delete this.list;
        }
        if (this.controlBar) {
            var label = this.controlBar.label;
            label.detachEvent("mouseover", 0, this, _onMouseOver);
            label.detachEvent("mouseout", 0, this, _onMouseOut);
            label.detachEvent("click", 0, this, _onSubmit);
            delete this.controlBar;
        }
        delete this._local.root;
        delete this._local.optimalSize;
        delete this._local.matrix;
        delete this._local.runtimeBounds;
        delete this._local.runtimeArea;
        $super(this);
    }.$override(this.destroy);
    thi$.quickSearch = function(keyword, options) {
        this.list.quickSearch(keyword, options);
    };
    thi$.restore = function() {
        if (!this.searchEnable) {
            return;
        }
        var inputBox = this.searchBox.inputBox;
        if (inputBox) {
            inputBox.setValue("");
        }
        this.list.restore();
    };
    var _search = function(e) {
        _search.$clearTimer();
        var keyword = this.searchBox.inputBox.getValue();
        this.quickSearch(keyword);
    };
    var _onKeywordChanged = function(e) {
        if (!this.searchEnable) {
            return;
        }
        _search.$clearTimer();
        _search.$delay(this, 200);
    };
    var _onBtnClearClicked = function(e) {
        this.searchBox.inputBox.setValue("");
        this.restore();
    };
    var _createSearchBox = function(def) {
        var r = this.Runtime(), searchBox, theDef = {
            className: DOM.combineClassName(def.className, "searchBox")
        };
        theDef = System.objectCopy(searchBoxDef, theDef, true);
        searchBox = this.searchBox = new (Class.forName("js.awt.HBox"))(theDef, r);
        searchBox.inputBox.attachEvent(js.swt.TextField.EVT_VALUECHANGED, 4, this, _onKeywordChanged);
        searchBox.btnClear.attachEvent("click", 0, this, _onBtnClearClicked);
        theDef = null;
        this.addComponent(searchBox);
    };
    var _notifySelectChanged = function(e, eType) {
        var data = {
            models: this.getSelectedModels(true),
            callbackInfo: e.getData()
        };
        this.notifyPeer("js.swt.event.SelectChangedEvent", new Event(eType, data, e.getEventTarget()));
    };
    var _onListReady = function(e) {
        this.fireEvent(e);
    };
    thi$.invalidateLayout = function(doLayout) {
        if (!this._isLayoutDirty) {
            var M = this.def, bounds = this.view.bounds, userW = bounds ? bounds.userW : undefined, userH = bounds ? bounds.userH : undefined, listView = this.list.view;
            if (!isNaN(userW) || !isNaN(userH)) {
                DOM.setSize(this.view, userW, userH, bounds);
            }
            listView.style.width = "auto";
            listView.style.height = "auto";
            delete M.width;
            delete M.height;
        }
        this._isLayoutDirty = true;
        this._local.matrix = undefined;
        this._local.optimalSize = undefined;
        this._local.runtimeBounds = undefined;
        this._local.runtimeArea = undefined;
        if (doLayout === true) {
            this.doLayout(true);
        }
    };
    var _onListItemsAdded = function(e) {
        this.invalidateLayout(true);
        this.fireEvent(e);
    };
    var _onLisItemsRemoved = function(e) {
        this.invalidateLayout(true);
        this.fireEvent(e);
    };
    var _createList = function(def) {
        var listDef = {
            className: DOM.combineClassName(def.className, "list"),
            itemClassName: def.itemClassName || DOM.combineClassName(def.className, "item"),
            searchOptions: def.searchOptions,
            hoverForSelected: Class.isBoolean(def.hoverForSelected) ? def.hoverForSelected : def.multiEnable !== true,
            multiEnable: def.multiEnable === true,
            multiByCheck: def.multiEnable === true,
            distinct: def.distinct === true,
            lazy: def.lazy,
            hauto: false,
            vauto: false,
            itemModels: def.itemModels,
            itemDefs: def.itemDefs,
            controller: def.controller,
            align_x: .5,
            align_y: 0,
            rigid_w: false,
            rigid_h: false
        };
        var clz = Class.forName("js.swt.List"), list = this.list = new clz(listDef, this.Runtime());
        list.repaint = function() {}.$override(list.repaint);
        list.onHovering = _rinseSelected.$bind(this);
        list.attachEvent(clz.EVT_READY, 4, this, _onListReady);
        list.attachEvent(clz.EVT_ACK_ITEMSADDED, 4, this, _onListItemsAdded);
        list.attachEvent(clz.EVT_ACK_ITEMSREMOVED, 4, this, _onLisItemsRemoved);
        list.attachEvent(clz.EVT_ITEMSELECTED, 4, this, _notifySelectChanged, "set");
        list.attachEvent(clz.EVT_ITEMCLICKED, 4, this, _notifySelectChanged, "click");
        this.addComponent(list);
    };
    var _onMouseOver = function(e) {
        this.controlBar.label.setHover(true);
    };
    var _onMouseOut = function(e) {
        this.controlBar.label.setHover(false);
    };
    var _onSubmit = function(e) {
        this.controlBar.label.setHover(false);
        this.fireEvent(new Event(CLASS.EVT_SUBMITVALUES, undefined, this));
    };
    var _createControlBar = function(def) {
        var r = this.Runtime(), controlBar, label, theDef = {
            className: DOM.combineClassName(def.className, "controlBar")
        };
        theDef = System.objectCopy(controlBarDef, theDef, true);
        theDef.label.text = r.nlsText("btnOK", "OK");
        controlBar = this.controlBar = new (Class.forName("js.awt.HBox"))(theDef, r);
        label = controlBar.label;
        label.attachEvent("mouseover", 0, this, _onMouseOver);
        label.attachEvent("mouseout", 0, this, _onMouseOut);
        label.attachEvent("click", 0, this, _onSubmit);
        theDef = null;
        this.addComponent(controlBar);
    };
    var _onMouseDown = function(e) {
        e.cancelBubble();
    };
    var _onClick = function(e) {
        if (this.isfloating) {
            e.cancelBubble();
        }
    };
    var _onMouseScroll = function(e) {
        if (this.isfloating) {
            e.cancelBubble();
        }
    };
    thi$._init = function(def, Runtime) {
        if (typeof def !== "object") {
            return;
        }
        def = System.objectCopy(def, CLASS.DEFAULTDEF(), true, true);
        def.className = def.className || "jsvm_ddList";
        $super(this, def, Runtime);
        this._isLayoutDirty = true;
        this._local.root = this;
        this.hauto = def.hauto === true;
        this.vauto = def.vauto === true;
        this.searchIfAllowed = def.searchIfAllowed === true;
        this.isfloating = def.isfloating === true;
        this.setSearchCritical(def.searchCritical);
        if (this.searchIfAllowed) {
            _createSearchBox.call(this, def);
        }
        _createList.call(this, def);
        if (def.multiEnable === true && def.showControlBar === true) {
            _createControlBar.call(this, def);
        }
        _setSearchEnable.call(this, false);
        this.attachEvent("mousedown", 0, this, _onMouseDown);
        this.attachEvent("click", 0, this, _onClick);
        this.attachEvent(J$VM.firefox ? "DOMMouseScroll" : "mousewheel", 0, this, _onMouseScroll);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.VBox);

js.swt.DropdownList.SEARCHCRITICAL = 80;

js.swt.DropdownList.DEFAULTSEARCHBOXWIDTH = 30;

js.swt.DropdownList.DEFAULTSEARCHBOXHEIGHT = 17;

js.swt.DropdownList.DEFAULTCONTROLBARHEIGHT = 16;

js.swt.DropdownList.SCROLLBARTHINKNESS = 17;

js.swt.DropdownList.DEFAULTITEMHEIGHT = 16;

js.swt.DropdownList.EVT_SUBMITVALUES = "SubmitValues";

js.swt.DropdownList.DEFAULTDEF = function() {
    return {
        classType: "js.swt.DropdownList",
        distinct: false,
        multiEnable: false,
        showControlBar: false,
        showItemTip: true,
        hauto: true,
        vauto: true,
        isfloating: true,
        PMFlag: 39,
        searchIfAllowed: false,
        searchCritical: 80,
        lazy: false,
        itemModels: [],
        itemDefs: [],
        layout: {
            gap: 5
        }
    };
};

$package("js.swt");

$import("js.awt.Item");

js.swt.ModelItem = function(def, Runtime) {
    var CLASS = js.swt.ModelItem, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ;
    thi$.destroy = function() {
        this.model = null;
        $super(this);
    }.$override(this.destroy);
    var _preDef = function(def, R) {
        var m = def.model, iconImage, sign, dname;
        if (!Class.isObject(m)) {
            return def;
        }
        iconImage = m.img || m.iconImage;
        if (iconImage) {
            def.iconImage = iconImage;
        }
        sign = m.sign;
        if (Class.isObject(sign)) {
            def.sign = sign;
        }
        dname = m.dname;
        if (Class.isValid(dname)) {
            if (def.useInput === true) {
                def.inputText = dname;
                def.labelText = null;
            } else {
                def.inputText = null;
                def.labelText = dname;
            }
        }
        def.checked = m.marked === true;
        if (!!def.showTips) {
            def.tip = def.displayTip || m.dname || m.value;
        }
        return def;
    };
    thi$._init = function(def, Runtime, view) {
        if (typeof def !== "object") {
            return;
        }
        def.classType = def.classType || "js.swt.ModelItem";
        def.className = def.className || "jsvm_item";
        def.strict = def.strict !== false;
        _preDef.apply(this, arguments);
        $super(this, def, Runtime, view);
        this.model = def.model;
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Item);

$package("js.swt");

$import("js.swt.ModelItem");

js.swt.ComboBox = function(def, Runtime) {
    var CLASS = js.swt.ComboBox, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, LList = js.util.LinkedList, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ, List = Class.forName("js.swt.List"), DDList = Class.forName("js.swt.DropdownList");
    var dItemContainerDef = {
        classType: "js.awt.HBox",
        rigid_w: false,
        rigid_h: false,
        layout: {
            gap: 0,
            align_x: .5,
            align_y: .5
        }
    }, btnDropDownDef = {
        classType: "js.awt.Button",
        iconImage: "dropdown_new.png",
        rigid_w: true,
        rigid_h: false,
        effect: false
    }, inputBoxDef = {
        classType: "js.swt.TextField",
        css: "border:0px none;",
        rigid_w: false,
        rigid_h: false,
        NUCG: true
    }, iptSps = [ "font-family", "font-size", "font-style", "font-weight", "text-decoration", "text-align", "font-weight", "color", "background-color" ], txtSps = [ "font-family", "font-size", "font-style", "font-weight", "text-decoration", "text-align", "font-weight", "color" ];
    thi$.useCipher = function(b) {
        var M = this.def, ditem, ipt;
        if (!this.cipherEnable) {
            return;
        }
        M.useCipher = !!b;
        ipt = this.displayItem ? this.displayItem.input : null;
        if (ipt) {
            ipt.type = M.useCipher ? "password" : "text";
        }
        ipt = this._inputView;
        if (ipt) {
            ipt.useCipher(M.useCipher);
        }
    };
    thi$.hasEffect = function() {
        return this.def.effect === true;
    };
    thi$.isWholeTrigger = function() {
        return this.def.wholeTrigger === true;
    };
    thi$.isShowBtnByHover = function() {
        return this.def.showBtnByHover === true;
    };
    thi$.setSubviewRoot = function(root) {
        if (this.subview && root) {
            this.subview.rootLayer(root);
        } else {
            this._local.subviewRoot = root;
        }
    };
    thi$.wipe = function() {
        var U = this._local, subview = this.subview;
        U.itemDefs = null;
        U.itemModels = null;
        U.selectedValues = null;
        _preSelect.call(this, true);
        if (subview) {
            _showSubview.call(this, false);
            subview.setItemsByModel([]);
        }
    };
    thi$.setItemsByModel = function(models) {
        this._local.itemDefs = undefined;
        this._local.itemModels = models;
        _preSelect.call(this);
        if (this.subview) {
            _showSubview.call(this, false);
            this.subview.setItemsByModel(models);
        }
    };
    thi$.addItemsByModel = function(models) {
        if (!Class.isArray(models) || models.length == 0) {
            return;
        }
        var ms = this._local.itemModels || [];
        this._local.itemModels = ms.concat(models);
        _preSelect.call(this);
        if (this.subview) {
            _showSubview.call(this, false);
            this.subview.addItemsByModel(models);
        }
    };
    thi$.setItemsByDef = function(defs) {
        this._local.itemModels = undefined;
        this._local.itemDefs = defs;
        _preSelect.call(this);
        if (this.subview) {
            _showSubview.call(this, false);
            this.subview.setItemsByDef(defs);
        }
    };
    thi$.addItemsByDef = function(defs) {
        if (!Class.isArray(defs) || defs.length == 0) {
            return;
        }
        var ds = this._local.itemModels || [];
        this._local.itemDefs = ds.concat(defs);
        _preSelect.call(this);
        if (this.subview) {
            _showSubview.call(this, false);
            this.subview.addItemsByDef(defs);
        }
    };
    thi$.getItems = function() {
        return this.subview ? this.subview.getItems() : undefined;
    };
    thi$.getItemModels = function() {
        var ms = this._local.itemModels;
        if (!ms && this.subview) {
            ms = this.subview.getItemModels();
        }
        return ms;
    };
    thi$.getItemDefs = function() {
        var ds = this._local.itemDefs;
        if (!ds && this.subview) {
            ds = this.subview.getItemDefs();
        }
        return ds;
    };
    thi$.getSelectedValues = function() {
        return this._local.selectedValues;
    };
    var _getSelectedIndexes = function() {
        var ds = this._local.itemDefs, ms = this._local.itemModels, useDs = false, set;
        if (Class.isArray(ds) && ds.length > 0) {
            useDs = true;
            set = ds;
        } else {
            if (Class.isArray(ms) && ms.length > 0) {
                useDs = false;
                set = ms;
            }
        }
        var len = set ? set.length : 0, indexes = LList.$decorate([]), m;
        for (var i = 0; i < len; i++) {
            m = set[i];
            m = useDs ? m.model : m;
            if (m && m.marked === true && !List.isIn(i, indexes)) {
                indexes.addLast(i);
            }
        }
        return indexes;
    };
    thi$.getSelectedIndexes = function() {
        return this.subview ? this.subview.getSelectedIndexes() : _getSelectedIndexes.call(this);
    };
    thi$.getSelectedModel = function() {
        return this.displayItem.model;
    };
    var _unMarkAll = function() {
        var ds = this._local.itemDefs, ms = this._local.itemModels, useDs = false, set;
        if (Class.isArray(ds) && ds.length > 0) {
            useDs = true;
            set = ds;
        } else {
            if (Class.isArray(ms) && ms.length > 0) {
                useDs = false;
                set = ms;
            }
        }
        var len = set ? set.length : 0, m;
        for (var i = 0; i < len; i++) {
            m = useDs ? set[i].model : set[i];
            if (m) {
                m.marked = false;
            }
        }
    };
    thi$.findItemModels = function(by, values, findAll, distinct) {
        if (!Class.isString(by) || by.length == 0 || !Class.isArray(values) || values.length == 0) {
            return undefined;
        }
        var ds = this._local.itemDefs, ms = this._local.itemModels, useDs = false, set;
        if (Class.isArray(ds) && ds.length > 0) {
            useDs = true;
            set = ds;
        } else {
            if (Class.isArray(ms) && ms.length > 0) {
                useDs = false;
                set = ms;
            } else {
                return undefined;
            }
        }
        var len = set ? set.length : 0, rst = [], m, v;
        for (var i = 0; i < len; i++) {
            m = useDs ? set[i].model : set[i];
            v = m[by];
            if (List.isIn(v, values)) {
                if (findAll !== true) {
                    rst.push(m);
                    break;
                }
                if (!distinct || !List.isModelIn(m, rst)) {
                    rst.push(m);
                }
            }
        }
        return rst;
    };
    thi$.setSelectedValues = function(values, callback) {
        _quitEdit.call(this);
        if (!values || values.length == 0) {
            this.unselectAll(callback);
            return;
        }
        if (this.subview) {
            var cInfo = {
                values: values,
                notify: callback
            };
            this.subview.setSelectedValues(values, true, cInfo);
        } else {
            _unMarkAll.call(this);
            var models, model;
            if (!this.multiEnable) {
                var v = values[0];
                values = [ v ];
                models = this.findItemModels("value", values, false);
                model = models && models.length > 0 ? models[0] : undefined;
                if (!Class.isObject(model)) {
                    model = {
                        dname: v,
                        value: v
                    };
                } else {
                    model.marked = true;
                }
            } else {
                models = this.findItemModels("value", values, true, false);
                var len = models ? models.length : 0, dnames = LList.$decorate([]), m, dn;
                for (var i = 0; i < len; i++) {
                    m = models[i];
                    m.marked = true;
                    dn = m.dname;
                    if (dn !== undefined && dn !== null && !dnames.contains(dn)) {
                        dnames.addLast(dn);
                    }
                }
                if (dnames.length > 0) {
                    var dname = _joinTexts.call(this, dnames);
                    model = {
                        dname: dname,
                        value: values
                    };
                } else {
                    model = CLASS.DEFAULTMODEL;
                }
            }
            if (Class.isObject(model)) {
                _select.call(this, model);
            }
            _setSelectedValues.call(this, values);
            if (callback === true) {
                this.onSelectedChanged();
            }
        }
    };
    thi$.findItemModelsByIndex = function(indexes, distinct) {
        if (!Class.isArray(indexes) || indexes.length == 0) {
            return undefined;
        }
        var ds = this._local.itemDefs, ms = this._local.itemModels, useDs = false;
        if (Class.isArray(ds) && ds.length > 0) {
            useDs = true;
        } else {
            if (Class.isArray(ms) && ms.length > 0) {
                useDs = false;
            } else {
                return undefined;
            }
        }
        indexes = indexes.sort(function(a, b) {
            return a - b;
        });
        var len = indexes.length, idx, m, rst = [];
        for (var i = 0; i < len; i++) {
            idx = indexes[i];
            m = useDs ? ds[idx].model : ms[idx];
            if (m && (!distinct || !List.isModelIn(m, rst))) {
                rst.push(m);
            }
        }
        return rst;
    };
    thi$.setSelectedIndexes = function(indexes, callback) {
        _quitEdit.call(this);
        if (!indexes || indexes.length == 0) {
            this.unselectAll(callback);
            return;
        }
        if (this.subview) {
            var cInfo = {
                indexes: indexes,
                notify: callback
            };
            this.subview.setSelectedIndexes(indexes, true, cInfo);
        } else {
            _unMarkAll.call(this);
            var ms, m, dnames, values, dname;
            if (!this.multiEnable) {
                indexes = [ indexes[0] ];
                ms = this.findItemModelsByIndex(indexes);
                m = ms && ms.length ? ms[0] : undefined;
                if (m) {
                    m.marked = true;
                    values = [ m.value ];
                } else {
                    m = CLASS.DEFAULTMODEL;
                }
            } else {
                dnames = LList.$decorate([]);
                values = LList.$decorate([]);
                ms = this.findItemModelsByIndex(indexes);
                var len = ms ? ms.length : 0, i, d, v;
                for (i = 0; i < len; i++) {
                    m = ms[i];
                    m.marked = true;
                    d = m.dname;
                    v = m.value;
                    if (d !== undefined && d !== null && !dnames.contains(d)) {
                        dnames.addLast(d);
                    }
                    if (!values.contains(v)) {
                        values.push(v);
                    }
                }
                if (dnames.length > 0) {
                    dname = _joinTexts.call(this, dnames);
                    m = {
                        dname: dname,
                        value: values
                    };
                } else {
                    m = CLASS.DEFAULTMODEL;
                }
            }
            _select.call(this, m);
            _setSelectedValues.call(this, values);
            if (callback === true) {
                this.onSelectedChanged();
            }
        }
    };
    var _isSelectedChanged = function(model) {
        var latestModel = this._local.latestModel;
        if (!(latestModel && model)) {
            return true;
        }
        if (latestModel === model) {
            return false;
        }
        if (typeof latestModel.value != typeof model.value || model.value != latestModel.value) {
            return true;
        }
        if (model.dname != latestModel.dname) {
            return true;
        }
        if (model.img != latestModel.img) {
            return true;
        }
        return false;
    };
    var _filterItemsByModel = function(model) {
        var ds = this._local.itemDefs, ms = this._local.itemModels, set, useDef = false;
        if (Class.isArray(ds) && ds.length > 0) {
            set = ds;
            useDef = true;
        } else {
            if (Class.isArray(ms) && ms.length > 0) {
                set = ms;
                useDef = false;
            } else {
                return undefined;
            }
        }
        var indexes = [], len = set.length, m;
        for (var i = 0; i < len; i++) {
            m = useDef ? set[i].model : set[i];
            if (List.isSameModel(m, model)) {
                if (!this.multiEnable && indexes.length == 0) {
                    m.marked = true;
                    indexes.push(i);
                } else {
                    if (this.multiEnable) {
                        m.marked = true;
                        if (!List.isIn(i, indexes)) {
                            indexes.push(i);
                        }
                    } else {
                        m.marked = false;
                    }
                }
            } else {
                m.marked = false;
            }
        }
        return indexes;
    };
    thi$.unselectAll = function(callback) {
        if (this.subview) {
            var cInfo = {
                notify: callback
            };
            this.subview.unselectAll(true, cInfo);
        } else {
            _unMarkAll.call(this);
            _select.call(this, {
                dname: "",
                value: []
            });
            _setSelectedValues.call(this, []);
            if (callback === true) {
                this.onSelectedChanged();
            }
        }
    };
    thi$.setSelectedByModel = function(model, callback) {
        if (!model || typeof model !== "object") {
            return;
        }
        _quitEdit.call(this);
        var indexes = _filterItemsByModel.call(this, model) || [];
        if (indexes.length == 0) {
            if (this.subview) {
                this.subview.unselectAll(false);
            } else {
                _unMarkAll.call(this);
            }
        } else {
            if (this.subview) {
                this.subview.setSelectedIndexes(indexes, false);
            }
        }
        _select.call(this, model);
        _setSelectedValues.call(this, [ model.value ]);
        if (callback === true) {
            this.onSelectedChanged();
        }
    };
    thi$.msgType = function(msgType) {
        var U = this._local;
        if (Class.isString(msgType) && msgType.length > 0) {
            U.msgType = msgType;
        }
        return U.msgType || "js.swt.event.SelectedChanged";
    };
    thi$.setMsgType = function(msgType) {
        this.msgType(msgType);
    };
    thi$.getMsgType = function() {
        return this.msgType();
    };
    thi$.onSelectedChanged = function(target, eType) {
        var msgType = this.msgType(), values = this.getSelectedValues(), eData = {
            comboID: this.id,
            values: values
        }, evt = new Event(eType || "Selected", eData, target || this);
        this.notifyPeer(msgType, evt);
    };
    thi$.setSearchCritical = function(num) {
        if (Class.isNumber(num)) {
            this._local.searchCritical = num;
            var subview = this.subview;
            if (subview) {
                subview.setSearchCritical(num);
            }
        }
    };
    thi$.isSearchEnable = function() {
        return this.subview ? this.subview.searchEnable : false;
    };
    thi$.setEditable = function(b) {
        b = b === true;
        if (this.editable === b) {
            return;
        }
        this.editable = this.def.editable = b;
        var ditem = this.displayItem;
        if (ditem) {
            if (b) {
                ditem.attachEvent("click", 0, this, _onEdit);
            } else {
                ditem.detachEvent("click", 0, this, _onEdit);
            }
        }
    };
    thi$.onMoved = function() {
        $super(this);
        var subview = this.subview;
        if (subview) {
            subview.invalidateLayout(false);
        }
    }.$override(this.onMoved);
    thi$.onResized = function(fire) {
        $super(this);
        var subview = this.subview;
        if (subview) {
            subview.invalidateLayout(false);
        }
    }.$override(this.onResized);
    var _onController = function(e) {
        this.notifyPeer("js.swt.event.ControllerEvent", e);
    };
    thi$.onStateChanged = function(e) {
        $super(this);
        var btn = this.btnDropDown, state = this.getState();
        if (state !== 16 && btn && btn.isVisible()) {
            btn.setState(state);
        }
    }.$override(this.onStateChanged);
    thi$.repaint = function() {
        if ($super(this)) {
            if (this.isShowBtnByHover()) {
                this.showBtnDropDown(false);
            }
            return true;
        }
        return false;
    }.$override(this.repaint);
    thi$.getPreferredSize = function() {
        var prefSize = this.def.prefSize, D;
        if (!prefSize) {
            D = this.getBounds();
            prefSize = {
                width: D.width,
                height: D.height
            };
        }
        return prefSize;
    }.$override(this.getPreferredSize);
    thi$.destroy = function() {
        this._local.itemDefs = null;
        this._local.itemModels = null;
        this._local.selectedValues = null;
        if (this.displayItem) {
            delete this.displayItem;
        }
        var M = this.def, subview = this.subview;
        if (this._eventAttached) {
            if (M.wholeTrigger === true) {
                this.detachEvent("click", 0, this, _onDropDown);
            } else {
                this.btnDropDown.detachEvent("click", 0, this, _onDropDown);
            }
            if (M.effect === true || M.showBtnByHover === true) {
                this.detachEvent("mouseover", 0, this, _onMouseOver);
                this.detachEvent("mouseout", 0, this, _onMouseOut);
            }
            MQ.cancel("js.swt.event.SelectChangedEvent", this, this.selectedChanged);
            MQ.cancel("js.swt.event.ControllerEvent", this, _onController);
            MQ.cancel("js.awt.event.LayerEvent", this, _onLayerRemoved);
        }
        if (subview) {
            _showSubview.call(this, false);
            subview.setPMFlag(0);
            subview.detachEvent(List.EVT_READY, 4, this, _onListEvent);
            subview.detachEvent(List.EVT_ACK_ITEMSADDED, 4, this, _onListEvent);
            subview.detachEvent(List.EVT_ACK_ITEMSREMOVED, 4, this, _onListEvent);
            subview.detachEvent(DDList.EVT_SUBMITVALUES, 4, this, _onListSubmit);
            delete this.subview;
            subview.destroy();
        }
        $super(this);
    }.$override(this.destroy);
    thi$.setDisplayItemStyles = function(styles) {
        if (typeof styles !== "object") {
            return;
        }
        this._latestStyles = styles;
        if (this.displayItem) {
            this.displayItem.applyStyles(styles);
        }
    };
    thi$.setErrSign = function(b, errStyles) {
        var ditem = this.displayItem, dview, U = this._local, oStyles = this._latestStyles, sp, styles, isCached;
        if (ditem) {
            dview = ditem.view;
        } else {
            dview = this.dItemContainer.view;
        }
        if (b) {
            U.errStyles = null;
            if (typeof errStyles === "object") {
                styles = U.errStyles = {};
                if (!oStyles) {
                    oStyles = this._latestStyles = {};
                }
                for (sp in errStyles) {
                    isCached = false;
                    if (oStyles.hasOwnProperty(sp)) {
                        isCached = true;
                        styles[sp] = oStyles[sp];
                        oStyles[sp] = errStyles[sp];
                    } else {
                        sp = DOM.camelName(sp);
                        if (oStyles.hasOwnProperty(sp)) {
                            isCached = true;
                            styles[sp] = oStyles[sp];
                            oStyles[sp] = errStyles[sp];
                        }
                    }
                    if (!isCached) {
                        styles[sp] = DOM.getStyle(dview, sp);
                        oStyles[sp] = errStyles[sp];
                    }
                }
                this.setDisplayItemStyles(oStyles);
            }
        } else {
            styles = U.errStyles;
            delete U.errStyles;
            if (typeof styles === "object") {
                if (!oStyles) {
                    oStyles = this._latestStyles = {};
                }
                for (sp in styles) {
                    if (oStyles.hasOwnProperty(sp)) {
                        oStyles[sp] = styles[sp];
                    } else {
                        sp = DOM.camelName(sp);
                        oStyles[sp] = styles[sp];
                    }
                }
                this.setDisplayItemStyles(oStyles);
            }
        }
    };
    thi$.doEdit = function() {
        var dContainer = this.dItemContainer, iptView = this._inputView, curV = iptView.getValue();
        iptView.detachEvent(js.swt.TextField.EVT_SUBMIT, 4, this, this.doEdit);
        delete this._inputView;
        dContainer.removeComponent(iptView);
        iptView.destroy();
        _setInputValue.call(this, curV);
    };
    var _setInputValue = function(curV) {
        var changed = true, models, model, values, findInList = false;
        if (Class.isString(this._latestValue) && this._latestValue === curV) {
            changed = false;
        }
        if (!changed) {
            _select.call(this, this._local.latestModel);
            return;
        }
        if (!this.multiEnable) {
            models = this.findItemModels("dname", [ curV ]);
            model = models && models.length > 0 ? models[0] : undefined;
            if (!model) {
                model = {
                    dname: curV,
                    value: curV
                };
            } else {
                findInList = true;
            }
            values = [ model.value ];
        } else {
            values = _splitText.call(this, curV);
            model = {
                dname: curV,
                value: values
            };
        }
        if (!findInList && typeof this.rectifyInput == "function") {
            model = this.rectifyInput(model);
            if (!this.multiEnable) {
                values = [ model.value ];
            }
        }
        _select.call(this, model);
        _setSelectedValues.call(this, values);
        var subview = this.subview;
        if (subview) {
            subview.setSelectedValues(values, false);
        }
        this.onSelectedChanged();
    };
    var _preIptStyles = function(styles) {
        var latestStyles = this._latestStyles, len, sp, v;
        if (!latestStyles) {
            return styles || {};
        }
        len = Class.isArray(iptSps) ? iptSps.length : 0;
        for (var i = 0; i < len; i++) {
            sp = iptSps[i];
            v = latestStyles[sp];
            if (v != undefined && v != null) {
                styles[sp] = v;
            }
        }
        return styles;
    };
    thi$.getEditContents = function(m) {
        return Class.isObject(m) ? m.dname || "" : "";
    };
    var _onEdit = function(e) {
        e.cancelBubble();
        if (this.isShowBtnByHover()) {
            this.showBtnDropDown(false);
        }
        _showSubview.call(this, false);
        var Clz = Class.forName("js.swt.TextField"), dContainer = this.dItemContainer, ditem = this.displayItem, M = this.def, iptStyles, txtStyles, iptDef, input, m, v;
        m = this._local.latestModel = ditem.model;
        iptStyles = ditem.getStyles(iptSps);
        if (ditem.label) {
            txtStyles = DOM.getStyles(ditem.label, txtSps);
        } else {
            txtStyles = ditem.getStyles(txtSps);
        }
        _removeDisplayItem.call(this);
        iptStyles = _preIptStyles.call(this, iptStyles);
        iptStyles = DOM.toCssText(iptStyles);
        txtStyles = _preIptStyles.call(this, txtStyles);
        txtStyles = DOM.toCssText(txtStyles);
        iptDef = {
            width: this._latestWidth,
            height: this._latestHeight
        };
        iptDef = System.objectCopy(inputBoxDef, iptDef, true);
        iptDef.className = DOM.combineClassName(M.className, "iptView");
        iptDef.css = (iptDef.css || "") + iptStyles;
        iptDef.fontCss = txtStyles;
        if (this.cipherEnable) {
            iptDef.useCipher = this.def.useCipher;
        }
        iptDef.multiline = M.multiline;
        iptDef.autoSelect = this.autoSelect;
        input = this._inputView = new Clz(iptDef, this.Runtime());
        v = this._latestValue = this.getEditContents(m);
        input.setValue(v);
        dContainer.addComponent(input);
        dContainer.doLayout(true);
        input.attachEvent(Clz.EVT_SUBMIT, 4, this, this.doEdit);
        input.focus();
    };
    var _removeDisplayItem = function() {
        var dContainer = this.dItemContainer, ditem = this.displayItem;
        if (ditem) {
            this._latestWidth = ditem.getWidth();
            this._latestHeight = ditem.getHeight();
            if (this.editable) {
                ditem.detachEvent("click", 0, this, _onEdit);
            }
            dContainer.removeComponent(ditem);
            ditem.destroy();
        }
        delete this.displayItem;
    };
    thi$.getDItemDef = function(m) {
        var M = this.def, dItemDef = M.dItemDef, b = M.showTips !== false, tdef = {
            classType: "js.swt.ModelItem",
            className: DOM.combineClassName(M.className, "dItem"),
            stateless: true,
            showTips: b,
            useInput: this.useInput,
            rigid_w: false,
            rigid_h: false,
            layout: {
                align_x: 0,
                align_y: .5
            }
        };
        if (Class.isObject(dItemDef)) {
            tdef = System.objectCopy(dItemDef, tdef, true);
        }
        if (tdef.useInput) {
            tdef.useCipher = this.cipherEnable && M.useCipher === true;
            tdef.readOnly = M.iptReadOnly;
            tdef.autoSelect = this.autoSelect;
        }
        tdef.model = m;
        return tdef;
    };
    var _createDisplayItem = function(model) {
        var R = this.Runtime(), M = this.def, dItemDef = this.getDItemDef(model), displayItem, b, tip;
        if (typeof this._latestStyles === "object") {
            dItemDef.css = DOM.toCssText(this._latestStyles);
        }
        displayItem = this.displayItem = new (Class.forName(dItemDef.classType))(dItemDef, R), 
        b = M.showTips !== false;
        tip = M.displayTip;
        if (b && typeof tip === "string") {
            displayItem.setToolTipText(tip);
        }
        if (this.editable) {
            displayItem.attachEvent("click", 0, this, _onEdit);
        } else {
            if (this.useInput) {
                var self$ = this;
                displayItem.onSubmit = function(e) {
                    $super(this);
                    var m = this.model || {}, curV = this.getText();
                    if (curV === m.value) {
                        return;
                    }
                    _setInputValue.call(self$, curV);
                }.$override(displayItem.onSubmit);
            }
        }
        this.dItemContainer.addComponent(displayItem);
        if (displayItem.isDOMElement() && (!isNaN(this._latestWidth) && this._latestWidth > 0 || !isNaN(this._latestHeight) && this._latestHeight > 0)) {
            displayItem.setSize(this._latestWidth, this._latestHeight, 3);
        }
    };
    thi$.rectifyModel = function(m) {
        return m;
    };
    var _setSelected = function(model) {
        if (!model) {
            return;
        }
        _removeDisplayItem.call(this);
        var m = System.objectCopy(model, {});
        m = this.rectifyModel(m);
        _createDisplayItem.call(this, m);
    };
    var _wrapText = function(text, startSymbol, endSymbol) {
        if (typeof text !== "string") {
            return null;
        }
        var buf = new js.lang.StringBuffer(), symbol;
        if (typeof startSymbol === "string") {
            symbol = startSymbol;
            buf.append(startSymbol);
        }
        buf.append(text);
        if (typeof endSymbol === "string") {
            symbol = endSymbol;
        }
        if (typeof symbol === "string") {
            buf.append(symbol);
        }
        return buf.toString();
    };
    var _joinTexts = function(texts) {
        if (!texts || texts.length == 0) {
            return "";
        }
        var buf = new js.lang.StringBuffer(), text;
        for (var i = 0, len = texts.length; i < len; i++) {
            if (i > 0) {
                buf.append(",");
            }
            text = texts[i];
            text = _wrapText.call(this, text, '"');
            buf.append(text);
        }
        return buf.toString();
    };
    var _splitText = function(text) {
        if (typeof text !== "string") {
            return null;
        }
        var regExp = /("[^"]+")/g, matches = text.match(regExp);
        if (!matches || matches.length == 0) {
            return null;
        }
        var len = matches.length, segs = [], seg;
        for (var i = 0; i < len; i++) {
            seg = matches[i];
            seg = seg.replace(/"/g, "");
            segs[i] = seg;
        }
        return segs;
    };
    var _setSelectedValues = function(values) {
        values = Class.isArray(values) ? values : [];
        this._local.selectedValues = LList.$decorate(values);
    };
    var _select = function(model) {
        this._local.latestModel = model;
        _setSelected.call(this, model);
    };
    thi$.showSubview = function(b) {
        var rst = false;
        if (b === true) {
            rst = true;
            if (this.subview) {
                if (this.subview.isShown()) {
                    this.subview.hide("hide", {
                        ignore: true
                    });
                    this._local.expectedOp = 1;
                    this.setHover(false);
                }
                _showSubview.call(this, true);
            } else {
                _onDropDown.call(this);
            }
        } else {
            if (this.subview) {
                _showSubview.call(this, false);
            }
        }
        return rst;
    };
    var _showSubview = function(b) {
        if (!this.subview) {
            return;
        }
        this._local.expectedOp = b ? 0 : 1;
        var isShown = this.subview.isShown();
        if (isShown == b) {
            return;
        }
        if (b) {
            if (this.isShowBtnByHover()) {
                this.showBtnDropDown(true);
            }
            var w = DOM.outerWidth(this.view, true);
            this.subview.setMinimumSize(w);
            this.subview.showBy(this.view);
        } else {
            this.subview.hide();
        }
    };
    thi$.showBtnDropDown = function(b) {
        var btn = this.btnDropDown;
        if (btn.isVisible() === b || b && this._inputView) {
            return;
        }
        btn.setVisible(b);
        btn.display(b);
        if (this.isDOMElement()) {
            this.doLayout(true);
        }
    };
    var _onDropDown = function(e) {
        if (this._inputView) {
            this.doEdit();
        }
        this._local.latestModel = this.displayItem ? this.displayItem.model : null;
        var M = this.def;
        if (!this.subview) {
            _createSubview.call(this, M);
            var tmp = this._local.subviewRoot;
            if (tmp) {
                this.subview.rootLayer(tmp);
                delete this._local.subviewRoot;
            }
        }
        var show = this._local.expectedOp == 0 ? false : true;
        _showSubview.call(this, show);
    };
    var _onMouseOver = function(e) {
        var ele = e.fromElement;
        if (ele && this.contains(ele, true)) {
            return;
        }
        if (this.subview && this.subview.isShown()) {
            return;
        }
        if (this.isShowBtnByHover()) {
            this.showBtnDropDown(true);
        }
        if (this.hasEffect()) {
            this.setHover(true);
        }
    };
    var _onMouseOut = function(e) {
        var ele = e.toElement;
        if (ele && this.contains(ele, true)) {
            return;
        }
        if (this.subview && this.subview.isShown()) {
            return;
        }
        if (this.hasEffect()) {
            this.setHover(false);
        }
        if (this.isShowBtnByHover()) {
            this.showBtnDropDown(false);
        }
    };
    var _buildSelectedModel = function(cInfo) {
        var m;
        if (cInfo && cInfo.values) {
            var set = cInfo.values, dname, v;
            if (set.length > 0) {
                if (this.multiEnable) {
                    dname = _joinTexts.call(this, set);
                    v = set;
                } else {
                    dname = v = set[0];
                }
                m = {
                    dname: dname,
                    value: v
                };
            }
        } else {}
        return m || {
            dname: "",
            value: "",
            isDefault: true
        };
    };
    thi$.extractSelectedModel = function(event) {
        var data = event.getData(), models = data.models, cInfo = data.callbackInfo, len = models ? models.length : 0, selectedModel;
        if (len == 0) {
            selectedModel = _buildSelectedModel.call(this, cInfo);
        } else {
            if (this.multiEnable) {
                var dnames = LList.$decorate([]), values = LList.$decorate([]), m, dname, v;
                for (var i = 0; i < len; i++) {
                    m = models[i];
                    dname = m.dname;
                    v = m.value;
                    if (dname !== undefined && dname !== null && !dnames.contains(dname)) {
                        dnames.addLast(dname);
                    }
                    if (v !== undefined && v !== null && !values.contains(v)) {
                        values.push(v);
                    }
                }
                dname = _joinTexts.call(this, dnames);
                selectedModel = {
                    dname: dname,
                    value: values
                };
            } else {
                selectedModel = models[0];
            }
        }
        return selectedModel;
    };
    thi$.selectedChanged = function(event) {
        var data = event.getData(), cInfo = data.callbackInfo, m = this.extractSelectedModel(event), vs;
        if (!m.value && m.isDefault === true) {
            vs = [];
        } else {
            vs = this.multiEnable ? m.value : [ m.value ];
        }
        this._local.selectedValues = LList.$decorate(vs);
        _select.call(this, m);
        if (!this.multiEnable) {
            _showSubview.call(this, false);
        }
        if (event.getType() === "click" || cInfo && cInfo.notify === true) {
            this.onSelectedChanged(event.getEventTarget(), "ItemMarked");
        }
    };
    thi$.activeEdit = function(force) {
        if (force === true || this.editable) {
            _onEdit.call(this, new Event("activeEdit"));
        }
    };
    var _onListEvent = function(e) {
        this.fireEvent(e);
    };
    var _onListSubmit = function() {
        _showSubview.call(this, false);
    };
    var _createSubview = function(def) {
        var theDef = def.subview, ds = this._local.itemDefs, ms = this._local.itemModels;
        if (Class.isArray(ds) && ds.length > 0) {
            theDef.itemDefs = ds;
        } else {
            if (Class.isArray(ms) && ms.length > 0) {
                theDef.itemModels = ms;
            }
        }
        var subview = this.subview = new DDList(theDef, this.Runtime());
        subview.setPeerComponent(this);
        subview.setAdjustPosToFit(false);
        subview.attachEvent(List.EVT_READY, 4, this, _onListEvent);
        subview.attachEvent(List.EVT_ACK_ITEMSADDED, 4, this, _onListEvent);
        subview.attachEvent(List.EVT_ACK_ITEMSREMOVED, 4, this, _onListEvent);
        subview.attachEvent(DDList.EVT_SUBMITVALUES, 4, this, _onListSubmit);
    };
    var _onLayerRemoved = function(e) {
        var type = e.getType(), evt = e.getData(), eType = evt ? evt instanceof js.util.Event ? evt.getType() : evt.type : undefined, el = evt ? evt.srcElement : undefined, trigger = this.def.wholeTrigger === true ? this : this.btnDropDown;
        this.notifyPeer("js.awt.event.LayerEvent", e);
        if (type == "afterRemoveLayer") {
            if (eType == "hide" && evt && evt.ignore === true) {
                return;
            }
            if (eType == "hide" || eType == "message" || el && !trigger.contains(el, true)) {
                this._local.expectedOp = 1;
                this.setHover(false);
                if (this.isShowBtnByHover()) {
                    this.showBtnDropDown(false);
                }
            }
        }
    };
    var _quitEdit = function() {
        var iptView = this._inputView;
        if (!this.editable || !iptView) {
            return;
        }
        iptView.detachEvent(js.swt.TextField.EVT_SUBMIT, 4, this, this.doEdit);
        this.dItemContainer.removeComponent(iptView);
        iptView.destroy();
        delete this._inputView;
        _select.call(this, this._local.latestModel);
    };
    var _preSelect = function(useDefault) {
        var ds = this._local.itemDefs, ms = this._local.itemModels, useDs = false, set;
        if (Class.isArray(ds) && ds.length > 0) {
            useDs = true;
            set = ds;
        } else {
            if (Class.isArray(ms) && ms.length > 0) {
                useDs = false;
                set = ms;
            }
        }
        var len = set ? set.length : 0, dnames = [], values = LList.$decorate([]), tmp, m;
        for (var i = 0; i < len; i++) {
            tmp = set[i];
            tmp = useDs ? tmp.model : tmp;
            if (tmp && tmp.marked === true) {
                if (!this.multiEnable) {
                    m = tmp;
                    values.push(m.value);
                    break;
                }
                dnames.push(tmp.dname);
                if (!values.contains(tmp.value)) {
                    values.push(tmp.value);
                }
            }
        }
        if (this.multiEnable && dnames.length > 0) {
            var dname = _joinTexts.call(this, dnames);
            m = {
                dname: dname,
                value: values
            };
        }
        _quitEdit.call(this);
        if (!Class.isObject(m) && useDefault === true) {
            m = CLASS.DEFAULTMODEL;
            values = [];
        }
        if (Class.isObject(m)) {
            _select.call(this, m);
            _setSelectedValues.call(this, values);
        }
    };
    var _preInit = function(def) {
        if (def && def.subview) {
            this._local = this._local || {};
            this._local.subviewRoot = def.subview.root;
            delete def.subview.root;
        }
        def = System.objectCopy(def, CLASS.DEFAULTDEF(), true, true);
        def.layout = def.layout || {
            gap: 0,
            align_x: 0,
            align_y: .5
        };
        def.items = [ "dItemContainer", "btnDropDown" ];
        var tmp = {
            className: DOM.combineClassName(def.className, "dItemContainer")
        };
        def.dItemContainer = System.objectCopy(dItemContainerDef, tmp, true);
        tmp = {
            className: DOM.combineClassName(def.className, "dropdown")
        };
        def.btnDropDown = System.objectCopy(btnDropDownDef, tmp, true);
        return def;
    };
    thi$._init = function(def, Runtime) {
        if (typeof def !== "object") {
            return;
        }
        def = _preInit.call(this, def);
        $super(this, def, Runtime);
        this._local.expectedOp = 1;
        this._local.msgType = "js.swt.event.SelectedChanged";
        this.autoSelect = def.autoSelect !== false;
        this.cipherEnable = def.cipherEnable === true;
        this.useInput = this.cipherEnable || def.useInput === true;
        this.editable = !this.useInput && def.editable === true;
        this.multiEnable = def.subview.multiEnable === true;
        this.setDisplayItemStyles(def.displayItemStyles);
        var ds = def.subview.itemDefs, ms = def.subview.itemModels;
        if (Class.isArray(ds) && ds.length > 0) {
            this._local.itemDefs = ds;
        } else {
            if (Class.isArray(ms) && ms.length > 0) {
                this._local.itemModels = ms;
            }
        }
        _preSelect.call(this, true);
        if (def.initDDList === true) {
            _createSubview.call(this, def);
        }
        var M = this.def;
        if (M.wholeTrigger === true) {
            this.attachEvent("click", 0, this, _onDropDown);
        } else {
            this.btnDropDown.attachEvent("click", 0, this, _onDropDown);
        }
        if (M.effect === true || M.showBtnByHover === true) {
            this.attachEvent("mouseover", 0, this, _onMouseOver);
            this.attachEvent("mouseout", 0, this, _onMouseOut);
        }
        MQ.register("js.swt.event.SelectChangedEvent", this, this.selectedChanged);
        MQ.register("js.swt.event.ControllerEvent", this, _onController);
        MQ.register("js.awt.event.LayerEvent", this, _onLayerRemoved);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.HBox);

js.swt.ComboBox.DEFAULTMODEL = {
    dname: "",
    value: ""
};

js.swt.ComboBox.DEFAULTDEF = function() {
    return {
        classType: "js.swt.ComboBox",
        className: "jsvm_comboBox",
        wholeTrigger: false,
        editable: false,
        multiline: false,
        effect: false,
        showTips: true,
        displayTip: undefined,
        initDDList: false,
        displayItemStyles: undefined,
        subview: {
            multiEnable: false,
            distinct: false,
            showItemTip: true,
            hauto: true,
            vauto: false,
            searchIfAllowed: false,
            lazy: false,
            itemModels: [],
            itemDefs: []
        }
    };
};

$package("js.swt");

js.swt.ScrollPane = function(def, Runtime) {
    var CLASS = js.swt.ScrollPane, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ;
    thi$.isHScroll = function() {
        return this.def.layout.axis == 0;
    };
    thi$.isAutostretch = function() {
        return this.def.autostretch === true;
    };
    thi$.setStretchRange = function(min, max) {
        var M = this.def, r = M.stretchRange = M.stretchRange || {};
        if (Class.isNumber(min)) {
            r.min = min;
        }
        if (Class.isNumber(max)) {
            r.max = max;
        }
    };
    thi$.getStretchRange = function() {
        return this.def.stretchRange;
    };
    var _addComp = function(comp, notify, fireLayout) {
        this.cache[comp.uuid()] = comp;
        if (typeof comp.hoverCtrl == "function") {
            comp.hoverCtrl(false);
        }
        if (notify !== false) {
            this.notifyPeer("js.awt.event.ItemEvent", new Event("add", "", comp));
        }
        if (fireLayout === true) {
            this.fireEvent(new Event(CLASS.SCROLLPANEEVENT, {
                type: "add"
            }));
        }
        return comp;
    };
    thi$.spotIndex = function() {
        return 11;
    };
    thi$.insertComponent = function(index, comp, constraints, notify, fireLayout) {
        comp.setMoveTarget(this);
        comp = $super(this, index, comp, constraints);
        return _addComp.call(this, comp, notify, fireLayout);
    }.$override(this.insertComponent);
    thi$.removeComponent = function(comp, notify, fireLayout) {
        if (!comp) {
            return;
        }
        if (this.cache) {
            delete this.cache[comp.uuid()];
        }
        if (notify !== false) {
            this.notifyPeer("js.awt.event.ItemEvent", new Event("remove", "", comp));
        }
        var items = this.items(), index = items.indexOf(comp.id);
        comp = $super(this, comp);
        items = this.items();
        index = index >= items.length ? items.length - 1 : index;
        if (index >= 0) {
            comp = this[items[index]];
            this.activateComponent(comp);
        }
        if (fireLayout === true) {
            this.fireEvent(new Event(CLASS.SCROLLPANEEVENT, {
                type: "remove"
            }));
        }
    }.$override(this.removeComponent);
    thi$.activeComponent = function(comp) {
        if (!comp) {
            return;
        }
        var items = this.items0(), id;
        for (var i = 0, len = items.length; i < len; i++) {
            id = items[i];
            if (this[id] == comp) {
                this[id].setTriggered(true);
                this._local.active = comp;
                this.notifyPeer("js.awt.event.ItemEvent", new Event("active", "", comp));
            } else {
                this[id].setTriggered(false);
            }
        }
    }.$override(this.activeComponent);
    thi$.scrollNext = function() {
        var U = this._local, el = this.view, p, v;
        if (this.isHScroll()) {
            p = el.scrollLeft + U.itemMeasure;
            v = el.scrollWidth;
            p = p > v ? v : p;
            el.scrollLeft = p;
        } else {
            p = el.scrollTop + U.itemMeasure;
            v = el.scrollHeight;
            p = p > v ? v : p;
            el.scrollTop = p;
        }
    };
    thi$.scrollPrevious = function() {
        var U = this._local, el = this.view, p;
        if (this.isHScroll()) {
            p = el.scrollLeft - U.itemMeasure;
            p = p < 0 ? 0 : p;
            el.scrollLeft = p;
        } else {
            p = el.scrollTop - U.itemMeasure;
            p = p < 0 ? 0 : p;
            el.scrollTop = p;
        }
    };
    thi$.scrollFirst = function() {
        if (this.isHScroll()) {
            this.view.scrollLeft = 0;
        } else {
            this.view.scrollTop = 0;
        }
    };
    thi$.scrollLast = function() {
        var view = this.view;
        if (this.isHScroll()) {
            view.scrollLeft = view.scrollWidth;
        } else {
            view.scrollTop = view.scrollHeight;
        }
    };
    thi$.isMoverSpot = function(el, x, y) {
        var uuid = el.uuid, item = this.cache[uuid];
        if (item && item.isMoverSpot(el, x, y)) {
            this.activateComponent.$delay(this, 1, item);
            return true;
        }
        return false;
    };
    thi$.getMoveObject = function(e) {
        var R = this.Runtime(), M = this.def, moveObj = this.moveObj, item, absXY, def;
        if (!moveObj) {
            item = this.cache[e.srcElement.uuid];
            absXY = DOM.absXY(item.view);
            def = System.objectCopy(item.def, {}, true);
            if (M.moveObjClz) {
                def.classType = M.moveObjClz;
            }
            moveObj = this.moveObj = new (Class.forName(def.classType))(def, R, item.cloneView());
            moveObj.setMovingPeer(this);
            moveObj.appendTo(document.body);
            moveObj.setPosition(absXY.x, absXY.y);
        }
        return moveObj;
    };
    thi$.getGap = function() {
        var def = this.layout.def, gap;
        if (this.isHScroll()) {
            gap = def.hgap || 0;
        } else {
            gap = def.vgap || 0;
        }
        return gap;
    };
    var _getIdealMeasure = function() {
        var items = this.items0(), n = items.length, measure;
        if (n == 0) {
            return measure;
        }
        var bounds = this.getBounds(), MBP = bounds.MBP, maxSize = this.getMaximumSize(), range = this.getStretchRange(), min = range.min, max = range.max, gap = this.getGap(), ameasure;
        if (this.isHScroll()) {
            ameasure = maxSize.width;
            if (!Class.isNumber(ameasure)) {
                return measure;
            }
            ameasure = ameasure - gap * (n - 1) - MBP.BPW;
            measure = Math.floor(ameasure / n);
        } else {
            ameasure = maxSize.height;
            if (!Class.isNumber(ameasure)) {
                return measure;
            }
            ameasure = ameasure - gap * (n - 1) - MBP.BPH;
            measure = Math.floor(ameasure / n);
        }
        if (Class.isNumber(min) && measure >= min && Class.isNumber(max) && measure <= max) {} else {
            if (Class.isNumber(max) && measure > max) {
                measure = max;
            } else {
                if (Class.isNumber(min) && measure < min) {
                    measure = min;
                } else {
                    measure = undefined;
                }
            }
        }
        return measure;
    };
    var _stretch = function() {
        if (!this.isAutostretch()) {
            return;
        }
        var items = this.items0(), n = items.length, measure = _getIdealMeasure.call(this), isHScroll = this.isHScroll(), bounds = this.getBounds(), rigid, w, h, comp, d;
        if (!Class.isNumber(measure)) {
            return;
        }
        if (isHScroll) {
            w = measure;
        } else {
            h = measure;
        }
        for (var i = 0; i < n; i++) {
            comp = this[items[i]];
            if (!comp.isVisible()) {
                continue;
            }
            d = comp.getPreferredSize();
            if (isHScroll) {
                rigid = comp.isRigidHeight();
                h = rigid ? d.height : bounds.innerHeight;
            } else {
                rigid = comp.isRigidWidth();
                w = rigid ? d.width : bounds.innerWidth;
            }
            comp.setPreferredSize(w, h);
        }
    };
    var _getVisibleCount = function() {
        var items = this.items0(), n = items.length, vCnt = 0, comp;
        for (var i = 0; i < n; i++) {
            comp = this[items[i]];
            if (!comp.isVisible()) {
                continue;
            }
            ++vCnt;
        }
        return vCnt;
    };
    var _getIdealSize = function() {
        var D = this.getBounds(), gap = this.getGap(), vCnt = _getVisibleCount.call(this), measure = _getIdealMeasure.call(this), idealSize;
        if (Class.isNumber(measure)) {
            idealSize = {};
            if (this.isHScroll()) {
                idealSize.width = measure * vCnt + gap * (vCnt - 1) + D.MBP.BPW;
                idealSize.height = D.height;
            } else {
                idealSize.width = D.width;
                idealSize.height = measure * vCnt + gap * (vCnt - 1) + D.MBP.BPH;
            }
        }
        return idealSize;
    };
    var _getIdealSize$ = function() {
        var items = this.items0(), n = items.length, D = this.getBounds(), gap = this.getGap(), isH = this.isHScroll(), vCnt = 0, comp, rigid, s, w = 0, h = 0;
        for (var i = 0; i < n; i++) {
            comp = this[items[i]];
            if (!comp.isVisible()) {
                continue;
            }
            s = comp.getPreferredSize();
            if (isH) {
                w += s.width;
            } else {
                h += s.height;
            }
            ++vCnt;
        }
        if (isH) {
            w += gap * (vCnt - 1) + D.MBP.BPW;
            h = D.height;
        } else {
            w = D.width;
            h += gap * (vCnt - 1) + D.MBP.BPH;
        }
        return {
            width: w,
            height: h
        };
    };
    thi$.getIdealSize = function() {
        var items = this.items0(), n = items.length, idealSize;
        if (n > 0) {
            if (this.isAutostretch()) {
                idealSize = _getIdealSize.call(this);
            }
            if (!idealSize) {
                idealSize = _getIdealSize$.call(this);
            }
        }
        if (!idealSize) {
            idealSize = this.getPreferredSize();
        }
        return idealSize;
    };
    thi$.getPreferredSize = function() {
        var cnt = _getVisibleCount.call(this);
        if (cnt == 0) {
            return $super(this);
        }
        var size = this.getIdealSize(), max = this.getMaximumSize(), prefSize;
        if (this.isHScroll()) {
            this._local.itemMeasure = size.width / cnt;
            prefSize = {
                width: Math.min(size.width, max.width),
                height: size.height
            };
        } else {
            this._local.itemMeasure = size.height / cnt;
            prefSize = {
                width: size.width,
                height: Math.min(size.height, max.height)
            };
        }
        return prefSize;
    }.$override(this.getPreferredSize);
    thi$.doLayout = function(force) {
        if (this.isDOMElement() && this.needLayout(force)) {
            _stretch.call(this);
        }
        return $super(this);
    }.$override(this.doLayout);
    var _onclick = function(e) {
        var el = e.srcElement, uuid = el.uuid, item = this.cache[uuid], eType, evt;
        if (item) {
            eType = e.getType();
            if (eType == "click") {
                e.setEventTarget(item);
                evt = new Event(el === item.ctrl ? "ctrlclick" : "itemclick", "", item);
                this.notifyPeer("js.awt.event.ItemEvent", evt);
            } else {
                if (eType == "dblclick") {
                    e.cancelBubble();
                    if (item.isEditable && item.isEditable()) {
                        item.editLabel();
                    }
                }
            }
        }
        return e.cancelDefault();
    };
    var _onitemtextchange = function(e) {
        var item = e.getEventTarget(), d;
        item.def.prefSize = undefined;
        this.doLayout(true);
        if (e.getType() == "edit") {
            this.notifyPeer("js.awt.event.ItemEvent", new Event("textchanged", "", item));
        }
    };
    var _onmouseover = function(e) {
        var hoverOnCtrl = this.def.hoverOnCtrl !== false, from = e.fromElement, to = e.toElement, fid = from ? from.uuid : undefined, tid = to ? to.uuid : undefined, fitem, titem, cache = this.cache;
        if (fid !== tid) {
            fitem = cache[fid];
            titem = cache[tid];
            if (fitem && fitem.isHover()) {
                fitem.setHover(false);
                if (typeof fitem.hoverCtrl == "function") {
                    fitem.hoverCtrl(false);
                }
            }
            if (titem && !titem.isHover()) {
                titem.setHover(true, e);
                if ((!hoverOnCtrl || to == titem.ctrl) && typeof titem.hoverCtrl == "function") {
                    titem.hoverCtrl(true);
                }
            }
        } else {
            titem = cache[tid];
            if (titem && titem.isHover() && typeof titem.hoverCtrl == "function") {
                if (!hoverOnCtrl || to == titem.ctrl) {
                    titem.hoverCtrl(true);
                } else {
                    titem.hoverCtrl(false);
                }
            }
        }
    };
    thi$.acceptInsert = function(item, xy) {
        var mvId = item.id, items = this.items0(), insert, tmp;
        for (var i = 0, len = items.length; i < len; i++) {
            tmp = this[items[i]];
            if (tmp.id == mvId) {
                continue;
            }
            if (tmp.inside(xy.x, xy.y)) {
                tmp.setActivated(true);
                insert = items.indexOf(tmp.id);
            } else {
                tmp.setActivated(false);
            }
        }
        return insert;
    };
    thi$.showIndicator = function(b, insert) {};
    var _ondrag = function(e) {
        var eType = e.getType(), moveObj = e.getEventTarget(), xy = e.eventXY(), mvId = moveObj.id, item = this[mvId], items = this.items0(), p0 = items.indexOf(mvId), view = this.view, p1, insert, changed = false;
        switch (eType) {
          case "mousemove":
            p1 = this.acceptInsert(item, xy);
            this._local.insert = Class.isNumber(p1) ? p1 : p0;
            this.showIndicator(true, this._local.insert);
            break;

          case "mouseup":
            p1 = this._local.insert;
            insert = this[items[p1]];
            if (p0 > p1) {
                items.remove0(p0);
                items.add(p1, mvId);
                view.removeChild(item.view);
                view.insertBefore(item.view, insert.view);
                changed = true;
            } else {
                if (p0 < p1) {
                    items.add(p1 + 1, mvId);
                    items.remove0(p0);
                    view.removeChild(item.view);
                    view.insertBefore(item.view, insert.view.nextSibling);
                    changed = true;
                }
            }
            if (changed) {
                this.def.items = System.arrayCopy(items, 0, js.util.LinkedList.$decorate([]), 0, items.length);
                this.doLayout(true);
                this.notifyPeer("js.awt.event.ItemEvent", new Event("orderchanged", "", this));
            }
            if (insert) {
                insert.setActivated(false);
            }
            this.showIndicator(false);
            delete this._local.insert;
            break;
        }
    };
    thi$.destroy = function() {
        delete this.cache;
        delete this._local.insert;
        this.detachEvent("mouseover", 0, this, _onmouseover);
        this.detachEvent("mouseout", 0, this, _onmouseover);
        this.detachEvent("click", 0, this, _onclick);
        this.detachEvent("dblclick", 0, this, _onclick);
        MQ.cancel("js.awt.event.ItemTextEvent", this, _onitemtextchange);
        if (this.isMovable()) {
            MQ.cancel("js.awt.event.MovingEvent", this, _ondrag);
        }
        $super(this);
    }.$override(this.destroy);
    thi$._init = function(def, Runtime) {
        if (typeof def !== "object") {
            return;
        }
        var newDef = System.objectCopy(def, CLASS.DEFAULTDEF(), true, true), hscroll = newDef.layout.axis == 0, mover, M;
        newDef.classType = newDef.classType || "js.swt.ScrollPane";
        newDef.className = newDef.className || (hscroll ? "jsvm_hscroll" : "jsvm_vscroll");
        newDef.moveObjClz = newDef.moveObjClz || "js.awt.Item";
        mover = newDef.mover = newDef.mover || {};
        mover.longpress = mover.longpress || 10;
        mover.freedom = Class.isNumber(mover.freedom) ? mover.freedom : hscroll ? 1 : 2;
        $super(this, newDef, Runtime);
        this.cache = {};
        this.attachEvent("mouseover", 0, this, _onmouseover);
        this.attachEvent("mouseout", 0, this, _onmouseover);
        this.attachEvent("click", 0, this, _onclick);
        this.attachEvent("dblclick", 0, this, _onclick);
        MQ.register("js.awt.event.ItemTextEvent", this, _onitemtextchange);
        if (this.isMovable()) {
            MQ.register("js.awt.event.MovingEvent", this, _ondrag);
        }
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Container);

js.swt.ScrollPane.SCROLLPANEEVENT = "js.awt.event.ScrollPaneEvent";

js.swt.ScrollPane.DEFAULTDEF = function() {
    return {
        classType: "js.swt.ScrollPane",
        layout: {
            classType: "js.awt.FlowLayout",
            hgap: 0,
            vgap: 0,
            axis: 0,
            align_x: 0,
            align_y: 0
        },
        rigid_w: false,
        rigid_h: false,
        movable: true
    };
};

$package("js.swt");

js.swt.SComponent = function(def, Runtime) {
    var CLASS = js.swt.SComponent, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    CLASS.WHEELSTEP = 53;
    var Class = js.lang.Class, Event = js.util.Event, System = J$VM.System, DOM = J$VM.DOM, MQ = J$VM.MQ;
    thi$.isXScrollable = function() {
        return this.def.scroll_x !== false;
    };
    thi$.isYScrollable = function() {
        return this.def.scroll_y !== false;
    };
    var _onMousewheel = function(e) {
        var hScrollbar = this.hScrollbar, vScrollbar = this.vScrollbar, domE = e._event, deltaX = domE.deltaX, deltaY = domE.deltaY, cview = this.vcomp.view;
        if (!Class.isNumber(deltaY)) {
            if (Class.isNumber(domE.wheelDelta) && domE.wheelDelta != 0) {
                deltaY = domE.wheelDelta < 0 ? CLASS.WHEELSTEP : 0 - CLASS.WHEELSTEP;
            } else {
                if (Class.isNumber(domE.detail) && domE.detail != 0) {
                    deltaY = domE.detail > 0 ? CLASS.WHEELSTEP : 0 - CLASS.WHEELSTEP;
                }
            }
        }
        if (hScrollbar && Class.isNumber(deltaX) && deltaX != 0) {
            hScrollbar.view.scrollLeft += deltaX;
            cview.scrollLeft += deltaX;
        }
        if (vScrollbar && Class.isNumber(deltaY) && deltaY != 0) {
            vScrollbar.view.scrollTop += deltaY;
            cview.scrollTop += deltaY;
        }
    };
    thi$.setVComponent = function(comp) {
        if (!comp) {
            return;
        }
        var vcomp = this.vcomp;
        this.vcomp = null;
        if (vcomp) {
            vcomp.detachEvent(Event.W3C_EVT_MOUSE_WHEEL, 0, this, _onMousewheel);
            vcomp.destroy();
        }
        comp.view.style.position = "absolute";
        if (J$VM.mobile) {
            comp.view.style.overflow = "auto";
        } else {
            comp.view.style.overflow = "hidden";
        }
        comp.attachEvent(Event.W3C_EVT_MOUSE_WHEEL, 0, this, _onMousewheel);
        this.vcomp = comp;
        comp.setContextID(this.uuid());
        comp.appendTo(this.view);
    };
    thi$.getVComponent = function() {
        return this.vcomp;
    };
    thi$.getScrollSize = function() {
        var vcomp = this.vcomp, bx = this.isXScrollable(), by = this.isYScrollable(), ele, styleW, styleH, s, D;
        if (vcomp && vcomp.isVisible()) {
            if (Class.isFunction(vcomp.getScrollSize)) {
                s = vcomp.getScrollSize(bx, by);
            } else {
                ele = vcomp.view;
                if (bx) {
                    styleW = ele.style.width;
                    ele.style.width = "auto";
                }
                if (by) {
                    styleH = ele.style.height;
                    ele.style.height = "auto";
                }
                D = vcomp.getBounds();
                s = {
                    width: -1,
                    height: -1
                };
                if (bx) {
                    s.width = D.scrollWidth + D.MBP.BPW;
                    ele.style.width = styleW;
                }
                if (by) {
                    s.height = D.scrollHeight + D.MBP.BPH;
                    ele.style.height = styleH;
                }
            }
        }
        System.log.println("ScrollSize for comp#" + this.className + " is " + JSON.stringify(s || {}));
        return s || {
            width: -1,
            height: -1
        };
    };
    thi$.checkScrollbars = function(w, h) {
        var hbw = J$VM.supports.preHScrollEleH, vbw = J$VM.supports.preVScrollEleW, rst = {
            v: false,
            h: false,
            vbw: vbw,
            hbw: hbw
        }, vcomp = this.vcomp, s, tw, th, box;
        if (!Class.isNumber(w) || !Class.isNumber(h)) {
            box = this.getBounds();
            w = Class.isNumber(w) ? w : box.innerWidth;
            h = Class.isNumber(h) ? h : box.innerHeight;
        }
        if (vcomp && vcomp.isVisible()) {
            s = rst.scrollSize = this.getScrollSize();
            tw = rst.tw = s.width;
            th = rst.th = s.height;
            if (tw > w && th > h) {
                rst.v = true;
                rst.h = true;
            } else {
                if (th > h) {
                    rst.v = true;
                    if (tw > w - vbw) {
                        rst.h = true;
                    }
                } else {
                    if (tw > w) {
                        rst.h = true;
                        if (th > h - hbw) {
                            rst.v = true;
                        }
                    }
                }
            }
        }
        return rst;
    };
    thi$.repaint = function() {
        if ($super(this)) {
            var vcomp = this.vcomp;
            if (vcomp) {
                vcomp.repaint();
            }
            return true;
        }
        return false;
    }.$override(this.repaint);
    thi$.adjustScrollbars = function() {
        var bounds = this.getBounds(), MBP = bounds.MBP, w = bounds.innerWidth, h = bounds.innerHeight, x = MBP.paddingLeft, y = MBP.paddingTop, cview = this.vcomp ? this.vcomp.view : null, hScroll = this.isXScrollable(), vScroll = this.isYScrollable(), comp, rst, b;
        rst = this.checkScrollbars(w, h);
        vScroll = vScroll && rst.v;
        hScroll = hScroll && rst.h;
        if (this.vScrollbar && vScroll) {
            w -= rst.vbw;
        }
        if (this.hScrollbar && hScroll) {
            h -= rst.hbw;
        }
        comp = this.vScrollbar;
        if (comp) {
            comp.display(vScroll);
            if (vScroll) {
                comp.setBounds(x + w, y, rst.vbw, h);
                comp.setDataSize({
                    w: 1,
                    h: rst.th
                }, {
                    w: 1,
                    h: h
                });
            } else {
                if (cview) {
                    cview.scrollTop = 0;
                }
            }
        }
        comp = this.hScrollbar;
        if (comp) {
            comp.display(hScroll);
            if (hScroll) {
                comp.setBounds(x, y + h, w, rst.hbw);
                comp.setDataSize({
                    w: rst.tw,
                    h: 1
                }, {
                    w: w,
                    h: 1
                });
            } else {
                if (cview) {
                    cview.scrollLeft = 0;
                }
            }
        }
        comp = this.blankBar;
        if (comp) {
            b = hScroll && vScroll;
            comp.display(b);
            if (b) {
                comp.setBounds(x + w, y + h, rst.vbw, rst.hbw);
            }
        }
        comp = this.vcomp;
        if (comp && comp.isVisible()) {
            comp.setBounds(x, y, w, h, 4);
        }
        this._rstScrollbars = rst;
        return rst;
    };
    thi$.doLayout = function() {
        if ($super(this)) {
            if (this.isXScrollable() || this.isYScrollable()) {
                this.adjustScrollbars();
            } else {
                var bounds = this.getBounds(), MBP = bounds.MBP;
                this.vcomp.setBounds(MBP.paddingLeft, MBP.paddingTop, bounds.innerWidth, bounds.innerHeight, 4);
            }
            return true;
        }
        return false;
    }.$override(this.doLayout);
    thi$.onchildrenchanged = function(e) {
        if (this.isXScrollable() || this.isYScrollable()) {
            _delayLayout.$clearTimer();
            _delayLayout.$delay(this, 500);
        }
    };
    var _delayLayout = function() {
        var rst = this._rstScrollbars || {}, os = rst.scrollSize, s = this.getScrollSize();
        if (os && s && os.width === s.width && os.height === s.height) {
            return;
        }
        this.doLayout(true);
    };
    thi$.elementFromPoint = function(x, y, nothese) {
        return this.vcomp.elementFromPoint(x, y, nothese);
    };
    thi$.destroy = function() {
        var comp = this.vcomp;
        this.vcomp = null;
        if (comp) {
            comp.detachEvent(Event.W3C_EVT_MOUSE_WHEEL, 0, this, _onMousewheel);
            comp.destroy();
        }
        comp = this.hScrollbar;
        this.hScrollbar = null;
        if (comp) {
            comp.destroy();
        }
        comp = this.vScrollbar;
        this.vScrollbar = null;
        if (comp) {
            comp.destroy();
        }
        comp = this.blankBar;
        this.blankBar = null;
        if (comp) {
            comp.destroy();
        }
        comp = null;
        $super(this);
    }.$override(this.destroy);
    thi$.onHScroll = function(e) {
        var data = e.getData(), vcomp = this.vcomp;
        if (vcomp && vcomp.isVisible()) {
            vcomp.view.scrollLeft = data.scrollLeft;
        }
    };
    thi$.onVScroll = function(e) {
        var data = e.getData(), vcomp = this.vcomp;
        if (vcomp && vcomp.isVisible()) {
            vcomp.view.scrollTop = data.scrollTop;
        }
    };
    var _initScrollbars = function(def) {
        var R = this.Runtime(), bx = this.isXScrollable(), by = this.isYScrollable(), sdef, comp;
        if (by) {
            sdef = {
                classType: "js.awt.Scrollbar",
                css: "position:absolute;background:#FFFFFF;",
                axis: 1
            }, comp = this.vScrollbar = new js.awt.Scrollbar(sdef, R);
            comp.display(false);
            comp.attachEvent("scroll", 4, this, this.onVScroll);
            comp.appendTo(this.view);
        }
        if (bx && by) {
            sdef = {
                classType: "js.awt.Component",
                css: "position:absolute;background:#FFFFFF;"
            };
            comp = this.blankBar = new js.awt.Component(sdef, R);
            comp.display(false);
            comp.appendTo(this.view);
        }
        if (bx) {
            sdef = {
                classType: "js.awt.Scrollbar",
                css: "position:absolute;background:#FFFFFF;",
                axis: 0
            };
            comp = this.hScrollbar = new js.awt.Scrollbar(sdef, R);
            comp.display(false);
            comp.attachEvent("scroll", 4, this, this.onHScroll);
            comp.appendTo(this.view);
        }
    };
    thi$._init = function(def, Runtime) {
        if (typeof def !== "object") {
            return;
        }
        def.classType = def.classType || "js.swt.SComponent";
        def.className = def.className || "jsvm_scomp";
        $super(this);
        var vdef = def.vcomp = def.vcomp || {}, vcomp;
        vdef.classType = vdef.classType || "js.awt.Container";
        vdef.className = vdef.className || DOM.combineClassName(def.className, "vcomp");
        vcomp = new (Class.forName(vdef.classType))(vdef, Runtime);
        this.setVComponent(vcomp);
        if (J$VM.mobile) {
            def.scroll_x = false;
            def.scroll_y = false;
        }
        _initScrollbars.call(this, def);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Component);

$package("com.jinfonet.api");

com.jinfonet.api.API = function() {
    J$VM.System.setProperty("j$vm_isapi", true);
    return true;
}();

$package("com.jinfonet.api");

com.jinfonet.api.RptElement = function() {
    var CLASS = com.jinfonet.api.RptElement, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, System = J$VM.System, DOM = J$VM.DOM, Event = js.util.Event, MQ = J$VM.MQ;
    thi$.getType = function() {
        var M = this.def;
        return M.type;
    };
    thi$.getInstanceName = function() {
        var M = this.def;
        return M.iname;
    };
    thi$.getName = function() {
        var M = this.def;
        return M.dname;
    };
    thi$.getReport = function() {
        return this._report;
    };
    thi$.getReportSet = function() {
        var rpt = this.getReport();
        return rpt ? rpt.getReportSet() : null;
    };
    thi$.getReportApp = function() {
        return this.getReportSet().getReportApp();
    };
};

$package("com.jinfonet.api");

$import("com.jinfonet.api.RptElement");

com.jinfonet.api.RptComponent = function(def, report) {
    var CLASS = com.jinfonet.api.RptComponent, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, System = J$VM.System, DOM = J$VM.DOM, Event = js.util.Event, MQ = J$VM.MQ;
    thi$.getAssocDBField = function(dsid, callback) {
        this.getReportApp()._doAction("GetAssocDBField", {
            dsid: dsid
        }, callback);
    };
    thi$.sort = function(field, order) {
        if (!this.isSortable()) {
            return;
        }
        this.getReportApp()._doAction("browserSort", {
            iname: this.getInstanceName(),
            field: field.iname,
            order: order
        });
    };
    thi$.filter = function(field, op, values) {
        if (!this.isFilterable()) {
            return;
        }
        this.getReportApp()._doAction("browserFilter", {
            iname: this.getInstanceName(),
            field: field.iname,
            op: op,
            values: values
        });
    };
    thi$.isSortable = function() {
        return this.def.sortable || false;
    };
    thi$.isFilterable = function() {
        return this.def.filterable || false;
    };
    thi$._update = function(def) {
        this.def = def;
        if (def.clazz) {
            var tmp = def.clazz.split(".");
            def.type = tmp[tmp.length - 1];
        }
    };
    thi$.destroy = function() {
        this._report = null;
        $super(this);
    }.$override(this.destroy);
    thi$._init = function(def, report) {
        if (!Class.isObject(def)) {
            return;
        }
        if (def.clazz) {
            var tmp = def.clazz.split(".");
            def.type = tmp[tmp.length - 1];
        }
        $super(this, def);
        this._report = report;
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.util.EventTarget).$implements(com.jinfonet.api.RptElement);

$package("com.jinfonet.api");

$import("com.jinfonet.api.RptComponent");

com.jinfonet.api.FilterControl = function(def, report) {
    var CLASS = com.jinfonet.api.FilterControl, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, System = J$VM.System, DOM = J$VM.DOM, Event = js.util.Event, MQ = J$VM.MQ, SearchKit = Class.forName("js.swt.SearchKit");
    thi$.getBindFields = function() {
        return this.def.fields;
    };
    thi$.getApplyToComponents = function() {
        return this.def.applyTo;
    };
    thi$.getAllValues = function() {
        return this._values.list;
    };
    thi$.applyFilter = function() {
        var values = this.getSelectedRealValues(), include = values.length > 0, selectAll = this.isAllSelected() || values.length === 0;
        this.getReportApp()._doAction("browserFilter", {
            iname: this.getInstanceName(),
            fcvalue: {
                selectAll: selectAll,
                include: include,
                values: !selectAll ? values : null
            }
        });
    };
    thi$.getSelectedRealValues = function() {
        var list = this.getAllValues(), i, len, val, ret = [];
        if (this._selmap.size() === 0) {
            return ret;
        }
        for (i = 0, len = list.length; i < len; i++) {
            val = list[i];
            if (val.selected) {
                ret.push([ val.real ]);
            }
        }
        return ret;
    };
    thi$.getRealValues = function(mode) {
        var list = this.getAllValues(), i, len, val, ret = [];
        for (i = 0, len = list.length; i < len; i++) {
            val = list[i];
            if (mode && val.selected) {
                ret.push(val.real);
            } else {
                ret.push(val.real);
            }
        }
        return ret;
    };
    thi$.getDispValues = function(mode) {
        var list = this.getAllValues(), i, len, val, ret = [];
        for (i = 0, len = list.length; i < len; i++) {
            val = list[i];
            if (mode && val.selected) {
                ret.push(val.disp);
            } else {
                ret.push(val.disp);
            }
        }
        return ret;
    };
    thi$.clearSelects = function() {
        _selectAll.call(this, this._values.list, false);
    };
    thi$.select = function(key, selected) {
        var val = this._valuesmap[key];
        if (!val) {
            return;
        }
        val.selected = selected;
        _syncSelected.call(this, val);
    };
    thi$.selectAll = function(selected) {
        _selectAll.call(this, this._values.list, selected);
    };
    thi$.isAllSelected = function() {
        return this._selmap.size() === this._values.list.length;
    };
    var _selectAll = function(list, b) {
        var i, len, val;
        for (i = 0, len = list.length; i < len; i++) {
            val = list[i];
            val.selected = b;
            _syncSelected.call(this, val);
        }
    };
    var _syncSelected = function(val) {
        var selmap = this._selmap, key = val.real;
        if (val.selected) {
            selmap.put(key, val);
        } else {
            selmap.remove(key);
        }
    };
    thi$.search = function(key, options) {
        options = options || {};
        options.global = false;
        var disps = this.getDispValues(0), map = SearchKit.search(disps, key, options), keys = map.matches.keys(), ret = [], values = this.getAllValues();
        for (var i = 0, len = keys.length; i < len; i++) {
            ret.push(values[parseInt(keys[i])]);
        }
        return ret;
    };
    thi$._update = function(values) {
        var selected = values.current, val, selmap = this._selmap, map;
        this._values = values;
        updateAvailables(values);
        map = this._valuesmap = list2map(values.list);
        if (values.selectAll === "true" && values.include === "true") {
            _selectAll.call(this, values.list, true);
        } else {
            if (values.selectAll === "true" && values.include === "false") {} else {
                for (var i = 0, len = selected.length; i < len; i++) {
                    val = map[selected[i]];
                    if (val) {
                        val.selected = true;
                        selmap.put(val.real, val);
                    }
                }
            }
        }
    };
    var list2map = function(list) {
        var i, len, val, map = {};
        for (i = 0, len = list.length; i < len; i++) {
            val = list[i];
            map[val.real] = val;
        }
        return map;
    };
    var updateAvailables = function(values) {
        var list = values.list, aIdxes = values.aIndexs, value, i, len, avas = [], unavas = [];
        for (i = 0, len = aIdxes.length; i < len; i++) {
            value = list[aIdxes[i]];
            value.available = true;
        }
        for (i = 0, len = list.length; i < len; i++) {
            value = list[i];
            if (value.available) {
                avas.push(value);
            } else {
                unavas.push(value);
            }
        }
        values.list = avas.concat(unavas);
        values.aIndexs = null;
    };
    thi$.destroy = function() {
        this._report = null;
        this._valuesmap = null;
        this._selmap = null;
        $super(this);
    }.$override(this.destroy);
    thi$._init = function(def, report) {
        if (!Class.isObject(def)) {
            return;
        }
        $super(this);
        this._selmap = new js.util.HashMap();
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(com.jinfonet.api.RptComponent);

$package("com.jinfonet.api");

$import("com.jinfonet.api.RptComponent");

com.jinfonet.api.Report = function(def, rptset) {
    var CLASS = com.jinfonet.api.Report, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, System = J$VM.System, DOM = J$VM.DOM, Event = js.util.Event, MQ = J$VM.MQ, Message = js.util.Message, Component = Class.forName("com.jinfonet.api.RptComponent");
    thi$.getRptComponents = function() {
        var dcinfos = this.def.dcinfos, ret = [], comps = this._comps, comp, def;
        for (var instName in dcinfos) {
            comp = comps[instName];
            if (!comp) {
                comp = comps[instName] = new Component(dcinfos[instName], this);
            }
            ret.push(comp);
        }
        return ret;
    };
    thi$.getRptComponent = function(instName) {
        var dcinfos = this.def.dcinfos, comps = this._comps, comp, def;
        comp = comps[instName];
        def = dcinfos[instName];
        if (!comp && def) {
            comp = comps[instName] = new Component(def, this);
        }
        return comp;
    };
    thi$.getDataContainerBy = function(dsid, callback) {
        var iname = this._dsids[dsid];
        if (iname && Class.isFunction(callback)) {
            callback(new Message({
                action: "GetDataContainer",
                result: {
                    err: 0,
                    obj: {
                        comp: this.getRptComponent(iname)
                    }
                }
            }));
        } else {
            var app = this.getReportApp(), fn = function(msg) {
                msg = System.objectCopy(msg, {}, true);
                var result = msg.result, obj;
                if (result && result.err == 0) {
                    obj = result.obj;
                    iname = obj.comp.iname;
                    if (this.def.dcinfos[iname]) {
                        this._dsids[dsid] = iname;
                        obj.comp = this.getRptComponent(iname);
                    } else {
                        obj.comp = null;
                    }
                    if (Class.isFunction(callback)) {
                        callback(msg);
                    }
                }
            }.$bind(this);
            app._doAction("GetDataContainer", {
                dsid: dsid
            }, fn);
        }
    };
    thi$.getFilterCtrl = function(field, comp, callback) {
        this.getReportApp()._doAction("GetFilterControl", {
            comp: comp.getInstanceName(),
            fields: [ field ]
        }, _onGetFilterCtrl.$bind(this, comp, field, callback));
    };
    var _onGetFilterCtrl = function(msg, comp, field, callback) {
        var result = msg.result, obj, ctrls;
        if (result.err != 0) {
            System.err.println(result.msg);
            if (callback) {
                callback(msg);
            }
            return;
        }
        obj = result.obj;
        ctrls = obj.ctrls;
        if (ctrls.length === 0) {
            result.obj = null;
            if (callback) {
                callback(msg);
            }
            return;
        }
        var app = this.getReportApp(), _getFCValues = function() {
            if (!app.plugindialog) {
                return;
            }
            app._doAction("GetFCValues", {
                comp: ctrls[0]
            }, _onGetFCValues.$bind(this, ctrls[0], comp, field, callback));
        }.$bind(this);
        if (obj.isNew) {
            this.refresh(_getFCValues);
        } else {
            _getFCValues();
        }
    };
    var _onGetFCValues = function(msg, filter, comp, field, callback) {
        var result = msg.result;
        if (result.err != 0) {
            System.err.println(result.msg);
            if (callback) {
                callback(msg);
            }
            return;
        }
        var filterCtrl = new (Class.forName("com.jinfonet.api.FilterControl"))({
            type: "OnScreenFilterControl",
            iname: filter,
            dname: "",
            fields: [ field ],
            applyTo: [ comp.getInstanceName() ]
        }, this);
        filterCtrl._update(result.obj);
        msg.action = "GetFilterControl";
        result.obj = {
            ctrl: filterCtrl
        };
        if (callback) {
            callback(msg);
        }
    };
    thi$.getPageTotal = function() {
        return this.def.pageTotal;
    };
    thi$.getPageNumber = function() {
        return this.def.pageNumber;
    };
    thi$.nextPage = function() {
        var app = this.getReportApp();
        app._doAction("guiNextPage");
    };
    thi$.prevPage = function() {
        var app = this.getReportApp();
        app._doAction("guiPrevPage");
    };
    thi$.firstPage = function() {
        var app = this.getReportApp();
        app._doAction("guiFirstPage");
    };
    thi$.lastPage = function() {
        var app = this.getReportApp();
        app._doAction("guiLastPage");
    };
    thi$.gotoPage = function(pageNum) {
        var app = this.getReportApp();
        app._doAction("guiGotoPage", {
            pageNum: pageNum
        });
    };
    thi$.refresh = function(callback) {
        var app = this.getReportApp(), onrefresh;
        if (Class.isFunction(callback)) {
            onrefresh = function(e) {
                var msg = e.getData();
                if ("GetReportInfo" === msg.action) {
                    app.detachEvent("jreportstatus", 4, this, onrefresh);
                    callback();
                }
            };
            app.attachEvent("jreportstatus", 4, this, onrefresh);
        }
        app._doAction("guiRefresh");
    };
    thi$.getReport = function() {
        return this;
    };
    thi$.getReportSet = function() {
        return this._rptset;
    };
    thi$._update = function(def) {
        $super(this);
        def.type = "Report";
        def.iname = def.sheet;
        var dcinfos = def.dcinfos, comps = this._comps, comp;
        for (var instName in dcinfos) {
            comp = comps[instName];
            if (comp) {
                comp._update(dcinfos[instName]);
            }
        }
    }.$override(this._update);
    thi$.destroy = function() {
        var comps = this._comps;
        for (var p in comps) {
            comps[p].destroy();
        }
        this._comps = null;
        this._rptset = null;
        $super(this);
    }.$override(this.destroy);
    thi$._init = function(def, rptset) {
        if (!Class.isObject(def)) {
            return;
        }
        def.type = "Report";
        def.iname = def.sheet;
        $super(this, def, this);
        this._rptset = rptset;
        this._comps = {};
        this._dsids = {};
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(com.jinfonet.api.RptComponent);

$package("com.jinfonet.api");

$import("com.jinfonet.api.RptComponent");

$import("com.jinfonet.api.Report");

com.jinfonet.api.ReportSet = function(def, app) {
    var CLASS = com.jinfonet.api.ReportSet, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, System = J$VM.System, DOM = J$VM.DOM, Event = js.util.Event, MQ = J$VM.MQ, Report = Class.forName("com.jinfonet.api.Report");
    thi$.getReports = function() {
        var rptinfo = this.def, ret = [], sheets = rptinfo.sheets, sheet, reports = this._reports, report;
        for (var i = 0, len = sheets.length; i < len; i++) {
            sheet = sheets[i];
            report = reports[sheet.sheet];
            if (!report) {
                report = reports[sheet.sheet] = new Report(sheet, this);
            }
            ret.push(report);
        }
        return ret;
    };
    thi$.getReport = function() {
        var rptinfo = this.def, active = rptinfo.active, sheets = rptinfo.sheets, sheet, reports = this._reports, report;
        report = reports[active];
        if (!report) {
            for (var i = 0, len = sheets.length; i < len; i++) {
                sheet = sheets[i];
                if (sheet.sheet === active) {
                    report = new Report(sheet, this);
                    reports[active] = report;
                }
            }
        }
        return report;
    };
    thi$.getReportSet = function() {
        return this;
    };
    thi$.getReportApp = function() {
        return this._app;
    };
    thi$.exportTo = function(format, options, callback) {
        if (arguments.length === 0 || Class.isFunction(arguments[0])) {
            _guiExport.apply(this, arguments);
        } else {
            _apiExport.apply(this, arguments);
        }
    };
    var _guiExport = function() {
        var app = this.getReportApp();
        app._doAction("guiExport", null);
    };
    var _apiExport = function(format, options, callback) {
        var app = this.getReportApp();
        options = options || {};
        options.format = format || "pdf";
        options.target = Class.isNumber(options.target) ? options.target : 1;
        options.file = options.file || this.getName();
        options.attrs = options.attrs || {};
        var handler = function(msg) {
            var data = msg.result, obj, url;
            if (data.err == 0) {
                obj = data.obj;
                url = [ app._peerGetsEntry || this.def.appinfo.getsEntry, obj.path, "?" ];
                url.push("&download_filename=", obj.download_filename || obj.file);
                if (callback) {
                    obj.file = url.join("");
                    callback(msg);
                } else {
                    if (options.target === 0) {
                        window.open(url.join(""));
                    } else {
                        url.push("&jrd_save_in_local=true");
                        _getDLFrame.call(this).src = url.join("");
                    }
                }
            } else {
                if (callback) {
                    callback(msg);
                } else {
                    System.err.println(data);
                }
            }
        }.$bind(this);
        app._doAction("Export", options, handler);
    };
    thi$.print = function(format, options, callback) {
        if (arguments.length === 0 || Class.isFunction(arguments[0])) {
            _guiPrint.apply(this, arguments);
        } else {
            _apiPrint.apply(this, arguments);
        }
    };
    thi$.paramDialog = function(callback) {
        var app = this.getReportApp();
        app._doAction("popParametersDlg", null, callback);
    };
    thi$.changeParameters = function(parameterInfo) {
        if (!parameterInfo || parameterInfo.length == 0) {
            return;
        }
        var app = this.getReportApp();
        app._doAction("changeParameters", parameterInfo);
    };
    thi$.getParameterInfo = function(callBack) {
        var app = this.getReportApp();
        app._doAction("getParameterInfo", null, callBack);
    };
    var _guiPrint = function(callback) {
        var app = this.getReportApp();
        app._doAction("guiPrint", null, callback);
    };
    var _apiPrint = function(format, options, callback) {
        var app = this.getReportApp();
        options = options || {};
        options.format = format || "pdf";
        options.range = options.range || "all";
        var handler = function(msg) {
            var data = msg.result, obj, url;
            if (data.err == 0) {
                obj = data.obj;
                url = [ app._peerGetsEntry || this.def.appinfo.getsEntry, obj.path ];
                if (callback) {
                    obj.file = url.join("");
                    callback(msg);
                } else {
                    window.open(url.join(""));
                }
            } else {
                if (callback) {
                    callback(msg);
                } else {
                    System.err.println(data);
                }
            }
        }.$bind(this);
        app._doAction("Print", options, handler);
    };
    var _getDLFrame = function() {
        var app = this.getReportApp(), iframe;
        iframe = app._ddframe;
        if (iframe) {
            return iframe;
        }
        iframe = app._ddframe = DOM.createElement("IFRAME");
        iframe.style.cssText = "display:none;";
        self.document.body.appendChild(iframe);
        return iframe;
    };
    thi$.isDirty = function() {
        return this.def.dirty;
    };
    var ApiCall_SavaAsProcessingFlg = false;
    thi$.save = function(options, callback) {
        callback = arguments.length == 1 && Class.isFunction(arguments[0]) ? options : Class.isFunction(callback) ? callback : null;
        options = Class.isPureObject(options) ? options : null;
        if (ApiCall_SavaAsProcessingFlg) {
            throw new Error("While repeatedly calling the saveAs API");
        }
        if (this.isDirty()) {
            ApiCall_SavaAsProcessingFlg = true;
            var app = this.getReportApp();
            app._doAction("guiSave", options, function(msg) {
                var data = msg.result;
                ApiCall_SavaAsProcessingFlg = false;
                callback && callback(data);
            });
        } else {
            if (callback) {
                callback({
                    err: 78,
                    msg: "No Save, The report is not dirty."
                });
            }
        }
    };
    thi$.saveAs = function(options, callback) {
        callback = arguments.length == 1 && Class.isFunction(arguments[0]) ? options : Class.isFunction(callback) ? callback : null;
        options = Class.isPureObject(options) ? options : null;
        if (ApiCall_SavaAsProcessingFlg) {
            throw new Error("While repeatedly calling the saveAs API");
        }
        ApiCall_SavaAsProcessingFlg = true;
        var app = this.getReportApp();
        app._doAction("apiSaveAs", options, function(msg) {
            var data = msg.result;
            ApiCall_SavaAsProcessingFlg = false;
            callback && callback(data);
        });
    };
    thi$._update = function(def) {
        $super(this);
        def.type = "ReportSet";
        def.iname = def.rptdef.name;
        def.dname = def.rptdef.dname;
        var rptinfo = def, sheets = rptinfo.sheets, sheet, reports = this._reports, report;
        for (var i = 0, len = sheets.length; i < len; i++) {
            sheet = sheets[i];
            report = reports[sheet.sheet];
            if (report) {
                report._update(sheet);
            }
        }
    }.$override(this._update);
    thi$.destroy = function() {
        var reports = this._reports;
        for (var p in reports) {
            reports[p].destroy();
        }
        this._reports = null;
        this._app = null;
        $super(this);
    }.$override(this.destroy);
    thi$._init = function(def, app) {
        if (!Class.isObject(def)) {
            return;
        }
        def.type = "ReportSet";
        def.iname = def.rptdef.name;
        def.dname = def.rptdef.dname;
        $super(this, def);
        this._reports = {};
        this._app = app;
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(com.jinfonet.api.RptComponent);

$package("com.jinfonet.api");

$import("com.jinfonet.api.ReportSet");

com.jinfonet.api.ReportApp = function() {
    var CLASS = com.jinfonet.api.ReportApp, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, System = J$VM.System, DOM = J$VM.DOM, Event = js.util.Event, MQ = J$VM.MQ, FACTORY = "com.jinfonet.api.AppFactory", MSGCLASS = "js.util.Message", Message = Class.forName(MSGCLASS), ReportSet = Class.forName("com.jinfonet.api.ReportSet");
    thi$.MSGTYPE = "jreportMessage";
    thi$.getSessionID = function() {
        return this.getRunInfo().session;
    };
    thi$.getRunInfo = function() {
        return this._local.runinfo;
    };
    thi$.innerAPI = function() {
        return true;
    };
    thi$.close = function(callback) {
        if (this.destroied === true) {
            return;
        }
        if (this._getReportInfo()) {
            this._doAction("CloseApp", null, function(msg) {
                if (Class.isFunction(callback)) {
                    callback(msg);
                }
                this.destroy();
            }.$bind(this));
        } else {
            if (Class.isFunction(callback)) {
                callback({
                    err: 0
                });
            }
            this.destroy();
        }
    };
    thi$.getReportSet = function() {
        var rptinfo = this._getReportInfo(), id = rptinfo.rptdef.name, U = this._local, rptsets = U.rptsets = U.rptsets || {}, rptset;
        rptset = rptsets[id];
        if (!rptset) {
            rptset = rptsets[id] = new ReportSet(rptinfo, this);
        }
        return rptset;
    };
    thi$.getLinkPath = function() {
        var rptinfo = this._getReportInfo(), linkPath;
        if (!rptinfo) {
            return [];
        }
        linkPath = rptinfo.linkPath;
        for (var i = 0, len = linkPath.length; i < len; i++) {
            var node = linkPath[i];
            if (node.rptsetid === rptinfo.rptsetid) {
                node.active = true;
                break;
            }
        }
        return linkPath;
    };
    thi$.switchLinkPath = function(pathNode, keepLinked, callback) {
        var paths, i, len, node, p;
        if (keepLinked) {
            this._doAction("SwitchRptset", pathNode, callback);
        } else {
            paths = this.getLinkPath();
            for (i = 0, len = paths.length; i < len; i++) {
                node = paths[i];
                if (node.rptsetid === pathNode.rptsetid) {
                    p = i;
                    break;
                }
            }
            var ids = [];
            for (i = paths.length - 1; i > p; i--) {
                ids.push(paths[i].rptsetid);
            }
            var fn = function() {
                if (ids.length > 0) {
                    this._doAction("CloseRptsets", {
                        rptsetids: ids
                    }, fn);
                    ids = [];
                } else {
                    this._doAction("SwitchRptset", pathNode, callback);
                }
            }.$bind(this);
            fn();
        }
    };
    thi$._setReportInfo = function(rptinfo) {
        this._local.rptinfo = rptinfo;
        var rptset = this.getReportSet();
        rptset._update(rptinfo);
    };
    thi$._getReportInfo = function() {
        return this._local.rptinfo;
    };
    thi$._getParameterInfo = function() {
        var sheet = this._getReportSheet();
        var params = sheet.params;
        var rptID = sheet.sheet;
        var rst = [], param;
        for (var i = 0; i < params.length; i++) {
            param = System.objectCopy(params[i], {}, false);
            param.ownerID = [ rptID ];
            rst.push(param);
        }
        return rst;
    };
    thi$._getReportSheet = function() {
        var rptInfo = this._getReportInfo();
        if (!rptInfo) {
            return null;
        }
        var reportid = rptInfo.reportid;
        var sheets = rptInfo.sheets;
        var sheet;
        var i = 0;
        while (i < sheets.length) {
            sheet = sheets[i];
            if (sheet.sheet == reportid) {
                break;
            }
            i++;
        }
        if (i > sheets.length - 1) {
            throw new Error();
        }
        return sheet;
    };
    thi$._showCustomizedCtrl = function(msg) {
        var result = msg.result;
        if (result.err != 0) {
            System.err.println(result.msg);
            throw new Error(result.msg);
        }
        var ctrl = result.obj.ctrl, source = result.obj.source, bounds = source.bounds, dialog = this.plugindialog, autoSize = ctrl.autoSize, userP = ctrl.position, userW = !autoSize ? ctrl.width : 0, userH = !autoSize ? ctrl.height : 0;
        if (!dialog) {
            dialog = this.plugindialog = new js.awt.VFrame({
                width: userW,
                height: userH,
                id: "plugin-dialog",
                css: "position:absolute;border:0px none;overflow:hidden;" + "visibility:hidden;z-index:1;",
                stateless: true
            }, null);
            dialog.setZ(this._maxZIndex + 2);
            Event.attachEvent(dialog.view, "mouseup", 0, this, _ondialogmouseup);
            DOM.appendTo(dialog.view, this.view);
        }
        var scope = new js.awt.ScriptScope(dialog), app = this;
        scope.exec = function(script) {
            var App = app, ReportSet = App.getReportSet(), Report = ReportSet.getReport(), context = source;
            with (this) {
                eval(script);
            }
        };
        scope.onload = function() {
            var dview = dialog.view, abounds = app.getBounds(), w, h, x, y;
            w = dview.scrollWidth;
            h = dview.scrollHeight;
            dialog.setSize(w, h);
            switch (userP) {
              case 3:
                x = ctrl.absX;
                y = ctrl.absY;
                break;

              case 0:
                x = (abounds.innerWidth - w) / 2;
                y = (abounds.innerHeight - h) / 2;
                break;

              case 1:
                x = source.mouseX;
                y = source.mouseY;
                break;

              case 2:
                x = bounds.absX;
                y = bounds.absY + bounds.height;
                break;
            }
            var d = x + w - abounds.width;
            if (d > 0) {
                x -= d;
                if (x < 0) {
                    x = 0;
                }
            }
            d = y + h - abounds.height;
            if (d > 0) {
                y -= d;
                if (y < 0) {
                    y = 0;
                }
            }
            dialog.setPosition(x, y);
            dialog.view.style.visibility = "visible";
            app.showCover1(true);
        };
        scope.hide = function() {
            _ondialogmouseup.call(app, {});
        };
        dialog.setContent(ctrl.content, null, scope);
    };
    var _ondialogmouseup = function(e) {
        var dialog = this.plugindialog;
        if (!dialog || DOM.contains(dialog.view, e.srcElement, true) || e.srcElement === document.documentElement) {
            return;
        }
        this.showCover1(false);
        this.plugindialog = null;
        dialog.destroy();
    };
    thi$.showCover1 = function(b) {
        var cover = this._coverView, bounds;
        if (b) {
            cover = this._coverView = DOM.createElement("DIV");
            cover.className = "jsvm_mask_cover";
            cover.style.cssText = "position:absolute;cursor:default;";
            this.view.appendChild(cover);
            this.adjustCover1(this.getBounds());
        } else {
            this.removeCover();
        }
    };
    thi$.adjustCover1 = function(bounds) {
        var cover = this._coverView;
        if (!cover) {
            return;
        }
        cover.style.zIndex = this._maxZIndex + 1;
        bounds = bounds || this.getBounds();
        DOM.setBounds(cover, 0, 0, bounds.innerWidth, bounds.innerHeight);
    };
    thi$._getActionProxy = function(action) {
        return {
            doAction: function(params, callback) {}
        };
    };
    var ActionProxy = function(proxy, runinfo) {
        this.doAction = function(params, callback) {
            proxy.doAction({
                j$vm_pid: runinfo.j$vm_pid,
                j$vm_app: runinfo.j$vm_app,
                jrd_product: runinfo.jrd_product,
                jrd_rptsetid: runinfo.jrd_rptsetid,
                jrd_reportid: runinfo.jrd_reportid,
                jrd_objdef: params
            }, this, function(xhr) {
                var data = xhr.responseJSON();
                (function() {
                    callback(data);
                }).$delay(this, 0);
                xhr.close();
            }, function(xhr) {
                var data = {
                    err: "B0000001",
                    msg: "HTTP " + xhr.status() + ": " + xhr.statusText()
                };
                (function() {
                    callback(data);
                }).$delay(this, 0);
                xhr.close();
            }, function(xhr) {
                var data = {
                    err: "B0000002",
                    msg: "HTTP timeout"
                };
                (function() {
                    callback(data);
                }).$delay(this, 0);
                xhr.close();
            });
        };
        return this;
    };
    thi$._doAction = function(action, params, callback) {
        if (callback) {
            this._setFunction(action, callback);
        }
        var msg = new Message({
            action: action,
            params: params
        });
        if (!this.innerAPI()) {
            this.rpcMessage(msg, this.getMsgBox().peers[0]);
        } else {
            callback = function(data) {
                var fn = this._getFunction(action) || this._getFunction([ "on", null ].join(action));
                msg.result = data;
                if (Class.isFunction(fn)) {
                    fn(msg);
                }
                this.fireEvent(new Event("jreportstatus", msg, this));
                if (!this._peerApp) {
                    return;
                }
                this.rpcMessage(msg);
            }.$bind(this);
            var proxy = this._getActionProxy(action);
            proxy = proxy instanceof com.jinfonet.Action ? new ActionProxy(proxy, this.getRunInfo()) : proxy;
            proxy.doAction(params, callback);
        }
    };
    thi$._getFunction = function(action) {
        this._funs = this._funs || {};
        var fn = this[action] || this._funs[action];
        return fn;
    };
    thi$._setFunction = function(action, fn) {
        this._funs = this._funs || {};
        this._funs[action] = fn;
    };
    var _peerAPIHandshake = function() {
        this._peerApp = true;
    };
    var _onMessage = function(e) {
        if (this.iframe && this.iframe.uuid !== e.msgpeer) {
            return;
        }
        var fn, msg;
        msg = e.getData();
        fn = this._getFunction(msg.action);
        if (Class.isFunction(fn)) {
            fn(msg);
            if (this.innerAPI()) {
                return;
            }
        } else {
            if (this.innerAPI()) {
                this._doAction(msg.action, msg.params);
                return;
            }
        }
        this.fireEvent(new Event("jreportstatus", msg, this));
    };
    var _onmouseup = function(e) {
        _ondialogmouseup.call(this, e);
    };
    thi$._initApp = function(info) {
        info = info || {};
        var U = this._local;
        U.runinfo = info;
        U.actions = {};
        this.attachEvent(this.MSGTYPE, 4, this, _onMessage);
        this._setFunction("PeerAPIHandshake", _peerAPIHandshake.$bind(this));
        Event.attachEvent(document, "mouseup", 0, this, _onmouseup);
        this._maxZIndex = DOM.getMaxZIndex(this.view) || 1e4;
    };
    thi$._release = function() {
        this.detachEvent(this.MSGTYPE, 4, this, _onMessage);
        Event.detachEvent(document, "mousedown", 0, this, _onmouseup);
    };
    var attachEvent = function(eType, flag, thisObj, handler) {};
    var detachEvent = function(eType, flag, thisObj, handler) {};
};

$package("com.jinfonet.api");

$import("com.jinfonet.api.ReportApp");

com.jinfonet.api.RptAppImpl = function(info) {
    var CLASS = com.jinfonet.api.RptAppImpl, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, System = J$VM.System, DOM = J$VM.DOM, Event = js.util.Event, MQ = J$VM.MQ;
    thi$.innerAPI = function() {
        return false;
    };
    var _onStartApp = function(msg) {
        var data = msg.result.obj;
        this._peerGetsEntry = data.getsEntry;
        this._doAction("PeerAPIHandshake", {
            peer: this.getMsgBox().peers[0]
        });
    };
    var _onGetReportInfo = function(msg) {
        var result = msg.result, rptinfo = result.obj;
        this._setReportInfo(rptinfo);
    };
    var _openReport = function(server, rptRes, catRes, params, iframe) {
        var p, v, buf = [];
        if (!server || !server.url) {
            throw new Error("Can not found the url of server");
        }
        if (!rptRes || !rptRes.name) {
            throw new Error("Can not found the report name");
        }
        var paramForm = _createForm(server.url, iframe.name);
        if (server.user) {
            _createParam("jrs.auth_uid", server.user, paramForm);
        }
        if (server.pass) {
            _createParam("jrs.auth_pwd", server.pass, paramForm);
        }
        for (p in server) {
            if (p === "user" || p === "pass" || p === "jrs.result_type") {
                continue;
            }
            v = server[p];
            _createParam(p, v instanceof Object ? JSON.stringify(v) : v, paramForm);
        }
        _createParam("jrs.report", rptRes.name, paramForm);
        _createParam("jrd_report", JSON.stringify(rptRes), paramForm);
        if (catRes && catRes.name) {
            _createParam("jrs.catalog", catRes.name, paramForm);
            _createParam("jrd_catalog", JSON.stringify(catRes), paramForm);
        }
        if (params) {
            for (p in params) {
                v = params[p];
                if (Class.isArray(v)) {
                    _createParam([ "_isMultiple_jrs.param$", p ].join(""), true, paramForm);
                    v.forEach(function(e) {
                        _createParam([ "jrs.param$", p ].join(""), e, paramForm);
                    });
                } else {
                    _createParam([ "jrs.param$", p ].join(""), v, paramForm);
                }
            }
        }
        _createParam("jrs.result_type", 8, paramForm);
        _createParam("jrs.cmd", "jrs.try_vw", paramForm);
        document.body.appendChild(paramForm);
        paramForm.submit();
        document.body.removeChild(paramForm);
    };
    var _createForm = function(url, name) {
        var paramForm = document.createElement("FORM");
        paramForm.action = url;
        paramForm.method = "POST";
        paramForm.target = name;
        return paramForm;
    };
    var _createParam = function(name, value, form) {
        var input = document.createElement("INPUT");
        input.type = "hidden";
        input.name = name;
        input.value = value;
        form.appendChild(input);
    };
    var _createIFrame = function() {
        var iframe = DOM.createElement("IFRAME"), text;
        iframe.name = [ "jreport", js.lang.Math.uuid() ].join("-");
        iframe.style.cssText = "position:absolute;border: 0 none;left:0;top:0;" + "width:100%;height:100%";
        iframe.setAttribute("frameBorder", 0);
        this.view.appendChild(iframe);
        return iframe;
    };
    thi$.destroy = function() {
        this.view.removeChild(this.iframe);
        this.iframe = null;
        this.setMsgType(null);
        this._release();
        $super(this);
    }.$override(this.destroy);
    thi$._init = function(info) {
        var entry = self.document.getElementById(info.entry);
        $super(this, {
            id: info.entry,
            className: entry.className,
            stateless: true
        }, null, entry);
        this._setFunction("StartApp", _onStartApp.$bind(this));
        this._setFunction("GetReportInfo", _onGetReportInfo.$bind(this));
        this._setFunction("GetCustomizedCtrl", this._showCustomizedCtrl.$bind(this));
        var iframe = this.iframe = _createIFrame.call(this);
        this.setMsgDevice(iframe);
        this.setMsgType(this.MSGTYPE);
        this._initApp(info);
        _openReport.call(this, info.server || {}, info.rptRes || {}, info.catRes || {}, info.params || {}, iframe);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Component).$implements(js.util.MessageBox, com.jinfonet.api.ReportApp);

$package("com.jinfonet.api");

com.jinfonet.api.Dashboard = function(def, app) {
    var CLASS = com.jinfonet.api.Dashboard, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, System = J$VM.System, DOM = J$VM.DOM, Event = js.util.Event, MQ = J$VM.MQ, ExportFormats = {
        pdf: 0,
        html: 1,
        excel: 2,
        text: 3,
        rtf: 4,
        xml: 5,
        ps: 6,
        rsd: 7,
        print: 8
    };
    thi$.getType = function() {
        var M = this.def;
        return M.type;
    };
    thi$.getID = function() {
        var M = this.def;
        return M.dsbid;
    };
    thi$.getName = function() {
        var M = this.def;
        return M.dname;
    };
    thi$.getDashboardApp = function() {
        return this._app;
    };
    thi$.exportTo = function(format, options, callback) {
        if (arguments.length === 0 || Class.isFunction(arguments[0])) {
            _guiExport.apply(this, arguments);
        } else {
            _apiExport.apply(this, arguments);
        }
    };
    var _guiExport = function() {
        var app = this.getDashboardApp();
        app._doAction("guiExport", null);
    };
    var _apiExport = function(format, options, callback) {
        var app = this.getDashboardApp();
        options = options || {};
        options.format = (Class.isNumber(format) ? format : ExportFormats[format]) || 0;
        options.target = Class.isNumber(options.target) ? options.target : 1;
        options.file = options.file || this.getName();
        options.attrs = options.attrs || {};
        var handler = function(msg) {
            var data = msg.result, obj, url;
            if (data.err == 0) {
                obj = data.obj;
                url = [ app._peerGetsEntry || this.def.appinfo.getsEntry, obj.path, "?" ];
                url.push("&download_filename=", obj.download_filename || obj.file);
                if (callback) {
                    obj.file = url.join("");
                    callback(msg);
                } else {
                    if (options.target === 0) {
                        window.open(url.join(""));
                    } else {
                        url.push("&jrd_save_in_local=true");
                        _getDLFrame.call(this).src = url.join("");
                    }
                }
            } else {
                if (callback) {
                    callback(msg);
                } else {
                    System.err.println(data);
                }
            }
        }.$bind(this);
        app._doAction("Export", options, handler);
    };
    thi$.print = function(format, options, callback) {
        if (arguments.length === 0 || Class.isFunction(arguments[0])) {
            _guiPrint.apply(this, arguments);
        } else {
            _apiPrint.apply(this, arguments);
        }
    };
    var _guiPrint = function(callback) {
        var app = this.getDashboardApp();
        app._doAction("guiPrint", null, callback);
    };
    var _apiPrint = function(format, options, callback) {
        var app = this.getDashboardApp(), pdef;
        options = options || {};
        options.range = options.range || "all";
        pdef = options.printerDef = options.printerDef || {};
        pdef.printer = pdef.printer || format || "pdf";
        var handler = function(msg) {
            var data = msg.result, obj, url;
            if (data.err == 0) {
                obj = data.obj;
                url = [ app._peerGetsEntry || this.def.appinfo.getsEntry, obj.path ];
                if (callback) {
                    obj.file = url.join("");
                    callback(msg);
                } else {
                    window.open(url.join(""));
                }
            } else {
                if (callback) {
                    callback(msg);
                } else {
                    System.err.println(data);
                }
            }
        }.$bind(this);
        app._doAction("Print", options, handler);
    };
    var _getDLFrame = function() {
        var app = this.getDashboardApp(), iframe;
        iframe = app._ddframe;
        if (iframe) {
            return iframe;
        }
        iframe = app._ddframe = DOM.createElement("IFRAME");
        iframe.style.cssText = "display:none;";
        self.document.body.appendChild(iframe);
        return iframe;
    };
    var Dsh_ApiCall_SavaAsProcessingFlg = false;
    thi$.save = function(options, callback) {
        callback = arguments.length == 1 && Class.isFunction(arguments[0]) ? options : Class.isFunction(callback) ? callback : null;
        options = Class.isPureObject(options) ? options : null;
        if (Dsh_ApiCall_SavaAsProcessingFlg) {
            throw new Error("While repeatedly calling the saveAs API");
        }
        Dsh_ApiCall_SavaAsProcessingFlg = true;
        var app = this.getDashboardApp();
        app._doAction("guiSave", options, function(msg) {
            var data = msg.result;
            Dsh_ApiCall_SavaAsProcessingFlg = false;
            callback && callback(data);
        });
    };
    thi$.saveAs = function(options, callback) {
        callback = arguments.length == 1 && Class.isFunction(arguments[0]) ? options : Class.isFunction(callback) ? callback : null;
        options = Class.isPureObject(options) ? options : null;
        if (Dsh_ApiCall_SavaAsProcessingFlg) {
            throw new Error("While repeatedly calling the saveAs API");
        }
        Dsh_ApiCall_SavaAsProcessingFlg = true;
        var app = this.getDashboardApp();
        app._doAction("apiSaveAs", options, function(msg) {
            var data = msg.result;
            Dsh_ApiCall_SavaAsProcessingFlg = false;
            callback && callback(data);
        });
    };
    thi$.refresh = function() {
        var app = this.getDashboardApp();
        app._doAction("guiRefresh");
    };
    thi$.paramDialog = function() {
        var app = this.getDashboardApp();
        app._doAction("popParametersDlg");
    };
    thi$.changeParameters = function(parameterInfo) {
        var app = this.getDashboardApp();
        app._doAction("changeParameters", parameterInfo);
    };
    thi$.getParameterInfo = function(callBack) {
        var app = this.getDashboardApp();
        app._doAction("getParameterInfo", null, callBack);
    };
    thi$.destroy = function() {
        this._app = null;
        $super(this);
    }.$override(this.destroy);
    thi$._init = function(def, app) {
        if (!Class.isObject(def)) {
            return;
        }
        $super(this, def);
        this._app = app;
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.util.EventTarget);

$package("com.jinfonet.api");

$import("com.jinfonet.api.Dashboard");

com.jinfonet.api.DashboardApp = function() {
    var CLASS = com.jinfonet.api.DashboardApp, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, System = J$VM.System, DOM = J$VM.DOM, Event = js.util.Event, MQ = J$VM.MQ, FACTORY = "com.jinfonet.api.AppFactory", MSGCLASS = "js.util.Message", Message = Class.forName(MSGCLASS), Dashboard = Class.forName("com.jinfonet.api.Dashboard");
    thi$.MSGTYPE = "jreportMessage";
    thi$.getSessionID = function() {
        return this.getRunInfo().session;
    };
    thi$.getRunInfo = function() {
        return this._local.runinfo;
    };
    thi$.innerAPI = function() {
        return true;
    };
    thi$.close = function(callback) {
        if (this.destroied === true) {
            return;
        }
        if (this._local && this._local.dsbinfo) {
            this._doAction("CloseApp", null, function(msg) {
                if (Class.isFunction(callback)) {
                    callback(msg);
                }
                this.destroy();
            }.$bind(this));
        } else {
            if (Class.isFunction(callback)) {
                callback({
                    err: 0
                });
            }
            this.destroy();
        }
    };
    thi$.getDashboardIDs = function() {
        var dsbinfo = this._local.dsbinfo, ret = [];
        (function(id) {
            ret.push(dsbinfo[id]);
        }).$forEach(this, dsbinfo.items);
        return ret;
    };
    thi$.getDashboard = function(dsbid) {
        var dsb = this[dsbid], dsbDef = this._local.dsbinfo[dsbid];
        if (!dsb && dsbDef) {
            dsb = this[dsbid] = new Dashboard(dsbDef, this);
        }
        return dsb;
    };
    thi$.getActiveDashboard = function() {
        var dsbinfo = this._local.dsbinfo, dsbid = dsbinfo.items[dsbinfo.active];
        return this.getDashboard(dsbid);
    };
    thi$.openDashboard = function(res) {
        this._doAction("OpenDashboard", {
            res: res
        });
    };
    thi$.closeDashboard = function(dsbid) {
        this._doAction("CloseDashboard", {
            dsbid: dsbid
        });
    };
    thi$.switchDashboard = function(dsbid) {
        this._doAction("SwitchDashboard", {
            dsbid: dsbid
        });
    };
    thi$._getActionProxy = function(action) {
        return {
            doAction: function(params, callback) {}
        };
    };
    var ActionProxy = function(proxy, runinfo) {
        this.doAction = function(params, callback) {
            proxy.doAction({
                j$vm_pid: runinfo.j$vm_pid,
                j$vm_app: runinfo.j$vm_app,
                jrd_product: runinfo.jrd_product,
                jrd_rptsetid: runinfo.jrd_rptsetid,
                jrd_reportid: runinfo.jrd_reportid,
                jrd_objdef: params
            }, this, function(xhr) {
                var data = xhr.responseJSON();
                (function() {
                    callback(data);
                }).$delay(this, 0);
                xhr.close();
            }, function(xhr) {
                var data = {
                    err: "B0000001",
                    msg: "HTTP " + xhr.status() + ": " + xhr.statusText()
                };
                (function() {
                    callback(data);
                }).$delay(this, 0);
                xhr.close();
            }, function(xhr) {
                var data = {
                    err: "B0000002",
                    msg: "HTTP timeout"
                };
                (function() {
                    callback(data);
                }).$delay(this, 0);
                xhr.close();
            });
        };
        return this;
    };
    thi$._doAction = function(action, params, callback) {
        if (callback) {
            this._setFunction(action, callback);
        }
        var msg = new Message({
            action: action,
            params: params
        });
        if (!this.innerAPI()) {
            this.rpcMessage(msg, this.getMsgBox().peers[0]);
        } else {
            callback = function(data) {
                var fn = this._getFunction(action) || this._getFunction([ "on", null ].join(action));
                msg.result = data;
                if (Class.isFunction(fn)) {
                    fn(msg);
                }
                this.rpcMessage(msg);
                this.fireEvent(new Event("jreportstatus", msg, this));
            }.$bind(this);
            var proxy = this._getActionProxy(action);
            proxy = proxy instanceof com.jinfonet.Action ? new ActionProxy(proxy, this.getRunInfo()) : proxy;
            proxy.doAction(params, callback);
        }
    };
    thi$._getFunction = function(action) {
        this._funs = this._funs || {};
        var fn = this[action] || this._funs[action];
        return fn;
    };
    thi$._setFunction = function(action, fn) {
        this._funs = this._funs || {};
        this._funs[action] = fn;
    };
    var _onMessage = function(e) {
        if (this.iframe && this.iframe.uuid !== e.msgpeer) {
            return;
        }
        var fn, msg;
        msg = e.getData();
        fn = this._getFunction(msg.action);
        if (Class.isFunction(fn)) {
            fn(msg);
            if (this.innerAPI()) {
                return;
            }
        } else {
            if (this.innerAPI()) {
                this._doAction(msg.action, msg.params);
                return;
            }
        }
        this.fireEvent(new Event("jreportstatus", msg, this));
    };
    thi$._initApp = function(info) {
        info = info || {};
        var U = this._local;
        U.runinfo = info;
        U.actions = {};
        this.attachEvent(this.MSGTYPE, 4, this, _onMessage);
        this._maxZIndex = DOM.getMaxZIndex(this.view);
    };
    thi$._release = function() {
        this.detachEvent(this.MSGTYPE, 4, this, _onMessage);
    };
};

$package("com.jinfonet.api");

$import("com.jinfonet.api.DashboardApp");

com.jinfonet.api.DsbAppImpl = function(info) {
    var CLASS = com.jinfonet.api.DsbAppImpl, thi$ = CLASS.prototype;
    if (CLASS.__defined__) {
        this._init.apply(this, arguments);
        return;
    }
    CLASS.__defined__ = true;
    var Class = js.lang.Class, System = J$VM.System, DOM = J$VM.DOM, Event = js.util.Event, MQ = J$VM.MQ;
    thi$.innerAPI = function() {
        return false;
    };
    var _onStartApp = function(msg) {
        var data = msg.result.obj;
        this._peerGetsEntry = data.getsEntry;
    };
    var _onGetDashboardInfo = function(msg) {
        this._local.dsbinfo = msg.result.obj;
    };
    var _openDsbs = function(server, resExt, iframe) {
        var p, v, buf = [];
        if (!server || !server.url) {
            throw new Error("Can not found the url of server");
        }
        if (!resExt) {
            throw new Error("Can not found dasboard resources");
        }
        var paramForm = _createForm(server.url, iframe.name);
        if (server.user) {
            _createParam("jrs.auth_uid", server.user, paramForm);
        }
        if (server.pass) {
            _createParam("jrs.auth_pwd", server.pass, paramForm);
        }
        for (p in server) {
            if (p === "user" || p === "pass") {
                continue;
            }
            v = server[p];
            _createParam(p, Class.isString(v) ? v : JSON.stringify(v), paramForm);
        }
        _createParam("jrd_resext", JSON.stringify(resExt), paramForm);
        document.body.appendChild(paramForm);
        paramForm.submit();
        document.body.removeChild(paramForm);
    };
    var _createForm = function(url, name) {
        var paramForm = document.createElement("FORM");
        paramForm.action = url;
        paramForm.method = "POST";
        paramForm.target = name;
        return paramForm;
    };
    var _createParam = function(name, value, form) {
        var input = document.createElement("INPUT");
        input.type = "hidden";
        input.name = name;
        input.value = value;
        form.appendChild(input);
    };
    var _createIFrame = function() {
        var iframe = DOM.createElement("IFRAME"), text;
        iframe.name = [ "jreport", js.lang.Math.uuid() ].join("-");
        iframe.style.cssText = "position:absolute;border: 0 none;left:0;top:0;" + "width:100%;height:100%";
        iframe.setAttribute("frameBorder", 0);
        this.view.appendChild(iframe);
        return iframe;
    };
    thi$.destroy = function() {
        this.view.removeChild(this.iframe);
        this.iframe = null;
        this.setMsgType(null);
        this._release();
        $super(this);
    }.$override(this.destroy);
    thi$._init = function(info) {
        var entry = self.document.getElementById(info.entry);
        $super(this, {
            id: info.entry,
            className: entry.className,
            stateless: true
        }, null, entry);
        this._setFunction("StartApp", _onStartApp.$bind(this));
        this._setFunction("GetDashboardInfo", _onGetDashboardInfo.$bind(this));
        var iframe = this.iframe = _createIFrame.call(this);
        this.setMsgDevice(iframe);
        this.setMsgType(this.MSGTYPE);
        this._initApp(info);
        _openDsbs.call(this, info.server || {}, info.resExt || {}, iframe);
    }.$override(this._init);
    this._init.apply(this, arguments);
}.$extend(js.awt.Component).$implements(js.util.MessageBox, com.jinfonet.api.DashboardApp);

$package("com.jinfonet.api");

$import("js.awt.Component");

$import("com.jinfonet.api.RptAppImpl");

com.jinfonet.api.AppFactory = new function() {
    var CLASS = com.jinfonet.api.AppFactory, thi$ = this;
    var Class = js.lang.Class, System = J$VM.System, DOM = J$VM.DOM, Event = js.util.Event, MQ = J$VM.MQ;
    var apps = {};
    var getSession = function(server, rptRes, catRes, params, entryId) {
        return Math.crc32(JSON.stringify([ server, rptRes, catRes, params, entryId ]));
    };
    thi$.runReport = function(server, rptRes, catRes, params, entryId) {
        var entry = self.document.getElementById(entryId);
        if (!entry) {
            throw new Error("Can not found element by entryId " + entryId);
        }
        var session = getSession(server, rptRes, catRes, params, entryId), app = apps[entryId];
        if (app) {
            app.close();
        }
        return this.registerApp(entryId, new com.jinfonet.api.RptAppImpl({
            server: server,
            rptRes: rptRes,
            catRes: catRes,
            params: params,
            session: session,
            entry: entryId
        }));
    };
    thi$.runDashboard = function(server, resExt, entryId) {
        var entry = self.document.getElementById(entryId);
        if (!entry) {
            throw new Error("Can not found element by entryId " + entryId);
        }
        var session = getSession(server, resExt, null, null, entryId), app = apps[entryId];
        if (app) {
            app.close();
        }
        return this.registerApp(entryId, new com.jinfonet.api.DsbAppImpl({
            server: server,
            resExt: resExt,
            session: session,
            entry: entryId
        }));
    };
    thi$.registerApp = function(entryId, app) {
        apps[entryId] = app;
        return app;
    };
    thi$.unregisterApp = function(entryId) {
        delete apps[entryId];
    };
    thi$.getApp = function(entryId) {
        return apps[entryId];
    };
}();